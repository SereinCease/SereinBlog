{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/sakura.js","path":"js/sakura.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/link.yml","hash":"400b80c3c81f347a328be9031536b72ba15cc2f1","modified":1706950100202},{"_id":"source/_posts/CO知识点.md","hash":"30e7464311f79132c5c62717150552a3b9a96f66","modified":1731987032293},{"_id":"source/_posts/DS知识点.md","hash":"4c7b5879bf87a1ad8054d58a7a11a03310761e5d","modified":1731987062220},{"_id":"source/_posts/CN知识点.md","hash":"7dd76ba0e726452d95f96ad4d525cf38acc6cf2f","modified":1733038071794},{"_id":"source/_posts/JS学习笔记.md","hash":"4542f5665bac5613a2e0222068ccea22d1f7a136","modified":1737606268977},{"_id":"source/_posts/linux学习.md","hash":"2ce1ca4356fc5515f9c6cb534f8ac86a3c212869","modified":1745056373512},{"_id":"source/_posts/requests框架笔记.md","hash":"6dc83f7d31a70fe26ed78b089ed71b01b9dd02bb","modified":1751693163978},{"_id":"source/_posts/python学习.md","hash":"ab6bd37db8cd5416313e4e0e26f2e98663ddb38d","modified":1751540912945},{"_id":"source/_posts/OS知识点.md","hash":"96688c94843fa27b2de3bd89e1b0e456e81ae51a","modified":1732435147022},{"_id":"source/_posts/html-css学习.md","hash":"24a0fcd02ebf3b1e35c4f1d021e203af5bbfa7e9","modified":1735197747575},{"_id":"source/_posts/web自动化基础.md","hash":"7b8da9039a2eb0d37339d8fdf4297328c0e64e43","modified":1751543588024},{"_id":"source/_posts/接口自动化基础之pytest.md","hash":"59e64c7a0c07b84116ecbe875e865257a8adc85b","modified":1751269881893},{"_id":"source/_posts/高数知识点.md","hash":"b91514ef8e166dce831141646a2d91916f9b5234","modified":1732254073626},{"_id":"source/categories/index.md","hash":"edf4c8209e68591da341f8edf4d793efce1e72a7","modified":1706949822258},{"_id":"source/messageboard/index.md","hash":"895475f1ef5545d87c4fe96429ddf7bc78db7c93","modified":1706950716242},{"_id":"source/_posts/DS代码.md","hash":"8651e34fea308f01ccf05a101e8841f5f6ed8cc9","modified":1731987051841},{"_id":"source/serein/index.md","hash":"2c5bcc50a36e06b84b71f70afc17cbd88cddd6ff","modified":1706951211763},{"_id":"source/tags/index.md","hash":"e809bfad120670f3cbefc3993bf32fb96446ae56","modified":1706949787487},{"_id":"source/_posts/接口测试工具.md","hash":"d4fcc8f56289e6361898409fcf76aba6b5a268ba","modified":1751168836462},{"_id":"source/link/index.md","hash":"9272c48a04f558f8118faf7e9096ad8c3c3a34b8","modified":1706949976901},{"_id":"source/CNAME","hash":"e023403cf4a0cf669edf6ea927a937bf185b5893","modified":1711863206387},{"_id":"source/_posts/数据库学习.md","hash":"6270a9b88e0a46cf14f66c600f62af6f073df2cc","modified":1745635520065},{"_id":"source/_posts/高数第三章积分.md","hash":"d91154cea37072499ce82e4ed26110ef2786798d","modified":1710996734172},{"_id":"source/_posts/数据结构知识点/image-20240203123352948.png","hash":"b907d821752315a9cc86cd91afc20d4d62dea32e","modified":1706934832985},{"_id":"themes/butterfly/README_CN.md","hash":"148da187d16033624ceccce8b8561835296f5a5a","modified":1706348091000},{"_id":"themes/butterfly/package.json","hash":"5536ed4102cd21ace51478bd11f43db03c040d15","modified":1706348091000},{"_id":"themes/butterfly/plugins.yml","hash":"1f8b5e0a533a59f91d760a5f96e61d81a8a9b7d2","modified":1706348091000},{"_id":"themes/butterfly/_config.yml","hash":"39fbabbbf1e89dd82a6ea21517c6c24b49e4dd98","modified":1706348091000},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1706348091000},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1706348091000},{"_id":"themes/butterfly/README.md","hash":"4e01b47448d9f3a02afc04eef644e2321253f6f4","modified":1706348091000},{"_id":"themes/butterfly/languages/default.yml","hash":"90a6dc361de67532437d819a55ec64945ca5404b","modified":1706348091000},{"_id":"themes/butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1706348091000},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1706348091000},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1706348091000},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1706348091000},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1706348091000},{"_id":"themes/butterfly/languages/en.yml","hash":"af5603b1a888f167dc80be6d53a19437b5cf6bef","modified":1706348091000},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"5004faee365139521f161babd66649a8107e4008","modified":1706348091000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1706348091000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1706348091000},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1706348091000},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"03629d1d13a7be09d4933aa5dc0dcbe45e79140c","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1706348091000},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1706348091000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"6e34b565ea013812d5e363b6de5fa1f9078d4e12","modified":1706348091000},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1706348091000},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1706348091000},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1706348091000},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1706348091000},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1706348091000},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"2ac43fd4103ba3c6897da7c13015cb05f39fd695","modified":1706348091000},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"e196a99733d7f90899bceed5d12488e8234817d5","modified":1706348091000},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1706348091000},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"860f967ecf3c6a6ea785b560a7aae4d0757cd18a","modified":1706348091000},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"a8eef3f37428436554f58a2b6bac7c255fbdf38d","modified":1706348091000},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1706348091000},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"96f861151e3b889ef0ffe78821d489ad2625ee43","modified":1706348091000},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"7caf549810f971c34196fb9deac2d992545bdff9","modified":1706348091000},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"d5c7e61257b08a9648404f6f48ce4d471cd5fa55","modified":1706348091000},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"e2a8a09bfe47da26eab242a36f516e6c452c799a","modified":1706348091000},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"821e973d41f7b3b64cde91e0e836ea49c43e3c06","modified":1706348091000},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1706348091000},{"_id":"themes/butterfly/source/css/index.styl","hash":"920784fa235ff649faaa778a9852af6be82bbc77","modified":1706410999828},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"93229d44b35b9da92e647b89d6d3087085974a29","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"418684993a3a3a2ac534257a2d9ecbcead6808c1","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"19773218877281ccffed921431e87148413a7c20","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"830b1d592278b9f676df0cf9a91b1eeda2456aec","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"ffc62222f8d7b4d44c1c0726c8a08824a2201039","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4526c75e5bf84609d67e92b6af3524bcb278e852","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"2ef0a649e32f896448d2e36e904112335cb4f875","modified":1706409089519},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"db275f7fbe4438b54cd813b695f4834e10aa234f","modified":1706348091000},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1706348091000},{"_id":"themes/butterfly/source/js/main.js","hash":"0c33de6f5db7f10572e77a7e32fbb757e996897f","modified":1706411309072},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1706348091000},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1706949081124},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1706348091000},{"_id":"themes/butterfly/source/js/sakura.js","hash":"776081c1b58d076efb989a5937e85d892c103e65","modified":1642074197000},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1706348091000},{"_id":"themes/butterfly/source/css/var.styl","hash":"152b6bd4b6285165541a71f5a1c913f8ee6a602b","modified":1706348091000},{"_id":"themes/butterfly/source/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"5208fe1e75d97a05fd9bdd6cc53c59d8b741b94b","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"63fed4548367a3663cdbaffa1df48167b0a2397b","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"50d1b08367f709e5416140043933e79cd8d77559","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"a096ff8eb6b2a22395be881f827ff2a686ba5596","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e209014de7ac0b9a634872cd9a7c6301bf945993","modified":1706409123830},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"5574804fdea5edf7fd52aad2caf030614d5e7f2f","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"12e57491e94fa00d953bbda9db0b6d6169e2358c","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"a658a274c5f7896ee5122725bee45548693bdd66","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":1706348091000},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"a5c7d362ae63474c1a4e3eb5cd09804b3684e984","modified":1706348091000},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"c8ff6ddd5bfe1190b7b8056b68ce41114fd79dcb","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1706348091000},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"4dcd468e4d11a0ac75406162678feffcd89fee00","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"029eebbdcb3c682780d1de629fa06858cbe9782b","modified":1706348091000},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f19694a42dbe28eda4b39a1696e8fbcd277bc76c","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"fad650f88778b33a6358e38cf50dfafc0974d28f","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"3d23993a2246dfd023d3c83b779b1712feebc9e7","modified":1706412125274},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"b7a6a585dbc38d177c9aba75df3a467415d0488a","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"f845b9b4efdee750f70c023aab27432611f83059","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d6cf26ffb8a0343eda1cde65b6b73b0ddbe8fcfc","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"a2eb44fa5eaea1325319a2064439cf36d0f35a2f","modified":1706348091000},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"0db591a1f4ed5adcb8668a549bbee5c9d62682cf","modified":1706348091000},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"e549d24ad81a7d93326a509ff8dcfcc58c80729e","modified":1706348091000},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1706348091000},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1706348091000},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1706348091000},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1706348091000},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1706348091000},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1706348091000},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d4ebc41b5c855dd75f47de7345d62f85ce7cf073","modified":1706348091000},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"961589da3c0a532c4709a4a4ea96bd579257f766","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"5cddbb5f4eae695a26685e415d821b523e0f17bf","modified":1706348091000},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1706348091000},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1706348091000},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"2d02e52b360f6e6cae47c293ae57ed78e2554663","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"f7299f9fef5bf94bb58c8cd3be8ee660ad2f9cd4","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1706348091000},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1706348091000},{"_id":"themes/butterfly/source/css/_third-party/love.css","hash":"17868aa9977e43aaa66dcdeef587007c066e7510","modified":1706412134820},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"46aec6466959baec1c3d71a5dbc510fbeb00c91d","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"2d7b0b09678adba09481e3152e0b32962677f650","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0d378ee8a671982a46213a4bfb223b4f3409aea9","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5c2bf7d7a4b9df3fb2794b0b32e96158f0de673f","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3bc4c1b91568561f0491bdac65b75aa0bfd01f27","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"62f16a602e57e5f7f7c5249dd37b42d436dc032a","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f15699abb8c7a255aabad0222ae53eee387c66a3","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"63cea2b5c8f7b59f5919379d61a2bb2ce8ed7623","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"46865e3f52096acb07d0212174b4e8751b123aea","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"9b70eea4b1ff083e2b8769493a5b5aea71a02318","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"894bf60ff5170cf1e4f276a8cedaf8301bceb824","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1995a654ba7ad62775a0a6e2922209cd1a85f2e3","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"6b67982bb7a3713b5bffd6a23ba2810425c504d0","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"2609bc2656aaaa9b59e8d575e711776512a62192","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0f0b46d637a9a1b6ae35148923abecc80b866276","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"4104f96faa6040f111ebfb9a90eeb470857c3b86","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"de2c4d02b520dd49a0a59fc0f33295e5bbb2c624","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"1f9f51023e9e33081c2add2ca73643c0edc5e9d5","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"24804ab6da9727ed793655c1262fa3f1a9746f70","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3335024ba91f55ccf3858571b7898f46881c455c","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1706348091000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"9a3617f5e90c4e4176aa2ee2e904c22466e9663b","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"3ba49cfe186e9ca05faf9f0d0113611ec47e9b38","modified":1706348091000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1706348091000},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1706348091000},{"_id":"source/_posts/数据结构知识点/image-20240203123834454.png","hash":"c51d379d6eafbb534a8a981aea043357e5fa96ca","modified":1706935114515},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1706348091000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"25914321762e30aacc610bc4dfb9de3e1cb556a3","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"b928be14d1b47a9fadb1bcc5f5072a7328752d4b","modified":1706348091000},{"_id":"public/categories/index.html","hash":"2421c4e226aba1c9c164af3acfe5f4feb19d9d5c","modified":1751699054313},{"_id":"public/messageboard/index.html","hash":"d241c439f971e051a8af5d5447bd80c6dad4e62c","modified":1751699054313},{"_id":"public/serein/index.html","hash":"26c7a1329ff2f115015fb8cdbced753869053521","modified":1751699054313},{"_id":"public/tags/index.html","hash":"fc37242a7fe59233b840a3cedb1afa2c62ddf250","modified":1751699054313},{"_id":"public/link/index.html","hash":"07b7e4244448b35401f5cf900be53c2c7a0bef19","modified":1751699054313},{"_id":"public/2025/06/30/web自动化基础/index.html","hash":"f69e725fb52822371e516af58c2098a88fabf6fd","modified":1751699054313},{"_id":"public/2025/06/30/requests框架笔记/index.html","hash":"7bbcffb6376a9bfc0d2c2e31f9e8a718e89c90a8","modified":1751699054313},{"_id":"public/2025/06/29/接口自动化基础之pytest/index.html","hash":"9071ed9a2873650c6505dc9840c588125ac11915","modified":1751699054313},{"_id":"public/2025/06/11/接口测试工具/index.html","hash":"1b8d6f8456a54fec18de27083d8d9d18ab724b79","modified":1751699054313},{"_id":"public/2025/04/24/数据库学习/index.html","hash":"59d453c1f160f27e6cb987cd50beb16de1c017aa","modified":1751699054313},{"_id":"public/2025/04/19/linux学习/index.html","hash":"692cf0ea8865eb251a2f9a3027b8a58a3bd8e579","modified":1751699054313},{"_id":"public/2025/01/08/JS学习笔记/index.html","hash":"914d1e8f0a8e484fbabe225f2c1feb48b3853bd9","modified":1751699054313},{"_id":"public/2024/12/26/html-css学习/index.html","hash":"1d52fcc516ed8cc7a6ca0c06070ab720a595f0de","modified":1751699054313},{"_id":"public/2024/11/21/高数知识点/index.html","hash":"2995a7b436c9e8eba1445fcaa41b30aaffa6620b","modified":1751699054313},{"_id":"public/2024/11/19/CN知识点/index.html","hash":"722282398e00e84ba9ff89ab4e1b456e6b83b54a","modified":1751699054313},{"_id":"public/2024/03/13/OS知识点/index.html","hash":"1ab1ffed252fc4ca82eb4f03ed60dc4e44edba33","modified":1751699054313},{"_id":"public/2024/03/08/高数第三章积分/index.html","hash":"79fbb458cd18ba19cba414317517457c8baba0e7","modified":1751699054313},{"_id":"public/2024/03/05/DS知识点/index.html","hash":"5e2b545352dd19b36323203c35b4d02feeb173e0","modified":1751699054313},{"_id":"public/2024/03/05/CO知识点/index.html","hash":"60d0dcfa1dbd9ea5c3366f5818f4ad37d7657e0d","modified":1751699054313},{"_id":"public/2024/01/23/DS代码/index.html","hash":"e2d7980aa58251c4f557cfecd6260c206351f4f9","modified":1751699054313},{"_id":"public/2023/05/19/python学习/index.html","hash":"a70a59b4707fc470e4e0fce08af75b30499c2f22","modified":1751699054313},{"_id":"public/archives/index.html","hash":"29296d4029b395add72978052ae3a528a49658e0","modified":1751699054313},{"_id":"public/archives/page/2/index.html","hash":"a7481f156d3324823534b6d9e979a319eaaaf3d2","modified":1751699054313},{"_id":"public/archives/2023/index.html","hash":"59f97ed1b0d312776996719e20358ac69acbc69e","modified":1751699054313},{"_id":"public/archives/2023/05/index.html","hash":"d7aa4c8e7e41c339706be7b5f0a5d890c119782d","modified":1751699054313},{"_id":"public/archives/2024/index.html","hash":"5a36cb26d644d961ee7d416d50ccf85f65dd6149","modified":1751699054313},{"_id":"public/archives/2024/01/index.html","hash":"d740f57e61ae42a74fe04134c0a11b8350210bff","modified":1751699054313},{"_id":"public/archives/2024/03/index.html","hash":"f3262a78003d9b19a941de5c2545cc4451528dc8","modified":1751699054313},{"_id":"public/archives/2024/11/index.html","hash":"d242f32507e77172ad7d7b8ade46fd6a14ab4770","modified":1751699054313},{"_id":"public/archives/2024/12/index.html","hash":"33b035b5f0ebb2c9b665a43c555d760b085f9c4b","modified":1751699054313},{"_id":"public/archives/2025/index.html","hash":"c68124dec1ce646e5ab4fa14c4939da2095f0580","modified":1751699054313},{"_id":"public/archives/2025/01/index.html","hash":"13c093791764cff808df4a52edbf89261dec4729","modified":1751699054313},{"_id":"public/archives/2025/04/index.html","hash":"e475f574d1df11b41e78aaf67c031228390beb10","modified":1751699054313},{"_id":"public/archives/2025/06/index.html","hash":"29a4efb18b1526785c65d584c06bb214555e81e9","modified":1751699054313},{"_id":"public/categories/408/index.html","hash":"6da3cc741fa39ba27dba9425698879ddf883793e","modified":1751699054313},{"_id":"public/categories/前端/index.html","hash":"a15faf9d3b441c3b85c65dd35352207acc0572aa","modified":1751699054313},{"_id":"public/categories/软件测试/index.html","hash":"16378783e4547f9bd3f3a02013a6952c5e5b960f","modified":1751699054313},{"_id":"public/index.html","hash":"677d1fd840ad8cfee6a23297f3a5049c1f13d09c","modified":1751699054313},{"_id":"public/categories/软测/index.html","hash":"3755a4297129f1e8b403ca9860484917cba73829","modified":1751699054313},{"_id":"public/categories/高数/index.html","hash":"8390f52cbd9466f2330fd42584145391e383b59e","modified":1751699054313},{"_id":"public/page/2/index.html","hash":"67432ee753fa81cc0fec4f1eb8d023fd1e56456d","modified":1751699054313},{"_id":"public/tags/计算机网络/index.html","hash":"57f9484b6938adfe4aecfdcd4da5d9c174ba923e","modified":1751699054313},{"_id":"public/tags/计组/index.html","hash":"80f9aeb69cb174a1786659541b0bcdde6f5b44a8","modified":1751699054313},{"_id":"public/tags/数据结构/index.html","hash":"1ff398518909df96837e9bc9fcb2dc6ebe4d8ea3","modified":1751699054313},{"_id":"public/tags/JavaScript/index.html","hash":"227b7530e18bd45907f16ab71abdc8234207255f","modified":1751699054313},{"_id":"public/tags/操作系统/index.html","hash":"7d5f473a29f9b6071c30411d35949962a8c80782","modified":1751699054313},{"_id":"public/tags/接口自动化/index.html","hash":"fd53890d6d9a2dc90ece69a3d1b5f637a1022bf5","modified":1751699054313},{"_id":"public/tags/Python/index.html","hash":"ba9c3a162f97c54599f35e1d4462d8e6b2e8bb45","modified":1751699054313},{"_id":"public/tags/高数/index.html","hash":"7ae98e4d77e519dc9ef217259b5f03725dfb492a","modified":1751699054313},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1751699054313},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1751699054313},{"_id":"public/CNAME","hash":"e023403cf4a0cf669edf6ea927a937bf185b5893","modified":1751699054313},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1751699054313},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1751699054313},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1751699054313},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1751699054313},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1751699054313},{"_id":"public/css/index.css","hash":"f0f7c08b356a39587b967382c20ec434d57c93f8","modified":1751699054313},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1751699054313},{"_id":"public/js/main.js","hash":"0c33de6f5db7f10572e77a7e32fbb757e996897f","modified":1751699054313},{"_id":"public/js/sakura.js","hash":"776081c1b58d076efb989a5937e85d892c103e65","modified":1751699054313}],"Category":[{"name":"408","_id":"cmcpwe24o00049wnj0k01hlaj"},{"name":"前端","_id":"cmcpwe25m000p9wnj5uheekcr"},{"name":"软件测试","_id":"cmcpwe25q00109wnj9h1oa076"},{"name":"软测","_id":"cmcpwe25w001e9wnj0wr313nb"},{"name":"高数","_id":"cmcpwe25x001h9wnj26ebco5s"}],"Data":[{"_id":"link","data":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Lete乐特","link":"https://www.lete114.top/","avatar":"https://www.lete114.top/img/favicon.ico","descr":"每天进步一点点"},"2":{"name":"rainlotus","link":"https://blog.rainlotus.cc/","avatar":"https://avatars.githubusercontent.com/u/68591650?v=4","descr":"一个每天都学习的博主"}}}}}],"Page":[{"title":"categories","date":"2024-02-03T08:43:24.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2024-02-03 16:43:24\ntype: \"categories\"\n---\n","updated":"2024-02-03T08:43:42.258Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmcpwe23r00009wnjgxtg0xux","content":"","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","cover_type":"img","excerpt":"","more":""},{"title":"messageboard","date":"2024-02-03T08:55:02.000Z","type":"messageboard","_content":"\n# 有什么想对SereinCease说的吗？\n","source":"messageboard/index.md","raw":"---\ntitle: messageboard\ndate: 2024-02-03 16:55:02\ntype: messageboard\n---\n\n# 有什么想对SereinCease说的吗？\n","updated":"2024-02-03T08:58:36.242Z","path":"messageboard/index.html","comments":1,"layout":"page","_id":"cmcpwe24m00029wnj9gpegupe","content":"<h1 id=\"有什么想对SereinCease说的吗？\"><a href=\"#有什么想对SereinCease说的吗？\" class=\"headerlink\" title=\"有什么想对SereinCease说的吗？\"></a>有什么想对SereinCease说的吗？</h1>","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"有什么想对SereinCease说的吗？\"><a href=\"#有什么想对SereinCease说的吗？\" class=\"headerlink\" title=\"有什么想对SereinCease说的吗？\"></a>有什么想对SereinCease说的吗？</h1>"},{"title":"serein","date":"2024-02-03T09:01:11.000Z","type":"serein","_content":"\n# Welcome to SereinCease's Github page\n","source":"serein/index.md","raw":"---\ntitle: serein\ndate: 2024-02-03 17:01:11\ntype: serein\n---\n\n# Welcome to SereinCease's Github page\n","updated":"2024-02-03T09:06:51.763Z","path":"serein/index.html","comments":1,"layout":"page","_id":"cmcpwe24p00069wnjh6eefcg4","content":"<h1 id=\"Welcome-to-SereinCease’s-Github-page\"><a href=\"#Welcome-to-SereinCease’s-Github-page\" class=\"headerlink\" title=\"Welcome to SereinCease’s Github page\"></a>Welcome to SereinCease’s Github page</h1>","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"Welcome-to-SereinCease’s-Github-page\"><a href=\"#Welcome-to-SereinCease’s-Github-page\" class=\"headerlink\" title=\"Welcome to SereinCease’s Github page\"></a>Welcome to SereinCease’s Github page</h1>"},{"title":"tags","date":"2024-02-03T08:42:39.000Z","type":"tags","orderby":"random","order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-02-03 16:42:39\ntype: \"tags\"\norderby: random\norder: 1\n---\n","updated":"2024-02-03T08:43:07.487Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmcpwe24r00089wnjh1446x16","content":"","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","cover_type":"img","excerpt":"","more":""},{"title":"link","date":"2024-02-03T08:43:58.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2024-02-03 16:43:58\ntype: \"link\"\n---\n","updated":"2024-02-03T08:46:16.901Z","path":"link/index.html","comments":1,"layout":"page","_id":"cmcpwe24s000a9wnj76hgf7ao","content":"","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","cover_type":"img","excerpt":"","more":""}],"Post":[{"title":"CN知识点","date":"2024-11-19T03:26:59.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":"真题总结","_content":"\n# 第一章概述\n\n## OSI，TCP/IP对比\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119114547-c4266e.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119114605-76964a.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119114620-ca292c.png)\n\n## 分组交换传输时间\n\n画图分析\n\n# 第二章物理层\n\n## 编码\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119115517-04df9e.png)\n\n**不归零**制：正电平代表1，负电平代表0(或者相反)，⼀个时钟全部⽤来传输数据，效率最⾼，但是收发双⽅存在同步问 题，双⽅都带有时钟线\n\n**归零编码**：⾼电平表示1、低电平表示0(或相反)，每个码元中间均跳变到零电平(归零)，接收⽅根据归零的跳变调整时钟， 这就为收发双⽅提供了⾃同步机制\n\n**反向⾮归零NRZI编码**：⽤电平的跳变表示0、电平保持不变表示1. 跳变信号本身作为⼀种通知机制，传输时钟信号。USB2.0的编码⽅式是NRZI编码\n\n**曼彻斯特编码**：每个码元的中间都发⽣电平跳变，电平跳变既作为时钟信号⽤于同步，⼜作为数据信号。向下跳表示1， 向上跳表示0(或者相反)，标准以太⽹使⽤的就是曼彻斯特编码 曼彻斯特编码每两个码元能表示1个⽐特，所以⽐特率=0.5波特率(这两个名词后⾯会提到)\n\n**差分曼彻斯特编码**：每个码元中间都发⽣电平跳变，电平跳变仅表示时钟信号，不表示数据。数据的表示在于每个码元 开始处是否有电平跳变，⽆跳变表示1，有跳变表示0\n\n## 信道的极限容量（⾹农、奈⽒）\n\n以太⽹采⽤曼彻斯特编码，两个码元携带⼀个⽐特，⽐特率：波特率=1：2\n\n理想低通(⽆噪声，带宽有限)信道下的极限数据传输速率`C= 2Wlog2V `(单位b/s)\n\n⾹农公式：信道极限信息传输速率`C=Wlog2(1 +S/N)`\n\n`信噪⽐(dB)=10log10(S/N)`  如信噪⽐10dB时，S/N=10\n\n两个准则都满足时取最小值\n\n## 物理层接口特性 \n\n 1.机械特性：指明接⼝所⽤接线器的形状、尺⼨、引脚数⽬和排列、固定和锁定装置等 \n\n2.电⽓特性：指明在接⼝电缆的各条线上出现的电压的范围 \n\n3.功能特性：指明某条线上出现的某⼀电平的电压的意义 \n\n4.过程特性：指明对于不同功能的各种可能事件的出现顺序\n\n## 物理层设备\n\n中继器\n\n集线器Hub（多端口中继器）\n\n# 第三章数据链路层\n\n## 封装成帧\n\n字节填充法 字符计数法 零⽐特填充法 违规编码法\n\n## 差错检测\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119125030-f25248.png)\n\n 发送出去的数据：1 0 1 0 0 1 0 0 1\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119125209-d8cb5e.png)\n\n## 流量控制与可靠传输机制\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119121256-e1b81b.png)\n\nW是发送窗口大小\n\n## 介质访问控制\n\n### 静态-复用（不会发生冲突）\n\n频分复用FDM\n\n时分复用TDM\n\n波分复用WDM\n\n码分复用CDM\n\n每个站都要有⾃⼰的，满⾜要求(各站码⽚序列正交)的码⽚序列 如果要发⽐特1，就发送⾃⼰的码⽚序列 如果要发⽐特0，就发⾃⼰码⽚序列的反码，接收站也需要知道想要接受对象的码⽚序列，⽤接收到的混合数据和码⽚序列求规格话内积即可\n\n### 动态\n\n#### ALOHA协议\n\n纯ALOHA-想发就发\n\n时隙ALOHA-时隙开始才能发\n\n#### CSMA协议\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119154922-10b229.png)\n\n#### CSMA/CD（有线局域网）\n\n半双工或总线形\n\n先听先发，边听边发，冲突停发，随机重发\n\n**发生冲突最短时间和最长时间：端到端传播时延，端到端往返时延**\n\n**最短帧⻓**=2 * 总线传播时延 * 数据传输速率=2τ*数据传输速率 （以太⽹单程端到端传播时延τ）以太⽹规定最短帧⻓为64B，即512bit，若数据太短则需要填充到这么⻓才能发送\n\n**二进制退避指数算法**\n\n指数退避算法： 基本退避时间为争⽤期2τ，在以太⽹中是发送64B(512b)所需时间51.2us \n\n从整数集合[0,1,..., 2k −1 ]中随机取⼀个数，记为r。\n\n重传应推后的时间是r倍的争⽤期(rτ) 整数集合⾥的k=Min[重传次数，10] \n\n如果重传16次还不成功，则丢弃该帧，向⾼层报告\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119155801-337c46.png)\n\n#### CSMA/CA（无线局域网）\n\n⽆线信道的通信质量远不如有线信道，802.11局域⽹使⽤CSMA/CA的同时，还使⽤停⽌等待协议\n\n \n\n## 数据链路层设备\n\n|        | 层次       | 冲突域 | 广播域 | 地址 |\n| ------ | ---------- | ------ | ------ | ---- |\n| 中继器 | 物理层     | x      | x      |      |\n| 集线器 | 物理层     | x      | x      |      |\n| 网桥   | 数据链路层 | **√**  | x      | MAC  |\n| 交换机 | 数据链路层 | **√**  | x      | MAC  |\n| 路由器 | 网络层     | **√**  | **√**  | IP   |\n\n#### 交换机\n\n多端口网桥，全双工\n\n直通交换：只检查帧的目的地址，无法支持不同速率端口交换\n\n存储转发交换\n\n自学习功能：学习->源地址，转发->目的地址\n\n\n\n\n\n\n\n\n\n\n\n\n\n![]()\n\n![]()\n\n# 第六章应用层\n\n## 网络应用模型\n\nC/S\n\nP2P\n\n## 域名转IP->域名系统DNS\n\n基于UDP\n\n本地域名服务器，顶级域名服务器，权限域名服务器\n\n查找分两种：迭代（你自己查）递归（我帮你查）\n\n## 文件传输协议FTP\n\n基于TCP，控制连接端口号21，数据连接端口号20\n\n控制连接一直保持，数据连接传送完会释放\n\n主动模式下，服务器使用20端口与客户端建立数据连接\n\n被动模式下，服务器不一定使用20端口\n\n## 电子邮件SMTP，POP3\n\nSMTP只能传送7位ASCII码，其他格式使用MIME\n\n均基于TCP\n\nSMTP端口号25\n\nPOP3端口号110\n\n用户浏览器与Gmail的邮件服务器之间的邮件发送或接收使用的是HTTP，仅在不同邮件服务器之间传送邮件时使用SMTP\n\n## HTTP\n\n端口号80，基于TCP，HTTP1.0，传一次需要建立一次连接，每次都需要2个RTT，HTTP1.1，非流水线方式下传一次需要一个RTT（图片需要单独请求），流水线方式下多个图片可以一次被传送回来，只需要一个RTT（以上三种TCP建立过程都需要1.5个RTT，传送网页0.5个RTT）注意题目中描述从发出第一个web请求开始时，TCP连接已建立\n","source":"_posts/CN知识点.md","raw":"---\ntitle: CN知识点\ndate: 2024-11-19 11:26:59\ntags: 计算机网络\ncategories: 408\ncover:\ndescription: 真题总结\n---\n\n# 第一章概述\n\n## OSI，TCP/IP对比\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119114547-c4266e.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119114605-76964a.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119114620-ca292c.png)\n\n## 分组交换传输时间\n\n画图分析\n\n# 第二章物理层\n\n## 编码\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119115517-04df9e.png)\n\n**不归零**制：正电平代表1，负电平代表0(或者相反)，⼀个时钟全部⽤来传输数据，效率最⾼，但是收发双⽅存在同步问 题，双⽅都带有时钟线\n\n**归零编码**：⾼电平表示1、低电平表示0(或相反)，每个码元中间均跳变到零电平(归零)，接收⽅根据归零的跳变调整时钟， 这就为收发双⽅提供了⾃同步机制\n\n**反向⾮归零NRZI编码**：⽤电平的跳变表示0、电平保持不变表示1. 跳变信号本身作为⼀种通知机制，传输时钟信号。USB2.0的编码⽅式是NRZI编码\n\n**曼彻斯特编码**：每个码元的中间都发⽣电平跳变，电平跳变既作为时钟信号⽤于同步，⼜作为数据信号。向下跳表示1， 向上跳表示0(或者相反)，标准以太⽹使⽤的就是曼彻斯特编码 曼彻斯特编码每两个码元能表示1个⽐特，所以⽐特率=0.5波特率(这两个名词后⾯会提到)\n\n**差分曼彻斯特编码**：每个码元中间都发⽣电平跳变，电平跳变仅表示时钟信号，不表示数据。数据的表示在于每个码元 开始处是否有电平跳变，⽆跳变表示1，有跳变表示0\n\n## 信道的极限容量（⾹农、奈⽒）\n\n以太⽹采⽤曼彻斯特编码，两个码元携带⼀个⽐特，⽐特率：波特率=1：2\n\n理想低通(⽆噪声，带宽有限)信道下的极限数据传输速率`C= 2Wlog2V `(单位b/s)\n\n⾹农公式：信道极限信息传输速率`C=Wlog2(1 +S/N)`\n\n`信噪⽐(dB)=10log10(S/N)`  如信噪⽐10dB时，S/N=10\n\n两个准则都满足时取最小值\n\n## 物理层接口特性 \n\n 1.机械特性：指明接⼝所⽤接线器的形状、尺⼨、引脚数⽬和排列、固定和锁定装置等 \n\n2.电⽓特性：指明在接⼝电缆的各条线上出现的电压的范围 \n\n3.功能特性：指明某条线上出现的某⼀电平的电压的意义 \n\n4.过程特性：指明对于不同功能的各种可能事件的出现顺序\n\n## 物理层设备\n\n中继器\n\n集线器Hub（多端口中继器）\n\n# 第三章数据链路层\n\n## 封装成帧\n\n字节填充法 字符计数法 零⽐特填充法 违规编码法\n\n## 差错检测\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119125030-f25248.png)\n\n 发送出去的数据：1 0 1 0 0 1 0 0 1\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119125209-d8cb5e.png)\n\n## 流量控制与可靠传输机制\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119121256-e1b81b.png)\n\nW是发送窗口大小\n\n## 介质访问控制\n\n### 静态-复用（不会发生冲突）\n\n频分复用FDM\n\n时分复用TDM\n\n波分复用WDM\n\n码分复用CDM\n\n每个站都要有⾃⼰的，满⾜要求(各站码⽚序列正交)的码⽚序列 如果要发⽐特1，就发送⾃⼰的码⽚序列 如果要发⽐特0，就发⾃⼰码⽚序列的反码，接收站也需要知道想要接受对象的码⽚序列，⽤接收到的混合数据和码⽚序列求规格话内积即可\n\n### 动态\n\n#### ALOHA协议\n\n纯ALOHA-想发就发\n\n时隙ALOHA-时隙开始才能发\n\n#### CSMA协议\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119154922-10b229.png)\n\n#### CSMA/CD（有线局域网）\n\n半双工或总线形\n\n先听先发，边听边发，冲突停发，随机重发\n\n**发生冲突最短时间和最长时间：端到端传播时延，端到端往返时延**\n\n**最短帧⻓**=2 * 总线传播时延 * 数据传输速率=2τ*数据传输速率 （以太⽹单程端到端传播时延τ）以太⽹规定最短帧⻓为64B，即512bit，若数据太短则需要填充到这么⻓才能发送\n\n**二进制退避指数算法**\n\n指数退避算法： 基本退避时间为争⽤期2τ，在以太⽹中是发送64B(512b)所需时间51.2us \n\n从整数集合[0,1,..., 2k −1 ]中随机取⼀个数，记为r。\n\n重传应推后的时间是r倍的争⽤期(rτ) 整数集合⾥的k=Min[重传次数，10] \n\n如果重传16次还不成功，则丢弃该帧，向⾼层报告\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119155801-337c46.png)\n\n#### CSMA/CA（无线局域网）\n\n⽆线信道的通信质量远不如有线信道，802.11局域⽹使⽤CSMA/CA的同时，还使⽤停⽌等待协议\n\n \n\n## 数据链路层设备\n\n|        | 层次       | 冲突域 | 广播域 | 地址 |\n| ------ | ---------- | ------ | ------ | ---- |\n| 中继器 | 物理层     | x      | x      |      |\n| 集线器 | 物理层     | x      | x      |      |\n| 网桥   | 数据链路层 | **√**  | x      | MAC  |\n| 交换机 | 数据链路层 | **√**  | x      | MAC  |\n| 路由器 | 网络层     | **√**  | **√**  | IP   |\n\n#### 交换机\n\n多端口网桥，全双工\n\n直通交换：只检查帧的目的地址，无法支持不同速率端口交换\n\n存储转发交换\n\n自学习功能：学习->源地址，转发->目的地址\n\n\n\n\n\n\n\n\n\n\n\n\n\n![]()\n\n![]()\n\n# 第六章应用层\n\n## 网络应用模型\n\nC/S\n\nP2P\n\n## 域名转IP->域名系统DNS\n\n基于UDP\n\n本地域名服务器，顶级域名服务器，权限域名服务器\n\n查找分两种：迭代（你自己查）递归（我帮你查）\n\n## 文件传输协议FTP\n\n基于TCP，控制连接端口号21，数据连接端口号20\n\n控制连接一直保持，数据连接传送完会释放\n\n主动模式下，服务器使用20端口与客户端建立数据连接\n\n被动模式下，服务器不一定使用20端口\n\n## 电子邮件SMTP，POP3\n\nSMTP只能传送7位ASCII码，其他格式使用MIME\n\n均基于TCP\n\nSMTP端口号25\n\nPOP3端口号110\n\n用户浏览器与Gmail的邮件服务器之间的邮件发送或接收使用的是HTTP，仅在不同邮件服务器之间传送邮件时使用SMTP\n\n## HTTP\n\n端口号80，基于TCP，HTTP1.0，传一次需要建立一次连接，每次都需要2个RTT，HTTP1.1，非流水线方式下传一次需要一个RTT（图片需要单独请求），流水线方式下多个图片可以一次被传送回来，只需要一个RTT（以上三种TCP建立过程都需要1.5个RTT，传送网页0.5个RTT）注意题目中描述从发出第一个web请求开始时，TCP连接已建立\n","slug":"CN知识点","published":1,"updated":"2024-12-01T07:27:51.794Z","comments":1,"layout":"post","photos":[],"_id":"cmcpwe24j00019wnj4qn0fyh4","content":"<h1 id=\"第一章概述\"><a href=\"#第一章概述\" class=\"headerlink\" title=\"第一章概述\"></a>第一章概述</h1><h2 id=\"OSI，TCP-IP对比\"><a href=\"#OSI，TCP-IP对比\" class=\"headerlink\" title=\"OSI，TCP&#x2F;IP对比\"></a>OSI，TCP&#x2F;IP对比</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119114547-c4266e.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119114605-76964a.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119114620-ca292c.png\"></p>\n<h2 id=\"分组交换传输时间\"><a href=\"#分组交换传输时间\" class=\"headerlink\" title=\"分组交换传输时间\"></a>分组交换传输时间</h2><p>画图分析</p>\n<h1 id=\"第二章物理层\"><a href=\"#第二章物理层\" class=\"headerlink\" title=\"第二章物理层\"></a>第二章物理层</h1><h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119115517-04df9e.png\"></p>\n<p><strong>不归零</strong>制：正电平代表1，负电平代表0(或者相反)，⼀个时钟全部⽤来传输数据，效率最⾼，但是收发双⽅存在同步问 题，双⽅都带有时钟线</p>\n<p><strong>归零编码</strong>：⾼电平表示1、低电平表示0(或相反)，每个码元中间均跳变到零电平(归零)，接收⽅根据归零的跳变调整时钟， 这就为收发双⽅提供了⾃同步机制</p>\n<p><strong>反向⾮归零NRZI编码</strong>：⽤电平的跳变表示0、电平保持不变表示1. 跳变信号本身作为⼀种通知机制，传输时钟信号。USB2.0的编码⽅式是NRZI编码</p>\n<p><strong>曼彻斯特编码</strong>：每个码元的中间都发⽣电平跳变，电平跳变既作为时钟信号⽤于同步，⼜作为数据信号。向下跳表示1， 向上跳表示0(或者相反)，标准以太⽹使⽤的就是曼彻斯特编码 曼彻斯特编码每两个码元能表示1个⽐特，所以⽐特率&#x3D;0.5波特率(这两个名词后⾯会提到)</p>\n<p><strong>差分曼彻斯特编码</strong>：每个码元中间都发⽣电平跳变，电平跳变仅表示时钟信号，不表示数据。数据的表示在于每个码元 开始处是否有电平跳变，⽆跳变表示1，有跳变表示0</p>\n<h2 id=\"信道的极限容量（⾹农、奈⽒）\"><a href=\"#信道的极限容量（⾹农、奈⽒）\" class=\"headerlink\" title=\"信道的极限容量（⾹农、奈⽒）\"></a>信道的极限容量（⾹农、奈⽒）</h2><p>以太⽹采⽤曼彻斯特编码，两个码元携带⼀个⽐特，⽐特率：波特率&#x3D;1：2</p>\n<p>理想低通(⽆噪声，带宽有限)信道下的极限数据传输速率<code>C= 2Wlog2V </code>(单位b&#x2F;s)</p>\n<p>⾹农公式：信道极限信息传输速率<code>C=Wlog2(1 +S/N)</code></p>\n<p><code>信噪⽐(dB)=10log10(S/N)</code>  如信噪⽐10dB时，S&#x2F;N&#x3D;10</p>\n<p>两个准则都满足时取最小值</p>\n<h2 id=\"物理层接口特性\"><a href=\"#物理层接口特性\" class=\"headerlink\" title=\"物理层接口特性\"></a>物理层接口特性</h2><p> 1.机械特性：指明接⼝所⽤接线器的形状、尺⼨、引脚数⽬和排列、固定和锁定装置等 </p>\n<p>2.电⽓特性：指明在接⼝电缆的各条线上出现的电压的范围 </p>\n<p>3.功能特性：指明某条线上出现的某⼀电平的电压的意义 </p>\n<p>4.过程特性：指明对于不同功能的各种可能事件的出现顺序</p>\n<h2 id=\"物理层设备\"><a href=\"#物理层设备\" class=\"headerlink\" title=\"物理层设备\"></a>物理层设备</h2><p>中继器</p>\n<p>集线器Hub（多端口中继器）</p>\n<h1 id=\"第三章数据链路层\"><a href=\"#第三章数据链路层\" class=\"headerlink\" title=\"第三章数据链路层\"></a>第三章数据链路层</h1><h2 id=\"封装成帧\"><a href=\"#封装成帧\" class=\"headerlink\" title=\"封装成帧\"></a>封装成帧</h2><p>字节填充法 字符计数法 零⽐特填充法 违规编码法</p>\n<h2 id=\"差错检测\"><a href=\"#差错检测\" class=\"headerlink\" title=\"差错检测\"></a>差错检测</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119125030-f25248.png\"></p>\n<p> 发送出去的数据：1 0 1 0 0 1 0 0 1</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119125209-d8cb5e.png\"></p>\n<h2 id=\"流量控制与可靠传输机制\"><a href=\"#流量控制与可靠传输机制\" class=\"headerlink\" title=\"流量控制与可靠传输机制\"></a>流量控制与可靠传输机制</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119121256-e1b81b.png\"></p>\n<p>W是发送窗口大小</p>\n<h2 id=\"介质访问控制\"><a href=\"#介质访问控制\" class=\"headerlink\" title=\"介质访问控制\"></a>介质访问控制</h2><h3 id=\"静态-复用（不会发生冲突）\"><a href=\"#静态-复用（不会发生冲突）\" class=\"headerlink\" title=\"静态-复用（不会发生冲突）\"></a>静态-复用（不会发生冲突）</h3><p>频分复用FDM</p>\n<p>时分复用TDM</p>\n<p>波分复用WDM</p>\n<p>码分复用CDM</p>\n<p>每个站都要有⾃⼰的，满⾜要求(各站码⽚序列正交)的码⽚序列 如果要发⽐特1，就发送⾃⼰的码⽚序列 如果要发⽐特0，就发⾃⼰码⽚序列的反码，接收站也需要知道想要接受对象的码⽚序列，⽤接收到的混合数据和码⽚序列求规格话内积即可</p>\n<h3 id=\"动态\"><a href=\"#动态\" class=\"headerlink\" title=\"动态\"></a>动态</h3><h4 id=\"ALOHA协议\"><a href=\"#ALOHA协议\" class=\"headerlink\" title=\"ALOHA协议\"></a>ALOHA协议</h4><p>纯ALOHA-想发就发</p>\n<p>时隙ALOHA-时隙开始才能发</p>\n<h4 id=\"CSMA协议\"><a href=\"#CSMA协议\" class=\"headerlink\" title=\"CSMA协议\"></a>CSMA协议</h4><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119154922-10b229.png\"></p>\n<h4 id=\"CSMA-CD（有线局域网）\"><a href=\"#CSMA-CD（有线局域网）\" class=\"headerlink\" title=\"CSMA&#x2F;CD（有线局域网）\"></a>CSMA&#x2F;CD（有线局域网）</h4><p>半双工或总线形</p>\n<p>先听先发，边听边发，冲突停发，随机重发</p>\n<p><strong>发生冲突最短时间和最长时间：端到端传播时延，端到端往返时延</strong></p>\n<p><strong>最短帧⻓</strong>&#x3D;2 * 总线传播时延 * 数据传输速率&#x3D;2τ*数据传输速率 （以太⽹单程端到端传播时延τ）以太⽹规定最短帧⻓为64B，即512bit，若数据太短则需要填充到这么⻓才能发送</p>\n<p><strong>二进制退避指数算法</strong></p>\n<p>指数退避算法： 基本退避时间为争⽤期2τ，在以太⽹中是发送64B(512b)所需时间51.2us </p>\n<p>从整数集合[0,1,…, 2k −1 ]中随机取⼀个数，记为r。</p>\n<p>重传应推后的时间是r倍的争⽤期(rτ) 整数集合⾥的k&#x3D;Min[重传次数，10] </p>\n<p>如果重传16次还不成功，则丢弃该帧，向⾼层报告</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119155801-337c46.png\"></p>\n<h4 id=\"CSMA-CA（无线局域网）\"><a href=\"#CSMA-CA（无线局域网）\" class=\"headerlink\" title=\"CSMA&#x2F;CA（无线局域网）\"></a>CSMA&#x2F;CA（无线局域网）</h4><p>⽆线信道的通信质量远不如有线信道，802.11局域⽹使⽤CSMA&#x2F;CA的同时，还使⽤停⽌等待协议</p>\n<h2 id=\"数据链路层设备\"><a href=\"#数据链路层设备\" class=\"headerlink\" title=\"数据链路层设备\"></a>数据链路层设备</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>层次</th>\n<th>冲突域</th>\n<th>广播域</th>\n<th>地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>中继器</td>\n<td>物理层</td>\n<td>x</td>\n<td>x</td>\n<td></td>\n</tr>\n<tr>\n<td>集线器</td>\n<td>物理层</td>\n<td>x</td>\n<td>x</td>\n<td></td>\n</tr>\n<tr>\n<td>网桥</td>\n<td>数据链路层</td>\n<td><strong>√</strong></td>\n<td>x</td>\n<td>MAC</td>\n</tr>\n<tr>\n<td>交换机</td>\n<td>数据链路层</td>\n<td><strong>√</strong></td>\n<td>x</td>\n<td>MAC</td>\n</tr>\n<tr>\n<td>路由器</td>\n<td>网络层</td>\n<td><strong>√</strong></td>\n<td><strong>√</strong></td>\n<td>IP</td>\n</tr>\n</tbody></table>\n<h4 id=\"交换机\"><a href=\"#交换机\" class=\"headerlink\" title=\"交换机\"></a>交换机</h4><p>多端口网桥，全双工</p>\n<p>直通交换：只检查帧的目的地址，无法支持不同速率端口交换</p>\n<p>存储转发交换</p>\n<p>自学习功能：学习-&gt;源地址，转发-&gt;目的地址</p>\n<p><img src=\"/\"></p>\n<p><img src=\"/\"></p>\n<h1 id=\"第六章应用层\"><a href=\"#第六章应用层\" class=\"headerlink\" title=\"第六章应用层\"></a>第六章应用层</h1><h2 id=\"网络应用模型\"><a href=\"#网络应用模型\" class=\"headerlink\" title=\"网络应用模型\"></a>网络应用模型</h2><p>C&#x2F;S</p>\n<p>P2P</p>\n<h2 id=\"域名转IP-域名系统DNS\"><a href=\"#域名转IP-域名系统DNS\" class=\"headerlink\" title=\"域名转IP-&gt;域名系统DNS\"></a>域名转IP-&gt;域名系统DNS</h2><p>基于UDP</p>\n<p>本地域名服务器，顶级域名服务器，权限域名服务器</p>\n<p>查找分两种：迭代（你自己查）递归（我帮你查）</p>\n<h2 id=\"文件传输协议FTP\"><a href=\"#文件传输协议FTP\" class=\"headerlink\" title=\"文件传输协议FTP\"></a>文件传输协议FTP</h2><p>基于TCP，控制连接端口号21，数据连接端口号20</p>\n<p>控制连接一直保持，数据连接传送完会释放</p>\n<p>主动模式下，服务器使用20端口与客户端建立数据连接</p>\n<p>被动模式下，服务器不一定使用20端口</p>\n<h2 id=\"电子邮件SMTP，POP3\"><a href=\"#电子邮件SMTP，POP3\" class=\"headerlink\" title=\"电子邮件SMTP，POP3\"></a>电子邮件SMTP，POP3</h2><p>SMTP只能传送7位ASCII码，其他格式使用MIME</p>\n<p>均基于TCP</p>\n<p>SMTP端口号25</p>\n<p>POP3端口号110</p>\n<p>用户浏览器与Gmail的邮件服务器之间的邮件发送或接收使用的是HTTP，仅在不同邮件服务器之间传送邮件时使用SMTP</p>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p>端口号80，基于TCP，HTTP1.0，传一次需要建立一次连接，每次都需要2个RTT，HTTP1.1，非流水线方式下传一次需要一个RTT（图片需要单独请求），流水线方式下多个图片可以一次被传送回来，只需要一个RTT（以上三种TCP建立过程都需要1.5个RTT，传送网页0.5个RTT）注意题目中描述从发出第一个web请求开始时，TCP连接已建立</p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"第一章概述\"><a href=\"#第一章概述\" class=\"headerlink\" title=\"第一章概述\"></a>第一章概述</h1><h2 id=\"OSI，TCP-IP对比\"><a href=\"#OSI，TCP-IP对比\" class=\"headerlink\" title=\"OSI，TCP&#x2F;IP对比\"></a>OSI，TCP&#x2F;IP对比</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119114547-c4266e.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119114605-76964a.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119114620-ca292c.png\"></p>\n<h2 id=\"分组交换传输时间\"><a href=\"#分组交换传输时间\" class=\"headerlink\" title=\"分组交换传输时间\"></a>分组交换传输时间</h2><p>画图分析</p>\n<h1 id=\"第二章物理层\"><a href=\"#第二章物理层\" class=\"headerlink\" title=\"第二章物理层\"></a>第二章物理层</h1><h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119115517-04df9e.png\"></p>\n<p><strong>不归零</strong>制：正电平代表1，负电平代表0(或者相反)，⼀个时钟全部⽤来传输数据，效率最⾼，但是收发双⽅存在同步问 题，双⽅都带有时钟线</p>\n<p><strong>归零编码</strong>：⾼电平表示1、低电平表示0(或相反)，每个码元中间均跳变到零电平(归零)，接收⽅根据归零的跳变调整时钟， 这就为收发双⽅提供了⾃同步机制</p>\n<p><strong>反向⾮归零NRZI编码</strong>：⽤电平的跳变表示0、电平保持不变表示1. 跳变信号本身作为⼀种通知机制，传输时钟信号。USB2.0的编码⽅式是NRZI编码</p>\n<p><strong>曼彻斯特编码</strong>：每个码元的中间都发⽣电平跳变，电平跳变既作为时钟信号⽤于同步，⼜作为数据信号。向下跳表示1， 向上跳表示0(或者相反)，标准以太⽹使⽤的就是曼彻斯特编码 曼彻斯特编码每两个码元能表示1个⽐特，所以⽐特率&#x3D;0.5波特率(这两个名词后⾯会提到)</p>\n<p><strong>差分曼彻斯特编码</strong>：每个码元中间都发⽣电平跳变，电平跳变仅表示时钟信号，不表示数据。数据的表示在于每个码元 开始处是否有电平跳变，⽆跳变表示1，有跳变表示0</p>\n<h2 id=\"信道的极限容量（⾹农、奈⽒）\"><a href=\"#信道的极限容量（⾹农、奈⽒）\" class=\"headerlink\" title=\"信道的极限容量（⾹农、奈⽒）\"></a>信道的极限容量（⾹农、奈⽒）</h2><p>以太⽹采⽤曼彻斯特编码，两个码元携带⼀个⽐特，⽐特率：波特率&#x3D;1：2</p>\n<p>理想低通(⽆噪声，带宽有限)信道下的极限数据传输速率<code>C= 2Wlog2V </code>(单位b&#x2F;s)</p>\n<p>⾹农公式：信道极限信息传输速率<code>C=Wlog2(1 +S/N)</code></p>\n<p><code>信噪⽐(dB)=10log10(S/N)</code>  如信噪⽐10dB时，S&#x2F;N&#x3D;10</p>\n<p>两个准则都满足时取最小值</p>\n<h2 id=\"物理层接口特性\"><a href=\"#物理层接口特性\" class=\"headerlink\" title=\"物理层接口特性\"></a>物理层接口特性</h2><p> 1.机械特性：指明接⼝所⽤接线器的形状、尺⼨、引脚数⽬和排列、固定和锁定装置等 </p>\n<p>2.电⽓特性：指明在接⼝电缆的各条线上出现的电压的范围 </p>\n<p>3.功能特性：指明某条线上出现的某⼀电平的电压的意义 </p>\n<p>4.过程特性：指明对于不同功能的各种可能事件的出现顺序</p>\n<h2 id=\"物理层设备\"><a href=\"#物理层设备\" class=\"headerlink\" title=\"物理层设备\"></a>物理层设备</h2><p>中继器</p>\n<p>集线器Hub（多端口中继器）</p>\n<h1 id=\"第三章数据链路层\"><a href=\"#第三章数据链路层\" class=\"headerlink\" title=\"第三章数据链路层\"></a>第三章数据链路层</h1><h2 id=\"封装成帧\"><a href=\"#封装成帧\" class=\"headerlink\" title=\"封装成帧\"></a>封装成帧</h2><p>字节填充法 字符计数法 零⽐特填充法 违规编码法</p>\n<h2 id=\"差错检测\"><a href=\"#差错检测\" class=\"headerlink\" title=\"差错检测\"></a>差错检测</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119125030-f25248.png\"></p>\n<p> 发送出去的数据：1 0 1 0 0 1 0 0 1</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119125209-d8cb5e.png\"></p>\n<h2 id=\"流量控制与可靠传输机制\"><a href=\"#流量控制与可靠传输机制\" class=\"headerlink\" title=\"流量控制与可靠传输机制\"></a>流量控制与可靠传输机制</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119121256-e1b81b.png\"></p>\n<p>W是发送窗口大小</p>\n<h2 id=\"介质访问控制\"><a href=\"#介质访问控制\" class=\"headerlink\" title=\"介质访问控制\"></a>介质访问控制</h2><h3 id=\"静态-复用（不会发生冲突）\"><a href=\"#静态-复用（不会发生冲突）\" class=\"headerlink\" title=\"静态-复用（不会发生冲突）\"></a>静态-复用（不会发生冲突）</h3><p>频分复用FDM</p>\n<p>时分复用TDM</p>\n<p>波分复用WDM</p>\n<p>码分复用CDM</p>\n<p>每个站都要有⾃⼰的，满⾜要求(各站码⽚序列正交)的码⽚序列 如果要发⽐特1，就发送⾃⼰的码⽚序列 如果要发⽐特0，就发⾃⼰码⽚序列的反码，接收站也需要知道想要接受对象的码⽚序列，⽤接收到的混合数据和码⽚序列求规格话内积即可</p>\n<h3 id=\"动态\"><a href=\"#动态\" class=\"headerlink\" title=\"动态\"></a>动态</h3><h4 id=\"ALOHA协议\"><a href=\"#ALOHA协议\" class=\"headerlink\" title=\"ALOHA协议\"></a>ALOHA协议</h4><p>纯ALOHA-想发就发</p>\n<p>时隙ALOHA-时隙开始才能发</p>\n<h4 id=\"CSMA协议\"><a href=\"#CSMA协议\" class=\"headerlink\" title=\"CSMA协议\"></a>CSMA协议</h4><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119154922-10b229.png\"></p>\n<h4 id=\"CSMA-CD（有线局域网）\"><a href=\"#CSMA-CD（有线局域网）\" class=\"headerlink\" title=\"CSMA&#x2F;CD（有线局域网）\"></a>CSMA&#x2F;CD（有线局域网）</h4><p>半双工或总线形</p>\n<p>先听先发，边听边发，冲突停发，随机重发</p>\n<p><strong>发生冲突最短时间和最长时间：端到端传播时延，端到端往返时延</strong></p>\n<p><strong>最短帧⻓</strong>&#x3D;2 * 总线传播时延 * 数据传输速率&#x3D;2τ*数据传输速率 （以太⽹单程端到端传播时延τ）以太⽹规定最短帧⻓为64B，即512bit，若数据太短则需要填充到这么⻓才能发送</p>\n<p><strong>二进制退避指数算法</strong></p>\n<p>指数退避算法： 基本退避时间为争⽤期2τ，在以太⽹中是发送64B(512b)所需时间51.2us </p>\n<p>从整数集合[0,1,…, 2k −1 ]中随机取⼀个数，记为r。</p>\n<p>重传应推后的时间是r倍的争⽤期(rτ) 整数集合⾥的k&#x3D;Min[重传次数，10] </p>\n<p>如果重传16次还不成功，则丢弃该帧，向⾼层报告</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-11-19/20241119155801-337c46.png\"></p>\n<h4 id=\"CSMA-CA（无线局域网）\"><a href=\"#CSMA-CA（无线局域网）\" class=\"headerlink\" title=\"CSMA&#x2F;CA（无线局域网）\"></a>CSMA&#x2F;CA（无线局域网）</h4><p>⽆线信道的通信质量远不如有线信道，802.11局域⽹使⽤CSMA&#x2F;CA的同时，还使⽤停⽌等待协议</p>\n<h2 id=\"数据链路层设备\"><a href=\"#数据链路层设备\" class=\"headerlink\" title=\"数据链路层设备\"></a>数据链路层设备</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>层次</th>\n<th>冲突域</th>\n<th>广播域</th>\n<th>地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>中继器</td>\n<td>物理层</td>\n<td>x</td>\n<td>x</td>\n<td></td>\n</tr>\n<tr>\n<td>集线器</td>\n<td>物理层</td>\n<td>x</td>\n<td>x</td>\n<td></td>\n</tr>\n<tr>\n<td>网桥</td>\n<td>数据链路层</td>\n<td><strong>√</strong></td>\n<td>x</td>\n<td>MAC</td>\n</tr>\n<tr>\n<td>交换机</td>\n<td>数据链路层</td>\n<td><strong>√</strong></td>\n<td>x</td>\n<td>MAC</td>\n</tr>\n<tr>\n<td>路由器</td>\n<td>网络层</td>\n<td><strong>√</strong></td>\n<td><strong>√</strong></td>\n<td>IP</td>\n</tr>\n</tbody></table>\n<h4 id=\"交换机\"><a href=\"#交换机\" class=\"headerlink\" title=\"交换机\"></a>交换机</h4><p>多端口网桥，全双工</p>\n<p>直通交换：只检查帧的目的地址，无法支持不同速率端口交换</p>\n<p>存储转发交换</p>\n<p>自学习功能：学习-&gt;源地址，转发-&gt;目的地址</p>\n<p><img src=\"/\"></p>\n<p><img src=\"/\"></p>\n<h1 id=\"第六章应用层\"><a href=\"#第六章应用层\" class=\"headerlink\" title=\"第六章应用层\"></a>第六章应用层</h1><h2 id=\"网络应用模型\"><a href=\"#网络应用模型\" class=\"headerlink\" title=\"网络应用模型\"></a>网络应用模型</h2><p>C&#x2F;S</p>\n<p>P2P</p>\n<h2 id=\"域名转IP-域名系统DNS\"><a href=\"#域名转IP-域名系统DNS\" class=\"headerlink\" title=\"域名转IP-&gt;域名系统DNS\"></a>域名转IP-&gt;域名系统DNS</h2><p>基于UDP</p>\n<p>本地域名服务器，顶级域名服务器，权限域名服务器</p>\n<p>查找分两种：迭代（你自己查）递归（我帮你查）</p>\n<h2 id=\"文件传输协议FTP\"><a href=\"#文件传输协议FTP\" class=\"headerlink\" title=\"文件传输协议FTP\"></a>文件传输协议FTP</h2><p>基于TCP，控制连接端口号21，数据连接端口号20</p>\n<p>控制连接一直保持，数据连接传送完会释放</p>\n<p>主动模式下，服务器使用20端口与客户端建立数据连接</p>\n<p>被动模式下，服务器不一定使用20端口</p>\n<h2 id=\"电子邮件SMTP，POP3\"><a href=\"#电子邮件SMTP，POP3\" class=\"headerlink\" title=\"电子邮件SMTP，POP3\"></a>电子邮件SMTP，POP3</h2><p>SMTP只能传送7位ASCII码，其他格式使用MIME</p>\n<p>均基于TCP</p>\n<p>SMTP端口号25</p>\n<p>POP3端口号110</p>\n<p>用户浏览器与Gmail的邮件服务器之间的邮件发送或接收使用的是HTTP，仅在不同邮件服务器之间传送邮件时使用SMTP</p>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p>端口号80，基于TCP，HTTP1.0，传一次需要建立一次连接，每次都需要2个RTT，HTTP1.1，非流水线方式下传一次需要一个RTT（图片需要单独请求），流水线方式下多个图片可以一次被传送回来，只需要一个RTT（以上三种TCP建立过程都需要1.5个RTT，传送网页0.5个RTT）注意题目中描述从发出第一个web请求开始时，TCP连接已建立</p>\n"},{"title":"计组知识点","date":"2024-03-05T07:49:15.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-05/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240305195548-95ccf9.jpg","description":null,"_content":"\n# 第4章指令系统\n\n## 4.1指令系统\n\n**1.指令集体系结构ISA**\n\n2.指令的基本格式\n\n零地址，一地址，二地址，三地址\n\n3.定长操作码指令\n\n4.扩展操作码指令\n\n(1)不允许短码是长码的前缀\n\n(2)各指令的操作码一定不能重复\n\n计算题考点：**设地址长度为n，上一层留m种用于扩展，下一层可扩展m*2^n^** \n\n5.指令的操作类型\n\n(1)数据传送类\n\n(2)运算类->算数和逻辑运算，移位操作\n\n(3)程序控制类：转移操作\n\n中断隐指令是硬件完成的，不属于程序控制指令\n\n(4)输入和输出操作\n\n## 4.2指令的寻址方式\n\n### 1.指令寻址\n\n确定下一条指令存放的地址，由PC指明\n\n**(1)顺序寻址** PC=PC+“1“，1为一个指令字长\n\n**(2)跳跃寻址** ，执行转移类指令时，PC的值被修改\n\n### 2.数据寻址\n\n表格中访存次数不包含取指的访存\n\n|      寻址方式      |     有效地址     | 访存次数 |\n| :----------------: | :--------------: | :------: |\n|      隐含寻址      |     程序指定     |    0     |\n|      立即寻址      |   A即是操作数    |    0     |\n|      直接寻址      |       EA=A       |    1     |\n|    一次间接寻址    |     EA=(A）      |    2     |\n|    N次间接寻址     |    EA=(((A)))    |   N+1    |\n|     寄存器寻址     |     EA=R~i~      |    0     |\n| 寄存器间接一次寻址 |    EA=(R~i~)     |    1     |\n|      相对寻址      |     EA=PC+A      |    1     |\n|      基址寻址      |    EA=(BR)+A     |    1     |\n|      变址寻址      |    EA=(IX)+A     |    1     |\n|      堆栈寻址      | 硬堆栈（寄存器） |    0     |\n|      堆栈寻址      |  软堆栈（主存）  |    1     |\n\n\n\n| 寻址方式 |                            知识点                            |\n| :------: | :----------------------------------------------------------: |\n| 立即寻址 |                      指令执行期间不访存                      |\n| 隐含寻址 |                     有效**缩短指令字长**                     |\n| 变址寻址 |         解决**数组**问题(A不可变，IX可变，面向用户)          |\n| 基址寻址 | **多道程序设计**或**数据分配存储空间**(BR不可变，A可变，面向系统) |\n| 相对寻址 |                       便于**程序浮动**                       |\n\n## 4.4 CISC和RISC\n\n复杂指令系统CISC\n\n精简指令系统RISC\n\n### CISC和RISC的对比\n\n|                      | CISC               | RISC                         |\n| -------------------- | ------------------ | ---------------------------- |\n| 指令系统             | 复杂庞大           | 简单，精简                   |\n| 指令数目             | 一般大于200条      | 一般小于100条                |\n| 指令字长             | 不固定             | 定长                         |\n| 可访存指令           | 不加限制           | 只有LOAD/STORE指令           |\n| 各种指令执行时间     | 相差较大           | 绝大多数一个周期内完成       |\n| 各种指令使用频度     | 相差较大           | 都比较常用                   |\n| 通用寄存器数量       | 少                 | 多                           |\n| 目标代码             | 难以用优化编译生成 | 优化的编译程序，生成代码高效 |\n| 控制方式（绝大多数） | 微程序控制         | 组合逻辑                     |\n| 指令流水线           | 非必须             | 必须                         |\n\n","source":"_posts/CO知识点.md","raw":"---\ntitle: 计组知识点\ndate: 2024-03-05 15:49:15\ntags: 计组\ncategories: 408\ncover: https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-05/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240305195548-95ccf9.jpg\ndescription:\n---\n\n# 第4章指令系统\n\n## 4.1指令系统\n\n**1.指令集体系结构ISA**\n\n2.指令的基本格式\n\n零地址，一地址，二地址，三地址\n\n3.定长操作码指令\n\n4.扩展操作码指令\n\n(1)不允许短码是长码的前缀\n\n(2)各指令的操作码一定不能重复\n\n计算题考点：**设地址长度为n，上一层留m种用于扩展，下一层可扩展m*2^n^** \n\n5.指令的操作类型\n\n(1)数据传送类\n\n(2)运算类->算数和逻辑运算，移位操作\n\n(3)程序控制类：转移操作\n\n中断隐指令是硬件完成的，不属于程序控制指令\n\n(4)输入和输出操作\n\n## 4.2指令的寻址方式\n\n### 1.指令寻址\n\n确定下一条指令存放的地址，由PC指明\n\n**(1)顺序寻址** PC=PC+“1“，1为一个指令字长\n\n**(2)跳跃寻址** ，执行转移类指令时，PC的值被修改\n\n### 2.数据寻址\n\n表格中访存次数不包含取指的访存\n\n|      寻址方式      |     有效地址     | 访存次数 |\n| :----------------: | :--------------: | :------: |\n|      隐含寻址      |     程序指定     |    0     |\n|      立即寻址      |   A即是操作数    |    0     |\n|      直接寻址      |       EA=A       |    1     |\n|    一次间接寻址    |     EA=(A）      |    2     |\n|    N次间接寻址     |    EA=(((A)))    |   N+1    |\n|     寄存器寻址     |     EA=R~i~      |    0     |\n| 寄存器间接一次寻址 |    EA=(R~i~)     |    1     |\n|      相对寻址      |     EA=PC+A      |    1     |\n|      基址寻址      |    EA=(BR)+A     |    1     |\n|      变址寻址      |    EA=(IX)+A     |    1     |\n|      堆栈寻址      | 硬堆栈（寄存器） |    0     |\n|      堆栈寻址      |  软堆栈（主存）  |    1     |\n\n\n\n| 寻址方式 |                            知识点                            |\n| :------: | :----------------------------------------------------------: |\n| 立即寻址 |                      指令执行期间不访存                      |\n| 隐含寻址 |                     有效**缩短指令字长**                     |\n| 变址寻址 |         解决**数组**问题(A不可变，IX可变，面向用户)          |\n| 基址寻址 | **多道程序设计**或**数据分配存储空间**(BR不可变，A可变，面向系统) |\n| 相对寻址 |                       便于**程序浮动**                       |\n\n## 4.4 CISC和RISC\n\n复杂指令系统CISC\n\n精简指令系统RISC\n\n### CISC和RISC的对比\n\n|                      | CISC               | RISC                         |\n| -------------------- | ------------------ | ---------------------------- |\n| 指令系统             | 复杂庞大           | 简单，精简                   |\n| 指令数目             | 一般大于200条      | 一般小于100条                |\n| 指令字长             | 不固定             | 定长                         |\n| 可访存指令           | 不加限制           | 只有LOAD/STORE指令           |\n| 各种指令执行时间     | 相差较大           | 绝大多数一个周期内完成       |\n| 各种指令使用频度     | 相差较大           | 都比较常用                   |\n| 通用寄存器数量       | 少                 | 多                           |\n| 目标代码             | 难以用优化编译生成 | 优化的编译程序，生成代码高效 |\n| 控制方式（绝大多数） | 微程序控制         | 组合逻辑                     |\n| 指令流水线           | 非必须             | 必须                         |\n\n","slug":"CO知识点","published":1,"updated":"2024-11-19T03:30:32.293Z","comments":1,"layout":"post","photos":[],"_id":"cmcpwe24m00039wnjcfuqhsv1","content":"<h1 id=\"第4章指令系统\"><a href=\"#第4章指令系统\" class=\"headerlink\" title=\"第4章指令系统\"></a>第4章指令系统</h1><h2 id=\"4-1指令系统\"><a href=\"#4-1指令系统\" class=\"headerlink\" title=\"4.1指令系统\"></a>4.1指令系统</h2><p><strong>1.指令集体系结构ISA</strong></p>\n<p>2.指令的基本格式</p>\n<p>零地址，一地址，二地址，三地址</p>\n<p>3.定长操作码指令</p>\n<p>4.扩展操作码指令</p>\n<p>(1)不允许短码是长码的前缀</p>\n<p>(2)各指令的操作码一定不能重复</p>\n<p>计算题考点：<strong>设地址长度为n，上一层留m种用于扩展，下一层可扩展m*2^n^</strong> </p>\n<p>5.指令的操作类型</p>\n<p>(1)数据传送类</p>\n<p>(2)运算类-&gt;算数和逻辑运算，移位操作</p>\n<p>(3)程序控制类：转移操作</p>\n<p>中断隐指令是硬件完成的，不属于程序控制指令</p>\n<p>(4)输入和输出操作</p>\n<h2 id=\"4-2指令的寻址方式\"><a href=\"#4-2指令的寻址方式\" class=\"headerlink\" title=\"4.2指令的寻址方式\"></a>4.2指令的寻址方式</h2><h3 id=\"1-指令寻址\"><a href=\"#1-指令寻址\" class=\"headerlink\" title=\"1.指令寻址\"></a>1.指令寻址</h3><p>确定下一条指令存放的地址，由PC指明</p>\n<p><strong>(1)顺序寻址</strong> PC&#x3D;PC+“1“，1为一个指令字长</p>\n<p><strong>(2)跳跃寻址</strong> ，执行转移类指令时，PC的值被修改</p>\n<h3 id=\"2-数据寻址\"><a href=\"#2-数据寻址\" class=\"headerlink\" title=\"2.数据寻址\"></a>2.数据寻址</h3><p>表格中访存次数不包含取指的访存</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">寻址方式</th>\n<th align=\"center\">有效地址</th>\n<th align=\"center\">访存次数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">隐含寻址</td>\n<td align=\"center\">程序指定</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">立即寻址</td>\n<td align=\"center\">A即是操作数</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">直接寻址</td>\n<td align=\"center\">EA&#x3D;A</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">一次间接寻址</td>\n<td align=\"center\">EA&#x3D;(A）</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">N次间接寻址</td>\n<td align=\"center\">EA&#x3D;(((A)))</td>\n<td align=\"center\">N+1</td>\n</tr>\n<tr>\n<td align=\"center\">寄存器寻址</td>\n<td align=\"center\">EA&#x3D;R<del>i</del></td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">寄存器间接一次寻址</td>\n<td align=\"center\">EA&#x3D;(R<del>i</del>)</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">相对寻址</td>\n<td align=\"center\">EA&#x3D;PC+A</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">基址寻址</td>\n<td align=\"center\">EA&#x3D;(BR)+A</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">变址寻址</td>\n<td align=\"center\">EA&#x3D;(IX)+A</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">堆栈寻址</td>\n<td align=\"center\">硬堆栈（寄存器）</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">堆栈寻址</td>\n<td align=\"center\">软堆栈（主存）</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">寻址方式</th>\n<th align=\"center\">知识点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">立即寻址</td>\n<td align=\"center\">指令执行期间不访存</td>\n</tr>\n<tr>\n<td align=\"center\">隐含寻址</td>\n<td align=\"center\">有效<strong>缩短指令字长</strong></td>\n</tr>\n<tr>\n<td align=\"center\">变址寻址</td>\n<td align=\"center\">解决<strong>数组</strong>问题(A不可变，IX可变，面向用户)</td>\n</tr>\n<tr>\n<td align=\"center\">基址寻址</td>\n<td align=\"center\"><strong>多道程序设计</strong>或<strong>数据分配存储空间</strong>(BR不可变，A可变，面向系统)</td>\n</tr>\n<tr>\n<td align=\"center\">相对寻址</td>\n<td align=\"center\">便于<strong>程序浮动</strong></td>\n</tr>\n</tbody></table>\n<h2 id=\"4-4-CISC和RISC\"><a href=\"#4-4-CISC和RISC\" class=\"headerlink\" title=\"4.4 CISC和RISC\"></a>4.4 CISC和RISC</h2><p>复杂指令系统CISC</p>\n<p>精简指令系统RISC</p>\n<h3 id=\"CISC和RISC的对比\"><a href=\"#CISC和RISC的对比\" class=\"headerlink\" title=\"CISC和RISC的对比\"></a>CISC和RISC的对比</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>CISC</th>\n<th>RISC</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>指令系统</td>\n<td>复杂庞大</td>\n<td>简单，精简</td>\n</tr>\n<tr>\n<td>指令数目</td>\n<td>一般大于200条</td>\n<td>一般小于100条</td>\n</tr>\n<tr>\n<td>指令字长</td>\n<td>不固定</td>\n<td>定长</td>\n</tr>\n<tr>\n<td>可访存指令</td>\n<td>不加限制</td>\n<td>只有LOAD&#x2F;STORE指令</td>\n</tr>\n<tr>\n<td>各种指令执行时间</td>\n<td>相差较大</td>\n<td>绝大多数一个周期内完成</td>\n</tr>\n<tr>\n<td>各种指令使用频度</td>\n<td>相差较大</td>\n<td>都比较常用</td>\n</tr>\n<tr>\n<td>通用寄存器数量</td>\n<td>少</td>\n<td>多</td>\n</tr>\n<tr>\n<td>目标代码</td>\n<td>难以用优化编译生成</td>\n<td>优化的编译程序，生成代码高效</td>\n</tr>\n<tr>\n<td>控制方式（绝大多数）</td>\n<td>微程序控制</td>\n<td>组合逻辑</td>\n</tr>\n<tr>\n<td>指令流水线</td>\n<td>非必须</td>\n<td>必须</td>\n</tr>\n</tbody></table>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"第4章指令系统\"><a href=\"#第4章指令系统\" class=\"headerlink\" title=\"第4章指令系统\"></a>第4章指令系统</h1><h2 id=\"4-1指令系统\"><a href=\"#4-1指令系统\" class=\"headerlink\" title=\"4.1指令系统\"></a>4.1指令系统</h2><p><strong>1.指令集体系结构ISA</strong></p>\n<p>2.指令的基本格式</p>\n<p>零地址，一地址，二地址，三地址</p>\n<p>3.定长操作码指令</p>\n<p>4.扩展操作码指令</p>\n<p>(1)不允许短码是长码的前缀</p>\n<p>(2)各指令的操作码一定不能重复</p>\n<p>计算题考点：<strong>设地址长度为n，上一层留m种用于扩展，下一层可扩展m*2^n^</strong> </p>\n<p>5.指令的操作类型</p>\n<p>(1)数据传送类</p>\n<p>(2)运算类-&gt;算数和逻辑运算，移位操作</p>\n<p>(3)程序控制类：转移操作</p>\n<p>中断隐指令是硬件完成的，不属于程序控制指令</p>\n<p>(4)输入和输出操作</p>\n<h2 id=\"4-2指令的寻址方式\"><a href=\"#4-2指令的寻址方式\" class=\"headerlink\" title=\"4.2指令的寻址方式\"></a>4.2指令的寻址方式</h2><h3 id=\"1-指令寻址\"><a href=\"#1-指令寻址\" class=\"headerlink\" title=\"1.指令寻址\"></a>1.指令寻址</h3><p>确定下一条指令存放的地址，由PC指明</p>\n<p><strong>(1)顺序寻址</strong> PC&#x3D;PC+“1“，1为一个指令字长</p>\n<p><strong>(2)跳跃寻址</strong> ，执行转移类指令时，PC的值被修改</p>\n<h3 id=\"2-数据寻址\"><a href=\"#2-数据寻址\" class=\"headerlink\" title=\"2.数据寻址\"></a>2.数据寻址</h3><p>表格中访存次数不包含取指的访存</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">寻址方式</th>\n<th align=\"center\">有效地址</th>\n<th align=\"center\">访存次数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">隐含寻址</td>\n<td align=\"center\">程序指定</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">立即寻址</td>\n<td align=\"center\">A即是操作数</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">直接寻址</td>\n<td align=\"center\">EA&#x3D;A</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">一次间接寻址</td>\n<td align=\"center\">EA&#x3D;(A）</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">N次间接寻址</td>\n<td align=\"center\">EA&#x3D;(((A)))</td>\n<td align=\"center\">N+1</td>\n</tr>\n<tr>\n<td align=\"center\">寄存器寻址</td>\n<td align=\"center\">EA&#x3D;R<del>i</del></td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">寄存器间接一次寻址</td>\n<td align=\"center\">EA&#x3D;(R<del>i</del>)</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">相对寻址</td>\n<td align=\"center\">EA&#x3D;PC+A</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">基址寻址</td>\n<td align=\"center\">EA&#x3D;(BR)+A</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">变址寻址</td>\n<td align=\"center\">EA&#x3D;(IX)+A</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">堆栈寻址</td>\n<td align=\"center\">硬堆栈（寄存器）</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">堆栈寻址</td>\n<td align=\"center\">软堆栈（主存）</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">寻址方式</th>\n<th align=\"center\">知识点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">立即寻址</td>\n<td align=\"center\">指令执行期间不访存</td>\n</tr>\n<tr>\n<td align=\"center\">隐含寻址</td>\n<td align=\"center\">有效<strong>缩短指令字长</strong></td>\n</tr>\n<tr>\n<td align=\"center\">变址寻址</td>\n<td align=\"center\">解决<strong>数组</strong>问题(A不可变，IX可变，面向用户)</td>\n</tr>\n<tr>\n<td align=\"center\">基址寻址</td>\n<td align=\"center\"><strong>多道程序设计</strong>或<strong>数据分配存储空间</strong>(BR不可变，A可变，面向系统)</td>\n</tr>\n<tr>\n<td align=\"center\">相对寻址</td>\n<td align=\"center\">便于<strong>程序浮动</strong></td>\n</tr>\n</tbody></table>\n<h2 id=\"4-4-CISC和RISC\"><a href=\"#4-4-CISC和RISC\" class=\"headerlink\" title=\"4.4 CISC和RISC\"></a>4.4 CISC和RISC</h2><p>复杂指令系统CISC</p>\n<p>精简指令系统RISC</p>\n<h3 id=\"CISC和RISC的对比\"><a href=\"#CISC和RISC的对比\" class=\"headerlink\" title=\"CISC和RISC的对比\"></a>CISC和RISC的对比</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>CISC</th>\n<th>RISC</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>指令系统</td>\n<td>复杂庞大</td>\n<td>简单，精简</td>\n</tr>\n<tr>\n<td>指令数目</td>\n<td>一般大于200条</td>\n<td>一般小于100条</td>\n</tr>\n<tr>\n<td>指令字长</td>\n<td>不固定</td>\n<td>定长</td>\n</tr>\n<tr>\n<td>可访存指令</td>\n<td>不加限制</td>\n<td>只有LOAD&#x2F;STORE指令</td>\n</tr>\n<tr>\n<td>各种指令执行时间</td>\n<td>相差较大</td>\n<td>绝大多数一个周期内完成</td>\n</tr>\n<tr>\n<td>各种指令使用频度</td>\n<td>相差较大</td>\n<td>都比较常用</td>\n</tr>\n<tr>\n<td>通用寄存器数量</td>\n<td>少</td>\n<td>多</td>\n</tr>\n<tr>\n<td>目标代码</td>\n<td>难以用优化编译生成</td>\n<td>优化的编译程序，生成代码高效</td>\n</tr>\n<tr>\n<td>控制方式（绝大多数）</td>\n<td>微程序控制</td>\n<td>组合逻辑</td>\n</tr>\n<tr>\n<td>指令流水线</td>\n<td>非必须</td>\n<td>必须</td>\n</tr>\n</tbody></table>\n"},{"title":"代码题","date":"2024-01-23T10:19:08.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-02-01/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240201122417-ae9943.jpg","_content":"\n## 顺序表的定义\n\n```c++\n#define MaxSize 50\n#define InitSize 100;\ntypedef int ElemType;\n//静态分配\ntypedef struct {\n    ElemType data[MaxSize];\n    int length;\n}SqList;\n//动态分配\ntypedef struct {\n    ElemType *data;\n    int MaxSize;//最大容量\n    int length;\n}SeqList;\n```\n\n## 顺序表的初始化\n\n```c++\n//静态分配初始化\nvoid InitList(SqList &L){\n    L.length=0;\n}\n\n//动态分配初始化\nvoid InitList(SeqList &L){\n    L.data=(ElemType *)malloc(MaxSize*sizeof(ElemType));\n    L.length=0;\n    L.MaxSize=InitSize;\n}\n```\n\n\n\n## 顺序表的插入，插入i位置的元素\n\n```c++\nbool ListInsert(SqList &L,int i,ElemType element){\n    //判断插入位置是否合法\n    if(i<1||i>L.length+1)\n        return false;\n    //判断顺序表是否满了\n    if(L.length>=MaxSize)\n        return false;\n    //顺序表插入操作\n    for (int j = L.length; j >=i; j--) {\n        L.data[j]=L.data[j-1];\n    }\n    L.data[i-1]=element;\n    L.length++;\n    return true;\n}\n```\n\n## 顺序表的删除，删除i位置的元素\n\n```c++\n//顺序表的删除，输入删除元素的位置，返回删除元素的值\nbool ListDelete(SqList &L,int i,ElemType e){\n    if(i<1||i>L.length)\n        return false;\n    e=L.data[i-1];\n    for (int j = i; j < L.length; j++) {\n        L.data[j-1]=L.data[j];\n    }\n    L.length--;\n    return true;\n}\n```\n\n## 按值查找\n\n```c++\n//顺序表的查找\nint LocateElem(SqList L,ElemType e){\n    for (int i = 0; i < L.length; i++) {\n        if(L.data[i]==e)\n            return i+1;\n        return 0;\n    }\n}\n```\n\n\n\n\n\n## 打印顺序表\n\n```c++\n//打印顺序表\nvoid PrintList(SqList L){\n    for (int i = 0; i < L.length; i++) {\n        printf(\"%4d\",L.data[i]);\n    }\n    printf(\"\\n\");\n}\n```\n\n## 有序表插入仍然保持有序(升序）\n\n```c++\nint List_insert(SqList &L,ElemType e){\n    int i;\n    for ( i = 0; i < L.length; i++) {\n        if(e<L.data[i])\n            break;\n    }\n    for (int j =L.length; j>=i+1 ; j--) {\n        L.data[j]=L.data[j-1];\n    }\n    L.data[i]=e;\n    L.length++;\n    return i+1;\n}\n```\n\n\n\n\n\n单链表结构体定义\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n//链表练习\ntypedef int ElemType;\ntypedef struct LNode{\n    ElemType data;\n    struct LNode *next;//定义指针域\n}LNode,*LinkList;\n\n\n```\n\n单链表遍历输出\n\n```c\nvoid ListPrint(LNode* L){\n    L=L->next;//从第一个结点开始遍历\n    while(L!=NULL){\n        printf(\"%3d\",L->data);\n        L=L->next;\n    }\n    printf(\"\\n\");\n}\n```\n\n单链表按位查找\n\n```c\nLinkList serach_i(LinkList L, int i){\n    if(i<1)\n        return NULL;//判断插入位置是否合法\n    LNode *p=L->next;//从第一个结点开始遍历\n    int k=1;\n    while (p!=NULL&&k<i){\n        p=p->next;\n        k++;\n    }\n    return p;\n}\n```\n\n单链表按值查找\n\n```c\nLNode *search_e(LinkList L, int e){\n    LNode *p=L->next;\n    while(p!=NULL&&(p->data!=e){\n        p=p->next;\n    }\n    return p;\n}\n```\n\n头插法\n\n```c\n//头插法\nLinkList List_HeadInsert(LinkList &L){\n    L=(LNode*)malloc(sizeof (LNode));\n    L->next=NULL;//头结点初始化;\n    LNode *s;//定义一个指针指向新节点\n    int x;//记录新节点的值\n    scanf(\"%d\",&x);//输入新节点的值\n    while (x!=9999){\n        s=(LNode*)malloc(sizeof (LNode));\n        s->data=x;\n        s->next=L->next;\n        L->next=s;\n        scanf(\"%d\",&x);\n    }\n    return L;\n}\n\n```\n\n尾插法\n\n```c\n//尾插法\nLinkList  List_TailInsert(LinkList &L){\n    L=(LNode*)malloc(sizeof (LNode));\n    L->next=NULL;//头结点初始化;\n    LNode *s,*r=L;\n    int x;\n    scanf(\"%d\",&x);\n    while(x!=9999){\n        s=(LNode*)malloc(sizeof (LNode));\n        s->data=x;\n        r->next=s;\n        r=s;\n        scanf(\"%d\",&x);\n    }\n    r->next=NULL;\n    return L;\n}\n```\n\n\n\nmain函数\n\n```c\nint main() {\n    LNode* L;\n    List_HeadInsert(L);\n    ListPrint(L);\n    List_TailInsert(L);\n    ListPrint(L);\n    return 0;\n}\n```\n\n","source":"_posts/DS代码.md","raw":"---\ntitle: 代码题\ndate: 2024-01-23 18:19:08\ntags: 数据结构\ncategories: 408\ncover: https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-02-01/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240201122417-ae9943.jpg\n---\n\n## 顺序表的定义\n\n```c++\n#define MaxSize 50\n#define InitSize 100;\ntypedef int ElemType;\n//静态分配\ntypedef struct {\n    ElemType data[MaxSize];\n    int length;\n}SqList;\n//动态分配\ntypedef struct {\n    ElemType *data;\n    int MaxSize;//最大容量\n    int length;\n}SeqList;\n```\n\n## 顺序表的初始化\n\n```c++\n//静态分配初始化\nvoid InitList(SqList &L){\n    L.length=0;\n}\n\n//动态分配初始化\nvoid InitList(SeqList &L){\n    L.data=(ElemType *)malloc(MaxSize*sizeof(ElemType));\n    L.length=0;\n    L.MaxSize=InitSize;\n}\n```\n\n\n\n## 顺序表的插入，插入i位置的元素\n\n```c++\nbool ListInsert(SqList &L,int i,ElemType element){\n    //判断插入位置是否合法\n    if(i<1||i>L.length+1)\n        return false;\n    //判断顺序表是否满了\n    if(L.length>=MaxSize)\n        return false;\n    //顺序表插入操作\n    for (int j = L.length; j >=i; j--) {\n        L.data[j]=L.data[j-1];\n    }\n    L.data[i-1]=element;\n    L.length++;\n    return true;\n}\n```\n\n## 顺序表的删除，删除i位置的元素\n\n```c++\n//顺序表的删除，输入删除元素的位置，返回删除元素的值\nbool ListDelete(SqList &L,int i,ElemType e){\n    if(i<1||i>L.length)\n        return false;\n    e=L.data[i-1];\n    for (int j = i; j < L.length; j++) {\n        L.data[j-1]=L.data[j];\n    }\n    L.length--;\n    return true;\n}\n```\n\n## 按值查找\n\n```c++\n//顺序表的查找\nint LocateElem(SqList L,ElemType e){\n    for (int i = 0; i < L.length; i++) {\n        if(L.data[i]==e)\n            return i+1;\n        return 0;\n    }\n}\n```\n\n\n\n\n\n## 打印顺序表\n\n```c++\n//打印顺序表\nvoid PrintList(SqList L){\n    for (int i = 0; i < L.length; i++) {\n        printf(\"%4d\",L.data[i]);\n    }\n    printf(\"\\n\");\n}\n```\n\n## 有序表插入仍然保持有序(升序）\n\n```c++\nint List_insert(SqList &L,ElemType e){\n    int i;\n    for ( i = 0; i < L.length; i++) {\n        if(e<L.data[i])\n            break;\n    }\n    for (int j =L.length; j>=i+1 ; j--) {\n        L.data[j]=L.data[j-1];\n    }\n    L.data[i]=e;\n    L.length++;\n    return i+1;\n}\n```\n\n\n\n\n\n单链表结构体定义\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n//链表练习\ntypedef int ElemType;\ntypedef struct LNode{\n    ElemType data;\n    struct LNode *next;//定义指针域\n}LNode,*LinkList;\n\n\n```\n\n单链表遍历输出\n\n```c\nvoid ListPrint(LNode* L){\n    L=L->next;//从第一个结点开始遍历\n    while(L!=NULL){\n        printf(\"%3d\",L->data);\n        L=L->next;\n    }\n    printf(\"\\n\");\n}\n```\n\n单链表按位查找\n\n```c\nLinkList serach_i(LinkList L, int i){\n    if(i<1)\n        return NULL;//判断插入位置是否合法\n    LNode *p=L->next;//从第一个结点开始遍历\n    int k=1;\n    while (p!=NULL&&k<i){\n        p=p->next;\n        k++;\n    }\n    return p;\n}\n```\n\n单链表按值查找\n\n```c\nLNode *search_e(LinkList L, int e){\n    LNode *p=L->next;\n    while(p!=NULL&&(p->data!=e){\n        p=p->next;\n    }\n    return p;\n}\n```\n\n头插法\n\n```c\n//头插法\nLinkList List_HeadInsert(LinkList &L){\n    L=(LNode*)malloc(sizeof (LNode));\n    L->next=NULL;//头结点初始化;\n    LNode *s;//定义一个指针指向新节点\n    int x;//记录新节点的值\n    scanf(\"%d\",&x);//输入新节点的值\n    while (x!=9999){\n        s=(LNode*)malloc(sizeof (LNode));\n        s->data=x;\n        s->next=L->next;\n        L->next=s;\n        scanf(\"%d\",&x);\n    }\n    return L;\n}\n\n```\n\n尾插法\n\n```c\n//尾插法\nLinkList  List_TailInsert(LinkList &L){\n    L=(LNode*)malloc(sizeof (LNode));\n    L->next=NULL;//头结点初始化;\n    LNode *s,*r=L;\n    int x;\n    scanf(\"%d\",&x);\n    while(x!=9999){\n        s=(LNode*)malloc(sizeof (LNode));\n        s->data=x;\n        r->next=s;\n        r=s;\n        scanf(\"%d\",&x);\n    }\n    r->next=NULL;\n    return L;\n}\n```\n\n\n\nmain函数\n\n```c\nint main() {\n    LNode* L;\n    List_HeadInsert(L);\n    ListPrint(L);\n    List_TailInsert(L);\n    ListPrint(L);\n    return 0;\n}\n```\n\n","slug":"DS代码","published":1,"updated":"2024-11-19T03:30:51.841Z","comments":1,"layout":"post","photos":[],"_id":"cmcpwe24q00079wnj8s1uhjrj","content":"<h2 id=\"顺序表的定义\"><a href=\"#顺序表的定义\" class=\"headerlink\" title=\"顺序表的定义\"></a>顺序表的定义</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> InitSize 100;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"comment\">//静态分配</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125;SqList;</span><br><span class=\"line\"><span class=\"comment\">//动态分配</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType *data;</span><br><span class=\"line\">    <span class=\"type\">int</span> MaxSize;<span class=\"comment\">//最大容量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125;SeqList;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"顺序表的初始化\"><a href=\"#顺序表的初始化\" class=\"headerlink\" title=\"顺序表的初始化\"></a>顺序表的初始化</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//静态分配初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitList</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    L.length=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//动态分配初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitList</span><span class=\"params\">(SeqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    L.data=(ElemType *)<span class=\"built_in\">malloc</span>(MaxSize*<span class=\"built_in\">sizeof</span>(ElemType));</span><br><span class=\"line\">    L.length=<span class=\"number\">0</span>;</span><br><span class=\"line\">    L.MaxSize=InitSize;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"顺序表的插入，插入i位置的元素\"><a href=\"#顺序表的插入，插入i位置的元素\" class=\"headerlink\" title=\"顺序表的插入，插入i位置的元素\"></a>顺序表的插入，插入i位置的元素</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">ListInsert</span><span class=\"params\">(SqList &amp;L,<span class=\"type\">int</span> i,ElemType element)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断插入位置是否合法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span>||i&gt;L.length+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//判断顺序表是否满了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L.length&gt;=MaxSize)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//顺序表插入操作</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = L.length; j &gt;=i; j--) &#123;</span><br><span class=\"line\">        L.data[j]=L.data[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.data[i<span class=\"number\">-1</span>]=element;</span><br><span class=\"line\">    L.length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"顺序表的删除，删除i位置的元素\"><a href=\"#顺序表的删除，删除i位置的元素\" class=\"headerlink\" title=\"顺序表的删除，删除i位置的元素\"></a>顺序表的删除，删除i位置的元素</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//顺序表的删除，输入删除元素的位置，返回删除元素的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">ListDelete</span><span class=\"params\">(SqList &amp;L,<span class=\"type\">int</span> i,ElemType e)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span>||i&gt;L.length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    e=L.data[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; L.length; j++) &#123;</span><br><span class=\"line\">        L.data[j<span class=\"number\">-1</span>]=L.data[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按值查找\"><a href=\"#按值查找\" class=\"headerlink\" title=\"按值查找\"></a>按值查找</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//顺序表的查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">LocateElem</span><span class=\"params\">(SqList L,ElemType e)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; L.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L.data[i]==e)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"打印顺序表\"><a href=\"#打印顺序表\" class=\"headerlink\" title=\"打印顺序表\"></a>打印顺序表</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//打印顺序表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintList</span><span class=\"params\">(SqList L)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; L.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%4d&quot;</span>,L.data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"有序表插入仍然保持有序-升序）\"><a href=\"#有序表插入仍然保持有序-升序）\" class=\"headerlink\" title=\"有序表插入仍然保持有序(升序）\"></a>有序表插入仍然保持有序(升序）</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">List_insert</span><span class=\"params\">(SqList &amp;L,ElemType e)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; L.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e&lt;L.data[i])</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j =L.length; j&gt;=i+<span class=\"number\">1</span> ; j--) &#123;</span><br><span class=\"line\">        L.data[j]=L.data[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.data[i]=e;</span><br><span class=\"line\">    L.length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>单链表结构体定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//链表练习</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>&#123;</span></span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> *<span class=\"title\">next</span>;</span><span class=\"comment\">//定义指针域</span></span><br><span class=\"line\">&#125;LNode,*LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>单链表遍历输出</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ListPrint</span><span class=\"params\">(LNode* L)</span>&#123;</span><br><span class=\"line\">    L=L-&gt;next;<span class=\"comment\">//从第一个结点开始遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%3d&quot;</span>,L-&gt;data);</span><br><span class=\"line\">        L=L-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>单链表按位查找</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinkList <span class=\"title function_\">serach_i</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;<span class=\"comment\">//判断插入位置是否合法</span></span><br><span class=\"line\">    LNode *p=L-&gt;next;<span class=\"comment\">//从第一个结点开始遍历</span></span><br><span class=\"line\">    <span class=\"type\">int</span> k=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p!=<span class=\"literal\">NULL</span>&amp;&amp;k&lt;i)&#123;</span><br><span class=\"line\">        p=p-&gt;next;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>单链表按值查找</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LNode *<span class=\"title function_\">search_e</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    LNode *p=L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>&amp;&amp;(p-&gt;data!=e)&#123;</span><br><span class=\"line\">        p=p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>头插法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//头插法</span></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList &amp;L)</span>&#123;</span><br><span class=\"line\">    L=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> (LNode));</span><br><span class=\"line\">    L-&gt;next=<span class=\"literal\">NULL</span>;<span class=\"comment\">//头结点初始化;</span></span><br><span class=\"line\">    LNode *s;<span class=\"comment\">//定义一个指针指向新节点</span></span><br><span class=\"line\">    <span class=\"type\">int</span> x;<span class=\"comment\">//记录新节点的值</span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);<span class=\"comment\">//输入新节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x!=<span class=\"number\">9999</span>)&#123;</span><br><span class=\"line\">        s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> (LNode));</span><br><span class=\"line\">        s-&gt;data=x;</span><br><span class=\"line\">        s-&gt;next=L-&gt;next;</span><br><span class=\"line\">        L-&gt;next=s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>尾插法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//尾插法</span></span><br><span class=\"line\">LinkList  <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList &amp;L)</span>&#123;</span><br><span class=\"line\">    L=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> (LNode));</span><br><span class=\"line\">    L-&gt;next=<span class=\"literal\">NULL</span>;<span class=\"comment\">//头结点初始化;</span></span><br><span class=\"line\">    LNode *s,*r=L;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x!=<span class=\"number\">9999</span>)&#123;</span><br><span class=\"line\">        s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> (LNode));</span><br><span class=\"line\">        s-&gt;data=x;</span><br><span class=\"line\">        r-&gt;next=s;</span><br><span class=\"line\">        r=s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>main函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    LNode* L;</span><br><span class=\"line\">    List_HeadInsert(L);</span><br><span class=\"line\">    ListPrint(L);</span><br><span class=\"line\">    List_TailInsert(L);</span><br><span class=\"line\">    ListPrint(L);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","cover_type":"img","excerpt":"","more":"<h2 id=\"顺序表的定义\"><a href=\"#顺序表的定义\" class=\"headerlink\" title=\"顺序表的定义\"></a>顺序表的定义</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> InitSize 100;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"comment\">//静态分配</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125;SqList;</span><br><span class=\"line\"><span class=\"comment\">//动态分配</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType *data;</span><br><span class=\"line\">    <span class=\"type\">int</span> MaxSize;<span class=\"comment\">//最大容量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125;SeqList;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"顺序表的初始化\"><a href=\"#顺序表的初始化\" class=\"headerlink\" title=\"顺序表的初始化\"></a>顺序表的初始化</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//静态分配初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitList</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    L.length=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//动态分配初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitList</span><span class=\"params\">(SeqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    L.data=(ElemType *)<span class=\"built_in\">malloc</span>(MaxSize*<span class=\"built_in\">sizeof</span>(ElemType));</span><br><span class=\"line\">    L.length=<span class=\"number\">0</span>;</span><br><span class=\"line\">    L.MaxSize=InitSize;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"顺序表的插入，插入i位置的元素\"><a href=\"#顺序表的插入，插入i位置的元素\" class=\"headerlink\" title=\"顺序表的插入，插入i位置的元素\"></a>顺序表的插入，插入i位置的元素</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">ListInsert</span><span class=\"params\">(SqList &amp;L,<span class=\"type\">int</span> i,ElemType element)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断插入位置是否合法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span>||i&gt;L.length+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//判断顺序表是否满了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L.length&gt;=MaxSize)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//顺序表插入操作</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = L.length; j &gt;=i; j--) &#123;</span><br><span class=\"line\">        L.data[j]=L.data[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.data[i<span class=\"number\">-1</span>]=element;</span><br><span class=\"line\">    L.length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"顺序表的删除，删除i位置的元素\"><a href=\"#顺序表的删除，删除i位置的元素\" class=\"headerlink\" title=\"顺序表的删除，删除i位置的元素\"></a>顺序表的删除，删除i位置的元素</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//顺序表的删除，输入删除元素的位置，返回删除元素的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">ListDelete</span><span class=\"params\">(SqList &amp;L,<span class=\"type\">int</span> i,ElemType e)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span>||i&gt;L.length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    e=L.data[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; L.length; j++) &#123;</span><br><span class=\"line\">        L.data[j<span class=\"number\">-1</span>]=L.data[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按值查找\"><a href=\"#按值查找\" class=\"headerlink\" title=\"按值查找\"></a>按值查找</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//顺序表的查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">LocateElem</span><span class=\"params\">(SqList L,ElemType e)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; L.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L.data[i]==e)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"打印顺序表\"><a href=\"#打印顺序表\" class=\"headerlink\" title=\"打印顺序表\"></a>打印顺序表</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//打印顺序表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintList</span><span class=\"params\">(SqList L)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; L.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%4d&quot;</span>,L.data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"有序表插入仍然保持有序-升序）\"><a href=\"#有序表插入仍然保持有序-升序）\" class=\"headerlink\" title=\"有序表插入仍然保持有序(升序）\"></a>有序表插入仍然保持有序(升序）</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">List_insert</span><span class=\"params\">(SqList &amp;L,ElemType e)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; L.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e&lt;L.data[i])</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j =L.length; j&gt;=i+<span class=\"number\">1</span> ; j--) &#123;</span><br><span class=\"line\">        L.data[j]=L.data[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.data[i]=e;</span><br><span class=\"line\">    L.length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>单链表结构体定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//链表练习</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>&#123;</span></span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> *<span class=\"title\">next</span>;</span><span class=\"comment\">//定义指针域</span></span><br><span class=\"line\">&#125;LNode,*LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>单链表遍历输出</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ListPrint</span><span class=\"params\">(LNode* L)</span>&#123;</span><br><span class=\"line\">    L=L-&gt;next;<span class=\"comment\">//从第一个结点开始遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%3d&quot;</span>,L-&gt;data);</span><br><span class=\"line\">        L=L-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>单链表按位查找</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinkList <span class=\"title function_\">serach_i</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;<span class=\"comment\">//判断插入位置是否合法</span></span><br><span class=\"line\">    LNode *p=L-&gt;next;<span class=\"comment\">//从第一个结点开始遍历</span></span><br><span class=\"line\">    <span class=\"type\">int</span> k=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p!=<span class=\"literal\">NULL</span>&amp;&amp;k&lt;i)&#123;</span><br><span class=\"line\">        p=p-&gt;next;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>单链表按值查找</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LNode *<span class=\"title function_\">search_e</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    LNode *p=L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>&amp;&amp;(p-&gt;data!=e)&#123;</span><br><span class=\"line\">        p=p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>头插法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//头插法</span></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList &amp;L)</span>&#123;</span><br><span class=\"line\">    L=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> (LNode));</span><br><span class=\"line\">    L-&gt;next=<span class=\"literal\">NULL</span>;<span class=\"comment\">//头结点初始化;</span></span><br><span class=\"line\">    LNode *s;<span class=\"comment\">//定义一个指针指向新节点</span></span><br><span class=\"line\">    <span class=\"type\">int</span> x;<span class=\"comment\">//记录新节点的值</span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);<span class=\"comment\">//输入新节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x!=<span class=\"number\">9999</span>)&#123;</span><br><span class=\"line\">        s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> (LNode));</span><br><span class=\"line\">        s-&gt;data=x;</span><br><span class=\"line\">        s-&gt;next=L-&gt;next;</span><br><span class=\"line\">        L-&gt;next=s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>尾插法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//尾插法</span></span><br><span class=\"line\">LinkList  <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList &amp;L)</span>&#123;</span><br><span class=\"line\">    L=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> (LNode));</span><br><span class=\"line\">    L-&gt;next=<span class=\"literal\">NULL</span>;<span class=\"comment\">//头结点初始化;</span></span><br><span class=\"line\">    LNode *s,*r=L;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x!=<span class=\"number\">9999</span>)&#123;</span><br><span class=\"line\">        s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> (LNode));</span><br><span class=\"line\">        s-&gt;data=x;</span><br><span class=\"line\">        r-&gt;next=s;</span><br><span class=\"line\">        r=s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>main函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    LNode* L;</span><br><span class=\"line\">    List_HeadInsert(L);</span><br><span class=\"line\">    ListPrint(L);</span><br><span class=\"line\">    List_TailInsert(L);</span><br><span class=\"line\">    ListPrint(L);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"数据结构知识点","date":"2024-03-05T11:38:12.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":"数据结构中非代码知识点总结","_content":"\n# 第一章绪论\n\n## 1.基本概念\n\n时间复杂度\n\n空间复杂度\n\n# 第三章栈，队列和数组\n\n1.数组和特殊矩阵\n\n一维数组的存储结构：a[i]=LOC+i*sizeof(ElemType) （下标从0开始）\n\n二维数组按行优先存储结构：\n\nb[i] [j]=LOC+(i*N+j)**sizeof(ElemType)  (M行N列)\n\n2.特殊矩阵的矩阵压缩\n\n采用矩阵压缩的目的：减少不必要的存储空间\n\n(1)对称矩阵\n\n(2)三角矩阵\n\n(3)三对角矩阵\n\n3.稀疏矩阵\n\n稀疏矩阵压缩后失去了随机存储特性\n\n**适用于稀疏矩阵的两种存储结构：三元组表和十字链表**\n\n稀疏矩阵的特点是矩阵中非零元较少\n\n主要考点为计算数组下表，存储地址\n\n# 第五章树与二叉树\n\n## 5.1树的基本概念\n\n1.树的性质\n\n1.结点数=总度数+1\n\n2.度为m的树，m叉树的区别\n\n3.度为m的树第i层至多有m^i-1^个结点（i>=1）\n\n4.高度为h的m叉树至多有m^h-1^/m-1个结点\n\n\n\n## 5.3二叉树的遍历和线索二叉树\n\n1.由遍历序列构成二叉树\n\n先+中\n\n后+中\n\n层+中\n\n# 第六章图\n\n## 6.3图的遍历\n\n广度优先搜索BFS\n\n使用辅助队列，先进先出\n\n类似于树的层次遍历\n\n各边的权值相等时，可解决单源最短路径问题\n\n# 第七章查找\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-14/20240314131102-b846fe.png)\n","source":"_posts/DS知识点.md","raw":"---\ntitle: 数据结构知识点\ndate: 2024-03-05 19:38:12\ntags: 数据结构\ncategories: 408\ncover: \ndescription: 数据结构中非代码知识点总结\n---\n\n# 第一章绪论\n\n## 1.基本概念\n\n时间复杂度\n\n空间复杂度\n\n# 第三章栈，队列和数组\n\n1.数组和特殊矩阵\n\n一维数组的存储结构：a[i]=LOC+i*sizeof(ElemType) （下标从0开始）\n\n二维数组按行优先存储结构：\n\nb[i] [j]=LOC+(i*N+j)**sizeof(ElemType)  (M行N列)\n\n2.特殊矩阵的矩阵压缩\n\n采用矩阵压缩的目的：减少不必要的存储空间\n\n(1)对称矩阵\n\n(2)三角矩阵\n\n(3)三对角矩阵\n\n3.稀疏矩阵\n\n稀疏矩阵压缩后失去了随机存储特性\n\n**适用于稀疏矩阵的两种存储结构：三元组表和十字链表**\n\n稀疏矩阵的特点是矩阵中非零元较少\n\n主要考点为计算数组下表，存储地址\n\n# 第五章树与二叉树\n\n## 5.1树的基本概念\n\n1.树的性质\n\n1.结点数=总度数+1\n\n2.度为m的树，m叉树的区别\n\n3.度为m的树第i层至多有m^i-1^个结点（i>=1）\n\n4.高度为h的m叉树至多有m^h-1^/m-1个结点\n\n\n\n## 5.3二叉树的遍历和线索二叉树\n\n1.由遍历序列构成二叉树\n\n先+中\n\n后+中\n\n层+中\n\n# 第六章图\n\n## 6.3图的遍历\n\n广度优先搜索BFS\n\n使用辅助队列，先进先出\n\n类似于树的层次遍历\n\n各边的权值相等时，可解决单源最短路径问题\n\n# 第七章查找\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-14/20240314131102-b846fe.png)\n","slug":"DS知识点","published":1,"updated":"2024-11-19T03:31:02.220Z","comments":1,"layout":"post","photos":[],"_id":"cmcpwe24r00099wnjeayj2jqv","content":"<h1 id=\"第一章绪论\"><a href=\"#第一章绪论\" class=\"headerlink\" title=\"第一章绪论\"></a>第一章绪论</h1><h2 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h2><p>时间复杂度</p>\n<p>空间复杂度</p>\n<h1 id=\"第三章栈，队列和数组\"><a href=\"#第三章栈，队列和数组\" class=\"headerlink\" title=\"第三章栈，队列和数组\"></a>第三章栈，队列和数组</h1><p>1.数组和特殊矩阵</p>\n<p>一维数组的存储结构：a[i]&#x3D;LOC+i*sizeof(ElemType) （下标从0开始）</p>\n<p>二维数组按行优先存储结构：</p>\n<p>b[i] [j]&#x3D;LOC+(i*N+j)**sizeof(ElemType)  (M行N列)</p>\n<p>2.特殊矩阵的矩阵压缩</p>\n<p>采用矩阵压缩的目的：减少不必要的存储空间</p>\n<p>(1)对称矩阵</p>\n<p>(2)三角矩阵</p>\n<p>(3)三对角矩阵</p>\n<p>3.稀疏矩阵</p>\n<p>稀疏矩阵压缩后失去了随机存储特性</p>\n<p><strong>适用于稀疏矩阵的两种存储结构：三元组表和十字链表</strong></p>\n<p>稀疏矩阵的特点是矩阵中非零元较少</p>\n<p>主要考点为计算数组下表，存储地址</p>\n<h1 id=\"第五章树与二叉树\"><a href=\"#第五章树与二叉树\" class=\"headerlink\" title=\"第五章树与二叉树\"></a>第五章树与二叉树</h1><h2 id=\"5-1树的基本概念\"><a href=\"#5-1树的基本概念\" class=\"headerlink\" title=\"5.1树的基本概念\"></a>5.1树的基本概念</h2><p>1.树的性质</p>\n<p>1.结点数&#x3D;总度数+1</p>\n<p>2.度为m的树，m叉树的区别</p>\n<p>3.度为m的树第i层至多有m^i-1^个结点（i&gt;&#x3D;1）</p>\n<p>4.高度为h的m叉树至多有m^h-1^&#x2F;m-1个结点</p>\n<h2 id=\"5-3二叉树的遍历和线索二叉树\"><a href=\"#5-3二叉树的遍历和线索二叉树\" class=\"headerlink\" title=\"5.3二叉树的遍历和线索二叉树\"></a>5.3二叉树的遍历和线索二叉树</h2><p>1.由遍历序列构成二叉树</p>\n<p>先+中</p>\n<p>后+中</p>\n<p>层+中</p>\n<h1 id=\"第六章图\"><a href=\"#第六章图\" class=\"headerlink\" title=\"第六章图\"></a>第六章图</h1><h2 id=\"6-3图的遍历\"><a href=\"#6-3图的遍历\" class=\"headerlink\" title=\"6.3图的遍历\"></a>6.3图的遍历</h2><p>广度优先搜索BFS</p>\n<p>使用辅助队列，先进先出</p>\n<p>类似于树的层次遍历</p>\n<p>各边的权值相等时，可解决单源最短路径问题</p>\n<h1 id=\"第七章查找\"><a href=\"#第七章查找\" class=\"headerlink\" title=\"第七章查找\"></a>第七章查找</h1><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-14/20240314131102-b846fe.png\"></p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"第一章绪论\"><a href=\"#第一章绪论\" class=\"headerlink\" title=\"第一章绪论\"></a>第一章绪论</h1><h2 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h2><p>时间复杂度</p>\n<p>空间复杂度</p>\n<h1 id=\"第三章栈，队列和数组\"><a href=\"#第三章栈，队列和数组\" class=\"headerlink\" title=\"第三章栈，队列和数组\"></a>第三章栈，队列和数组</h1><p>1.数组和特殊矩阵</p>\n<p>一维数组的存储结构：a[i]&#x3D;LOC+i*sizeof(ElemType) （下标从0开始）</p>\n<p>二维数组按行优先存储结构：</p>\n<p>b[i] [j]&#x3D;LOC+(i*N+j)**sizeof(ElemType)  (M行N列)</p>\n<p>2.特殊矩阵的矩阵压缩</p>\n<p>采用矩阵压缩的目的：减少不必要的存储空间</p>\n<p>(1)对称矩阵</p>\n<p>(2)三角矩阵</p>\n<p>(3)三对角矩阵</p>\n<p>3.稀疏矩阵</p>\n<p>稀疏矩阵压缩后失去了随机存储特性</p>\n<p><strong>适用于稀疏矩阵的两种存储结构：三元组表和十字链表</strong></p>\n<p>稀疏矩阵的特点是矩阵中非零元较少</p>\n<p>主要考点为计算数组下表，存储地址</p>\n<h1 id=\"第五章树与二叉树\"><a href=\"#第五章树与二叉树\" class=\"headerlink\" title=\"第五章树与二叉树\"></a>第五章树与二叉树</h1><h2 id=\"5-1树的基本概念\"><a href=\"#5-1树的基本概念\" class=\"headerlink\" title=\"5.1树的基本概念\"></a>5.1树的基本概念</h2><p>1.树的性质</p>\n<p>1.结点数&#x3D;总度数+1</p>\n<p>2.度为m的树，m叉树的区别</p>\n<p>3.度为m的树第i层至多有m^i-1^个结点（i&gt;&#x3D;1）</p>\n<p>4.高度为h的m叉树至多有m^h-1^&#x2F;m-1个结点</p>\n<h2 id=\"5-3二叉树的遍历和线索二叉树\"><a href=\"#5-3二叉树的遍历和线索二叉树\" class=\"headerlink\" title=\"5.3二叉树的遍历和线索二叉树\"></a>5.3二叉树的遍历和线索二叉树</h2><p>1.由遍历序列构成二叉树</p>\n<p>先+中</p>\n<p>后+中</p>\n<p>层+中</p>\n<h1 id=\"第六章图\"><a href=\"#第六章图\" class=\"headerlink\" title=\"第六章图\"></a>第六章图</h1><h2 id=\"6-3图的遍历\"><a href=\"#6-3图的遍历\" class=\"headerlink\" title=\"6.3图的遍历\"></a>6.3图的遍历</h2><p>广度优先搜索BFS</p>\n<p>使用辅助队列，先进先出</p>\n<p>类似于树的层次遍历</p>\n<p>各边的权值相等时，可解决单源最短路径问题</p>\n<h1 id=\"第七章查找\"><a href=\"#第七章查找\" class=\"headerlink\" title=\"第七章查找\"></a>第七章查找</h1><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-14/20240314131102-b846fe.png\"></p>\n"},{"title":"JS学习笔记","date":"2025-01-08T09:31:24.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":null,"_content":"\n# JS基础\n\n## 1.输出、输入\n\n```javascript\n// 弹窗\nalert('你好 js')\n// 文档输出\ndocument.write('javascript我来了!')\n// 控制台打印\nconsole.log('它~会魔法吧~')\n// 输入\nprompt('请输入年龄')\n```\n\n## 2.变量命名\n\n```javascript\nlet num = 20\n```\n\n#### 交换值\n\n```js\nlet num1 = 10\nlet num2 = 20\nlet temp\ntemp = num1\nnum1 = num2\nnum2 = temp\ndocument.write(num1,num2)\n```\n\n#### 存储一组数据-使用数组\n\n```js\nlet arr = ['星期一','星期二','星期三','星期四','星期五','星期六','星期日']\nconsole.log(arr[6]);\n//数组长度\nconsole.log(arr.length);\n```\n\n## 3.常量\n\n```js\nconst G = 9.8\n```\n\n## 4字符串拼接\n\n```js\nlet name = '张三'\ndocument.write('我叫' + name)\n// 模板字符串\ndocument.write(`我叫${name}，今年${age}岁`)\n\n```\n\n## 通过typeof关键字检测数据类型\n\n```\nconsole.log(typeof flag);\nconsole.log(typeof (flag));\n```\n\n## 类型转换\n\n```js\n//隐式转换\nlet num1 = +prompt('请输入数字1')\n\n//显式转换\nlet num = Number(prompt('请输入数字1'))\ndocument.write(parseInt('12px'))\ndocument.write(parseFloat('12.34px'))\n```\n\n## if分支语句\n\n```js\nif(score >= 90){\n            alert('优秀')\n        }else if(score >= 70 && score < 90){\n            alert('良好')\n        }else if(score >= 60 && score < 70){\n            alert('及格')\n        }else{\n            alert('不及格')\n        }\n```\n\n\n\n## 对象\n\n一种数据类型，无序的数据集合\n\n```\nlet goods = {\n\t'goods-name': '小米10青春版',\n\tnum: 10000126,\n\tweight: '0.55kg',\n\taddress: '中国大陆'\n}\ngoods.price = 1999\n// 删\ndelete goods.price\n// 改\ngoods.num = 222222\n// 查\nconsole.log(goods.address)\nconsole.log(goods['goods-name']);\n```\n\n# Web APIs\n\n\n\n\n\n## 事件监听\n\n```js\n<button>按钮</button>\n\n<script>\n//1.获取事件源\nconst btn = document.querySelector('button')\n//2.事件监听\nbtn.addEventListener('click', function(){\nalert('点击了')\n})\n</script>\n```\n\n","source":"_posts/JS学习笔记.md","raw":"---\ntitle: JS学习笔记\ndate: 2025-01-08 17:31:24\ntags: JavaScript\ncategories: 前端\ncover:\ndescription:\n---\n\n# JS基础\n\n## 1.输出、输入\n\n```javascript\n// 弹窗\nalert('你好 js')\n// 文档输出\ndocument.write('javascript我来了!')\n// 控制台打印\nconsole.log('它~会魔法吧~')\n// 输入\nprompt('请输入年龄')\n```\n\n## 2.变量命名\n\n```javascript\nlet num = 20\n```\n\n#### 交换值\n\n```js\nlet num1 = 10\nlet num2 = 20\nlet temp\ntemp = num1\nnum1 = num2\nnum2 = temp\ndocument.write(num1,num2)\n```\n\n#### 存储一组数据-使用数组\n\n```js\nlet arr = ['星期一','星期二','星期三','星期四','星期五','星期六','星期日']\nconsole.log(arr[6]);\n//数组长度\nconsole.log(arr.length);\n```\n\n## 3.常量\n\n```js\nconst G = 9.8\n```\n\n## 4字符串拼接\n\n```js\nlet name = '张三'\ndocument.write('我叫' + name)\n// 模板字符串\ndocument.write(`我叫${name}，今年${age}岁`)\n\n```\n\n## 通过typeof关键字检测数据类型\n\n```\nconsole.log(typeof flag);\nconsole.log(typeof (flag));\n```\n\n## 类型转换\n\n```js\n//隐式转换\nlet num1 = +prompt('请输入数字1')\n\n//显式转换\nlet num = Number(prompt('请输入数字1'))\ndocument.write(parseInt('12px'))\ndocument.write(parseFloat('12.34px'))\n```\n\n## if分支语句\n\n```js\nif(score >= 90){\n            alert('优秀')\n        }else if(score >= 70 && score < 90){\n            alert('良好')\n        }else if(score >= 60 && score < 70){\n            alert('及格')\n        }else{\n            alert('不及格')\n        }\n```\n\n\n\n## 对象\n\n一种数据类型，无序的数据集合\n\n```\nlet goods = {\n\t'goods-name': '小米10青春版',\n\tnum: 10000126,\n\tweight: '0.55kg',\n\taddress: '中国大陆'\n}\ngoods.price = 1999\n// 删\ndelete goods.price\n// 改\ngoods.num = 222222\n// 查\nconsole.log(goods.address)\nconsole.log(goods['goods-name']);\n```\n\n# Web APIs\n\n\n\n\n\n## 事件监听\n\n```js\n<button>按钮</button>\n\n<script>\n//1.获取事件源\nconst btn = document.querySelector('button')\n//2.事件监听\nbtn.addEventListener('click', function(){\nalert('点击了')\n})\n</script>\n```\n\n","slug":"JS学习笔记","published":1,"updated":"2025-01-23T04:24:28.977Z","comments":1,"layout":"post","photos":[],"_id":"cmcpwe24s000b9wnjh7ua4bnx","content":"<h1 id=\"JS基础\"><a href=\"#JS基础\" class=\"headerlink\" title=\"JS基础\"></a>JS基础</h1><h2 id=\"1-输出、输入\"><a href=\"#1-输出、输入\" class=\"headerlink\" title=\"1.输出、输入\"></a>1.输出、输入</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 弹窗</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你好 js&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 文档输出</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;javascript我来了!&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 控制台打印</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;它~会魔法吧~&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输入</span></span><br><span class=\"line\"><span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;请输入年龄&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-变量命名\"><a href=\"#2-变量命名\" class=\"headerlink\" title=\"2.变量命名\"></a>2.变量命名</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"交换值\"><a href=\"#交换值\" class=\"headerlink\" title=\"交换值\"></a>交换值</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num1 = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num2 = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> temp</span><br><span class=\"line\">temp = num1</span><br><span class=\"line\">num1 = num2</span><br><span class=\"line\">num2 = temp</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(num1,num2)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"存储一组数据-使用数组\"><a href=\"#存储一组数据-使用数组\" class=\"headerlink\" title=\"存储一组数据-使用数组\"></a>存储一组数据-使用数组</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;星期一&#x27;</span>,<span class=\"string\">&#x27;星期二&#x27;</span>,<span class=\"string\">&#x27;星期三&#x27;</span>,<span class=\"string\">&#x27;星期四&#x27;</span>,<span class=\"string\">&#x27;星期五&#x27;</span>,<span class=\"string\">&#x27;星期六&#x27;</span>,<span class=\"string\">&#x27;星期日&#x27;</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[<span class=\"number\">6</span>]);</span><br><span class=\"line\"><span class=\"comment\">//数组长度</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"property\">length</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-常量\"><a href=\"#3-常量\" class=\"headerlink\" title=\"3.常量\"></a>3.常量</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> G = <span class=\"number\">9.8</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4字符串拼接\"><a href=\"#4字符串拼接\" class=\"headerlink\" title=\"4字符串拼接\"></a>4字符串拼接</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;张三&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;我叫&#x27;</span> + name)</span><br><span class=\"line\"><span class=\"comment\">// 模板字符串</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">`我叫<span class=\"subst\">$&#123;name&#125;</span>，今年<span class=\"subst\">$&#123;age&#125;</span>岁`</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过typeof关键字检测数据类型\"><a href=\"#通过typeof关键字检测数据类型\" class=\"headerlink\" title=\"通过typeof关键字检测数据类型\"></a>通过typeof关键字检测数据类型</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(typeof flag);</span><br><span class=\"line\">console.log(typeof (flag));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//隐式转换</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num1 = +<span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;请输入数字1&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//显式转换</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"title class_\">Number</span>(<span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;请输入数字1&#x27;</span>))</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;12px&#x27;</span>))</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;12.34px&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"if分支语句\"><a href=\"#if分支语句\" class=\"headerlink\" title=\"if分支语句\"></a>if分支语句</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(score &gt;= <span class=\"number\">90</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;优秀&#x27;</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &gt;= <span class=\"number\">70</span> &amp;&amp; score &lt; <span class=\"number\">90</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;良好&#x27;</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &gt;= <span class=\"number\">60</span> &amp;&amp; score &lt; <span class=\"number\">70</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;及格&#x27;</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;不及格&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>一种数据类型，无序的数据集合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let goods = &#123;</span><br><span class=\"line\">\t&#x27;goods-name&#x27;: &#x27;小米10青春版&#x27;,</span><br><span class=\"line\">\tnum: 10000126,</span><br><span class=\"line\">\tweight: &#x27;0.55kg&#x27;,</span><br><span class=\"line\">\taddress: &#x27;中国大陆&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">goods.price = 1999</span><br><span class=\"line\">// 删</span><br><span class=\"line\">delete goods.price</span><br><span class=\"line\">// 改</span><br><span class=\"line\">goods.num = 222222</span><br><span class=\"line\">// 查</span><br><span class=\"line\">console.log(goods.address)</span><br><span class=\"line\">console.log(goods[&#x27;goods-name&#x27;]);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Web-APIs\"><a href=\"#Web-APIs\" class=\"headerlink\" title=\"Web APIs\"></a>Web APIs</h1><h2 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button&gt;按钮&lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"comment\">//1.获取事件源</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">const</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;button&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"comment\">//2.事件监听</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;点击了&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n","cover_type":"img","excerpt":"","more":"<h1 id=\"JS基础\"><a href=\"#JS基础\" class=\"headerlink\" title=\"JS基础\"></a>JS基础</h1><h2 id=\"1-输出、输入\"><a href=\"#1-输出、输入\" class=\"headerlink\" title=\"1.输出、输入\"></a>1.输出、输入</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 弹窗</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你好 js&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 文档输出</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;javascript我来了!&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 控制台打印</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;它~会魔法吧~&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输入</span></span><br><span class=\"line\"><span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;请输入年龄&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-变量命名\"><a href=\"#2-变量命名\" class=\"headerlink\" title=\"2.变量命名\"></a>2.变量命名</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"交换值\"><a href=\"#交换值\" class=\"headerlink\" title=\"交换值\"></a>交换值</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num1 = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num2 = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> temp</span><br><span class=\"line\">temp = num1</span><br><span class=\"line\">num1 = num2</span><br><span class=\"line\">num2 = temp</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(num1,num2)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"存储一组数据-使用数组\"><a href=\"#存储一组数据-使用数组\" class=\"headerlink\" title=\"存储一组数据-使用数组\"></a>存储一组数据-使用数组</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;星期一&#x27;</span>,<span class=\"string\">&#x27;星期二&#x27;</span>,<span class=\"string\">&#x27;星期三&#x27;</span>,<span class=\"string\">&#x27;星期四&#x27;</span>,<span class=\"string\">&#x27;星期五&#x27;</span>,<span class=\"string\">&#x27;星期六&#x27;</span>,<span class=\"string\">&#x27;星期日&#x27;</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[<span class=\"number\">6</span>]);</span><br><span class=\"line\"><span class=\"comment\">//数组长度</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"property\">length</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-常量\"><a href=\"#3-常量\" class=\"headerlink\" title=\"3.常量\"></a>3.常量</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> G = <span class=\"number\">9.8</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4字符串拼接\"><a href=\"#4字符串拼接\" class=\"headerlink\" title=\"4字符串拼接\"></a>4字符串拼接</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;张三&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;我叫&#x27;</span> + name)</span><br><span class=\"line\"><span class=\"comment\">// 模板字符串</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">`我叫<span class=\"subst\">$&#123;name&#125;</span>，今年<span class=\"subst\">$&#123;age&#125;</span>岁`</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过typeof关键字检测数据类型\"><a href=\"#通过typeof关键字检测数据类型\" class=\"headerlink\" title=\"通过typeof关键字检测数据类型\"></a>通过typeof关键字检测数据类型</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(typeof flag);</span><br><span class=\"line\">console.log(typeof (flag));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//隐式转换</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num1 = +<span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;请输入数字1&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//显式转换</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"title class_\">Number</span>(<span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;请输入数字1&#x27;</span>))</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;12px&#x27;</span>))</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;12.34px&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"if分支语句\"><a href=\"#if分支语句\" class=\"headerlink\" title=\"if分支语句\"></a>if分支语句</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(score &gt;= <span class=\"number\">90</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;优秀&#x27;</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &gt;= <span class=\"number\">70</span> &amp;&amp; score &lt; <span class=\"number\">90</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;良好&#x27;</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &gt;= <span class=\"number\">60</span> &amp;&amp; score &lt; <span class=\"number\">70</span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;及格&#x27;</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;不及格&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>一种数据类型，无序的数据集合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let goods = &#123;</span><br><span class=\"line\">\t&#x27;goods-name&#x27;: &#x27;小米10青春版&#x27;,</span><br><span class=\"line\">\tnum: 10000126,</span><br><span class=\"line\">\tweight: &#x27;0.55kg&#x27;,</span><br><span class=\"line\">\taddress: &#x27;中国大陆&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">goods.price = 1999</span><br><span class=\"line\">// 删</span><br><span class=\"line\">delete goods.price</span><br><span class=\"line\">// 改</span><br><span class=\"line\">goods.num = 222222</span><br><span class=\"line\">// 查</span><br><span class=\"line\">console.log(goods.address)</span><br><span class=\"line\">console.log(goods[&#x27;goods-name&#x27;]);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Web-APIs\"><a href=\"#Web-APIs\" class=\"headerlink\" title=\"Web APIs\"></a>Web APIs</h1><h2 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button&gt;按钮&lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"comment\">//1.获取事件源</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">const</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;button&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"comment\">//2.事件监听</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;点击了&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"OS知识点","date":"2024-03-13T09:24:04.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":null,"_content":"\n# 一、操作系统的基本概念\n\n## 1.OS功能\n\n#### （1）计算机系统资源的管理者\n\n处理器管理，存储器管理，文件管理，I/O管理\n\n#### （2）==向上层提供方便易用的服务==\n\na.给普通用户：**命令接口**（联机命令接口，脱机命令接口），GUI图形接口 \n\nb.给程序员：程序接口---**系统调用**\n\n#### （3）扩展机器\n\n## 2.OS特征\n\n#### 并发\n\n支持多道程序的单处理机中，OS的并发性是通过分时实现的，CPU与I/O设备，I/O设备与I/O设备能实现真正的并行\n\n#### 共享\n\n#### 虚拟\n\n#### 异步\n\n# 二、操作系统发展历程\n\n## 1.手工操作阶段\n\n人机速度矛盾\n\n## 2.==批处理阶段==\n\n（引入脱机输入输出技术）\n\n### (1)单道批处理系统\n\n资源利用不充分\n\n### (2)多道批处理系统\n\n宏观上并行，微观上串行，资源利用率高，无交互功能\n\n引入多道程序技术的前提：中断功能\n\n## 3.分时操作系统\n\n解决人机交互，不能应对突发紧急任务\n\n## 4.实时操作系统\n\n能够完成某些紧急任务，具有及时性和可靠性\n\n硬实时：绝对在规定时间内完成\n\n软实时：偶尔可以违反时间规定\n\n5.网络操作系统和分布式操作系统\n\n6.个人计算机操作系统\n\n# 三、操作系统的运行环境\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-15/20240315101034-59a035.png)\n\n访管指令，陷入指令仅在用户态下运行\n\n系统调用的调用可能发生在用户态，执行一定发生在内核态\n\n库函数和系统调用对比：库函数运行在用户态，方便调试，方便替换开销小；系统调用面向硬件，不方便调试，通常不可替换，由于需要系统状态切换，开销大\n\n系统调用需要保存PC和PSW的值，一般调用过程只需保存PC的值\n\n中断处理和子程序调用都可能改变PSW的值，但中断处理程序执行完返回后，可能需要用到PSW的内容，而子程序调用一定不需要PSW的内容\n\n发生系统调用时，由硬件负责保存PC和PSW，并将CPU由用户态改为内核态，操作系统完成执行系统调用服务例程，并保存通用寄存器的内容\n\n系统调用过程：1：传递系统调用参数，2：执行陷入指令，3：执行相应的服务程序，4：返回用户态\n\n\n\n# 四、操作系统结构\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-16/20240316101308-667815.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-16/20240316101434-4fdcc8.png)\n\n定义微内核结构os的四个方面：\n\n1.内核足够小\n\n2.基于客户/服务器模式（C/S）\n\n3、应用机制与策略分离原理\n\n采用面向对象技术\n\n# 五、操作系统引导\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-17/20240317093926-7d9322.png)\n\n# 六、虚拟机\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-17/20240317095220-080341.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-17/20240317095329-940861.png)·1\n","source":"_posts/OS知识点.md","raw":"---\ntitle: OS知识点\ndate: 2024-03-13 17:24:04\ntags: 操作系统\ncategories: 408\ncover:\ndescription:\n---\n\n# 一、操作系统的基本概念\n\n## 1.OS功能\n\n#### （1）计算机系统资源的管理者\n\n处理器管理，存储器管理，文件管理，I/O管理\n\n#### （2）==向上层提供方便易用的服务==\n\na.给普通用户：**命令接口**（联机命令接口，脱机命令接口），GUI图形接口 \n\nb.给程序员：程序接口---**系统调用**\n\n#### （3）扩展机器\n\n## 2.OS特征\n\n#### 并发\n\n支持多道程序的单处理机中，OS的并发性是通过分时实现的，CPU与I/O设备，I/O设备与I/O设备能实现真正的并行\n\n#### 共享\n\n#### 虚拟\n\n#### 异步\n\n# 二、操作系统发展历程\n\n## 1.手工操作阶段\n\n人机速度矛盾\n\n## 2.==批处理阶段==\n\n（引入脱机输入输出技术）\n\n### (1)单道批处理系统\n\n资源利用不充分\n\n### (2)多道批处理系统\n\n宏观上并行，微观上串行，资源利用率高，无交互功能\n\n引入多道程序技术的前提：中断功能\n\n## 3.分时操作系统\n\n解决人机交互，不能应对突发紧急任务\n\n## 4.实时操作系统\n\n能够完成某些紧急任务，具有及时性和可靠性\n\n硬实时：绝对在规定时间内完成\n\n软实时：偶尔可以违反时间规定\n\n5.网络操作系统和分布式操作系统\n\n6.个人计算机操作系统\n\n# 三、操作系统的运行环境\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-15/20240315101034-59a035.png)\n\n访管指令，陷入指令仅在用户态下运行\n\n系统调用的调用可能发生在用户态，执行一定发生在内核态\n\n库函数和系统调用对比：库函数运行在用户态，方便调试，方便替换开销小；系统调用面向硬件，不方便调试，通常不可替换，由于需要系统状态切换，开销大\n\n系统调用需要保存PC和PSW的值，一般调用过程只需保存PC的值\n\n中断处理和子程序调用都可能改变PSW的值，但中断处理程序执行完返回后，可能需要用到PSW的内容，而子程序调用一定不需要PSW的内容\n\n发生系统调用时，由硬件负责保存PC和PSW，并将CPU由用户态改为内核态，操作系统完成执行系统调用服务例程，并保存通用寄存器的内容\n\n系统调用过程：1：传递系统调用参数，2：执行陷入指令，3：执行相应的服务程序，4：返回用户态\n\n\n\n# 四、操作系统结构\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-16/20240316101308-667815.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-16/20240316101434-4fdcc8.png)\n\n定义微内核结构os的四个方面：\n\n1.内核足够小\n\n2.基于客户/服务器模式（C/S）\n\n3、应用机制与策略分离原理\n\n采用面向对象技术\n\n# 五、操作系统引导\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-17/20240317093926-7d9322.png)\n\n# 六、虚拟机\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-17/20240317095220-080341.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-17/20240317095329-940861.png)·1\n","slug":"OS知识点","published":1,"updated":"2024-11-24T07:59:07.022Z","comments":1,"layout":"post","photos":[],"_id":"cmcpwe25j000f9wnjb06zgbcf","content":"<h1 id=\"一、操作系统的基本概念\"><a href=\"#一、操作系统的基本概念\" class=\"headerlink\" title=\"一、操作系统的基本概念\"></a>一、操作系统的基本概念</h1><h2 id=\"1-OS功能\"><a href=\"#1-OS功能\" class=\"headerlink\" title=\"1.OS功能\"></a>1.OS功能</h2><h4 id=\"（1）计算机系统资源的管理者\"><a href=\"#（1）计算机系统资源的管理者\" class=\"headerlink\" title=\"（1）计算机系统资源的管理者\"></a>（1）计算机系统资源的管理者</h4><p>处理器管理，存储器管理，文件管理，I&#x2F;O管理</p>\n<h4 id=\"（2）-向上层提供方便易用的服务\"><a href=\"#（2）-向上层提供方便易用的服务\" class=\"headerlink\" title=\"（2）&#x3D;&#x3D;向上层提供方便易用的服务&#x3D;&#x3D;\"></a>（2）&#x3D;&#x3D;向上层提供方便易用的服务&#x3D;&#x3D;</h4><p>a.给普通用户：<strong>命令接口</strong>（联机命令接口，脱机命令接口），GUI图形接口 </p>\n<p>b.给程序员：程序接口—<strong>系统调用</strong></p>\n<h4 id=\"（3）扩展机器\"><a href=\"#（3）扩展机器\" class=\"headerlink\" title=\"（3）扩展机器\"></a>（3）扩展机器</h4><h2 id=\"2-OS特征\"><a href=\"#2-OS特征\" class=\"headerlink\" title=\"2.OS特征\"></a>2.OS特征</h2><h4 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h4><p>支持多道程序的单处理机中，OS的并发性是通过分时实现的，CPU与I&#x2F;O设备，I&#x2F;O设备与I&#x2F;O设备能实现真正的并行</p>\n<h4 id=\"共享\"><a href=\"#共享\" class=\"headerlink\" title=\"共享\"></a>共享</h4><h4 id=\"虚拟\"><a href=\"#虚拟\" class=\"headerlink\" title=\"虚拟\"></a>虚拟</h4><h4 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h4><h1 id=\"二、操作系统发展历程\"><a href=\"#二、操作系统发展历程\" class=\"headerlink\" title=\"二、操作系统发展历程\"></a>二、操作系统发展历程</h1><h2 id=\"1-手工操作阶段\"><a href=\"#1-手工操作阶段\" class=\"headerlink\" title=\"1.手工操作阶段\"></a>1.手工操作阶段</h2><p>人机速度矛盾</p>\n<h2 id=\"2-批处理阶段\"><a href=\"#2-批处理阶段\" class=\"headerlink\" title=\"2.&#x3D;&#x3D;批处理阶段&#x3D;&#x3D;\"></a>2.&#x3D;&#x3D;批处理阶段&#x3D;&#x3D;</h2><p>（引入脱机输入输出技术）</p>\n<h3 id=\"1-单道批处理系统\"><a href=\"#1-单道批处理系统\" class=\"headerlink\" title=\"(1)单道批处理系统\"></a>(1)单道批处理系统</h3><p>资源利用不充分</p>\n<h3 id=\"2-多道批处理系统\"><a href=\"#2-多道批处理系统\" class=\"headerlink\" title=\"(2)多道批处理系统\"></a>(2)多道批处理系统</h3><p>宏观上并行，微观上串行，资源利用率高，无交互功能</p>\n<p>引入多道程序技术的前提：中断功能</p>\n<h2 id=\"3-分时操作系统\"><a href=\"#3-分时操作系统\" class=\"headerlink\" title=\"3.分时操作系统\"></a>3.分时操作系统</h2><p>解决人机交互，不能应对突发紧急任务</p>\n<h2 id=\"4-实时操作系统\"><a href=\"#4-实时操作系统\" class=\"headerlink\" title=\"4.实时操作系统\"></a>4.实时操作系统</h2><p>能够完成某些紧急任务，具有及时性和可靠性</p>\n<p>硬实时：绝对在规定时间内完成</p>\n<p>软实时：偶尔可以违反时间规定</p>\n<p>5.网络操作系统和分布式操作系统</p>\n<p>6.个人计算机操作系统</p>\n<h1 id=\"三、操作系统的运行环境\"><a href=\"#三、操作系统的运行环境\" class=\"headerlink\" title=\"三、操作系统的运行环境\"></a>三、操作系统的运行环境</h1><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-15/20240315101034-59a035.png\"></p>\n<p>访管指令，陷入指令仅在用户态下运行</p>\n<p>系统调用的调用可能发生在用户态，执行一定发生在内核态</p>\n<p>库函数和系统调用对比：库函数运行在用户态，方便调试，方便替换开销小；系统调用面向硬件，不方便调试，通常不可替换，由于需要系统状态切换，开销大</p>\n<p>系统调用需要保存PC和PSW的值，一般调用过程只需保存PC的值</p>\n<p>中断处理和子程序调用都可能改变PSW的值，但中断处理程序执行完返回后，可能需要用到PSW的内容，而子程序调用一定不需要PSW的内容</p>\n<p>发生系统调用时，由硬件负责保存PC和PSW，并将CPU由用户态改为内核态，操作系统完成执行系统调用服务例程，并保存通用寄存器的内容</p>\n<p>系统调用过程：1：传递系统调用参数，2：执行陷入指令，3：执行相应的服务程序，4：返回用户态</p>\n<h1 id=\"四、操作系统结构\"><a href=\"#四、操作系统结构\" class=\"headerlink\" title=\"四、操作系统结构\"></a>四、操作系统结构</h1><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-16/20240316101308-667815.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-16/20240316101434-4fdcc8.png\"></p>\n<p>定义微内核结构os的四个方面：</p>\n<p>1.内核足够小</p>\n<p>2.基于客户&#x2F;服务器模式（C&#x2F;S）</p>\n<p>3、应用机制与策略分离原理</p>\n<p>采用面向对象技术</p>\n<h1 id=\"五、操作系统引导\"><a href=\"#五、操作系统引导\" class=\"headerlink\" title=\"五、操作系统引导\"></a>五、操作系统引导</h1><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-17/20240317093926-7d9322.png\"></p>\n<h1 id=\"六、虚拟机\"><a href=\"#六、虚拟机\" class=\"headerlink\" title=\"六、虚拟机\"></a>六、虚拟机</h1><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-17/20240317095220-080341.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-17/20240317095329-940861.png\">·1</p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"一、操作系统的基本概念\"><a href=\"#一、操作系统的基本概念\" class=\"headerlink\" title=\"一、操作系统的基本概念\"></a>一、操作系统的基本概念</h1><h2 id=\"1-OS功能\"><a href=\"#1-OS功能\" class=\"headerlink\" title=\"1.OS功能\"></a>1.OS功能</h2><h4 id=\"（1）计算机系统资源的管理者\"><a href=\"#（1）计算机系统资源的管理者\" class=\"headerlink\" title=\"（1）计算机系统资源的管理者\"></a>（1）计算机系统资源的管理者</h4><p>处理器管理，存储器管理，文件管理，I&#x2F;O管理</p>\n<h4 id=\"（2）-向上层提供方便易用的服务\"><a href=\"#（2）-向上层提供方便易用的服务\" class=\"headerlink\" title=\"（2）&#x3D;&#x3D;向上层提供方便易用的服务&#x3D;&#x3D;\"></a>（2）&#x3D;&#x3D;向上层提供方便易用的服务&#x3D;&#x3D;</h4><p>a.给普通用户：<strong>命令接口</strong>（联机命令接口，脱机命令接口），GUI图形接口 </p>\n<p>b.给程序员：程序接口—<strong>系统调用</strong></p>\n<h4 id=\"（3）扩展机器\"><a href=\"#（3）扩展机器\" class=\"headerlink\" title=\"（3）扩展机器\"></a>（3）扩展机器</h4><h2 id=\"2-OS特征\"><a href=\"#2-OS特征\" class=\"headerlink\" title=\"2.OS特征\"></a>2.OS特征</h2><h4 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h4><p>支持多道程序的单处理机中，OS的并发性是通过分时实现的，CPU与I&#x2F;O设备，I&#x2F;O设备与I&#x2F;O设备能实现真正的并行</p>\n<h4 id=\"共享\"><a href=\"#共享\" class=\"headerlink\" title=\"共享\"></a>共享</h4><h4 id=\"虚拟\"><a href=\"#虚拟\" class=\"headerlink\" title=\"虚拟\"></a>虚拟</h4><h4 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h4><h1 id=\"二、操作系统发展历程\"><a href=\"#二、操作系统发展历程\" class=\"headerlink\" title=\"二、操作系统发展历程\"></a>二、操作系统发展历程</h1><h2 id=\"1-手工操作阶段\"><a href=\"#1-手工操作阶段\" class=\"headerlink\" title=\"1.手工操作阶段\"></a>1.手工操作阶段</h2><p>人机速度矛盾</p>\n<h2 id=\"2-批处理阶段\"><a href=\"#2-批处理阶段\" class=\"headerlink\" title=\"2.&#x3D;&#x3D;批处理阶段&#x3D;&#x3D;\"></a>2.&#x3D;&#x3D;批处理阶段&#x3D;&#x3D;</h2><p>（引入脱机输入输出技术）</p>\n<h3 id=\"1-单道批处理系统\"><a href=\"#1-单道批处理系统\" class=\"headerlink\" title=\"(1)单道批处理系统\"></a>(1)单道批处理系统</h3><p>资源利用不充分</p>\n<h3 id=\"2-多道批处理系统\"><a href=\"#2-多道批处理系统\" class=\"headerlink\" title=\"(2)多道批处理系统\"></a>(2)多道批处理系统</h3><p>宏观上并行，微观上串行，资源利用率高，无交互功能</p>\n<p>引入多道程序技术的前提：中断功能</p>\n<h2 id=\"3-分时操作系统\"><a href=\"#3-分时操作系统\" class=\"headerlink\" title=\"3.分时操作系统\"></a>3.分时操作系统</h2><p>解决人机交互，不能应对突发紧急任务</p>\n<h2 id=\"4-实时操作系统\"><a href=\"#4-实时操作系统\" class=\"headerlink\" title=\"4.实时操作系统\"></a>4.实时操作系统</h2><p>能够完成某些紧急任务，具有及时性和可靠性</p>\n<p>硬实时：绝对在规定时间内完成</p>\n<p>软实时：偶尔可以违反时间规定</p>\n<p>5.网络操作系统和分布式操作系统</p>\n<p>6.个人计算机操作系统</p>\n<h1 id=\"三、操作系统的运行环境\"><a href=\"#三、操作系统的运行环境\" class=\"headerlink\" title=\"三、操作系统的运行环境\"></a>三、操作系统的运行环境</h1><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-15/20240315101034-59a035.png\"></p>\n<p>访管指令，陷入指令仅在用户态下运行</p>\n<p>系统调用的调用可能发生在用户态，执行一定发生在内核态</p>\n<p>库函数和系统调用对比：库函数运行在用户态，方便调试，方便替换开销小；系统调用面向硬件，不方便调试，通常不可替换，由于需要系统状态切换，开销大</p>\n<p>系统调用需要保存PC和PSW的值，一般调用过程只需保存PC的值</p>\n<p>中断处理和子程序调用都可能改变PSW的值，但中断处理程序执行完返回后，可能需要用到PSW的内容，而子程序调用一定不需要PSW的内容</p>\n<p>发生系统调用时，由硬件负责保存PC和PSW，并将CPU由用户态改为内核态，操作系统完成执行系统调用服务例程，并保存通用寄存器的内容</p>\n<p>系统调用过程：1：传递系统调用参数，2：执行陷入指令，3：执行相应的服务程序，4：返回用户态</p>\n<h1 id=\"四、操作系统结构\"><a href=\"#四、操作系统结构\" class=\"headerlink\" title=\"四、操作系统结构\"></a>四、操作系统结构</h1><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-16/20240316101308-667815.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-16/20240316101434-4fdcc8.png\"></p>\n<p>定义微内核结构os的四个方面：</p>\n<p>1.内核足够小</p>\n<p>2.基于客户&#x2F;服务器模式（C&#x2F;S）</p>\n<p>3、应用机制与策略分离原理</p>\n<p>采用面向对象技术</p>\n<h1 id=\"五、操作系统引导\"><a href=\"#五、操作系统引导\" class=\"headerlink\" title=\"五、操作系统引导\"></a>五、操作系统引导</h1><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-17/20240317093926-7d9322.png\"></p>\n<h1 id=\"六、虚拟机\"><a href=\"#六、虚拟机\" class=\"headerlink\" title=\"六、虚拟机\"></a>六、虚拟机</h1><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-17/20240317095220-080341.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-17/20240317095329-940861.png\">·1</p>\n"},{"title":"linux学习","date":"2025-04-19T09:52:53.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":null,"_content":"\n\n\n","source":"_posts/linux学习.md","raw":"---\ntitle: linux学习\ndate: 2025-04-19 17:52:53\ntags:\ncategories:\ncover:\ndescription:\n---\n\n\n\n","slug":"linux学习","published":1,"updated":"2025-04-19T09:52:53.512Z","comments":1,"layout":"post","photos":[],"_id":"cmcpwe25j000g9wnjf9748dyo","content":"","cover_type":"img","excerpt":"","more":""},{"title":"html+css学习","date":"2024-12-26T06:18:37.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":null,"_content":"\n# HTML基础\n\n 跳转到锚点\n\n第一步：设置锚点\n\n```html\n<!-- 第一种方式：a标签配合name属性 -->\n<a name=\"test1\"></a>\n<!-- 第二种方式：其他标签配合id属性 -->\n<h2 id=\"test2\">我是一个位置</h2>\n```\n\n第二步：跳转锚点\n\n```html\n<!-- 跳转到test1锚点-->\n<a href=\"#test1\">去test1锚点</a>\n<!-- 跳到本页面顶部 -->\n<a href=\"#\">回到顶部</a>\n<!-- 跳转到其他页面锚点 -->\n<a href=\"demo.html#test1\">去demo.html页面的test1锚点</a>\n<!-- 刷新本页面 -->\n<a href=\"\">刷新本页面</a>\n<!-- 执行一段js,如果还不知道执行什么，可以留空，javascript:; -->\n<a href=\"javascript:alert(1);\">点我弹窗</a>\n```\n\n有序列表\n\n```\n<h2>要把大象放冰箱总共分几步</h2>\n<ol>\n<li>把冰箱门打开</li>\n<li>把大象放进去</li>\n<li>把冰箱门关上</li>\n</ol>\n```\n\n无序列表\n\n```\n<ul>\n    <li>深圳</li>\n    <li>上海</li>\n    <li>北京</li>\n</ul>\n```\n\n列表嵌套\n\n```\n<h2>我想去的几个城市</h2>\n<ul>\n\t<li>成都</li>\n\t<li>\n\t\t<span>上海</span>\n\t\t<ul>\n\t\t\t<li>外滩</li>\n\t\t\t<li>杜莎夫人蜡像馆</li>\n\t\t\t<li>\n\t\t\t\t<a href=\"https://www.opg.cn/\">东方明珠</a>\n\t\t\t</li>\n\t\t\t<li>迪士尼乐园</li>\n\t\t</ul>\n\t</li>\n\t<li>西安</li>\n\t<li>武汉</li>\n</ul>\n```\n\n自定义列表\n\n一个 dl 就是一个自定义列表，一个 dt 就是一个术语名称，一个 dd 就是术语描述（可以有多 个）\n\n```\n<h2>如何高效的学习？</h2>\n<dl>\n\t<dt>做好笔记</dt>\n\t<dd>笔记是我们以后复习的一个抓手</dd>\n\t<dd>笔记可以是电子版，也可以是纸质版</dd>\n\t<dt>多加练习</dt>\n\t<dd>只有敲出来的代码，才是自己的</dd>\n\t<dt>别怕出错</dt>\n\t<dd>错很正常，改正后并记住，就是经验</dd>\n</dl>\n```\n\n","source":"_posts/html-css学习.md","raw":"---\ntitle: html+css学习\ndate: 2024-12-26 14:18:37\ntags: \ncategories: 前端\ncover:\ndescription:\n---\n\n# HTML基础\n\n 跳转到锚点\n\n第一步：设置锚点\n\n```html\n<!-- 第一种方式：a标签配合name属性 -->\n<a name=\"test1\"></a>\n<!-- 第二种方式：其他标签配合id属性 -->\n<h2 id=\"test2\">我是一个位置</h2>\n```\n\n第二步：跳转锚点\n\n```html\n<!-- 跳转到test1锚点-->\n<a href=\"#test1\">去test1锚点</a>\n<!-- 跳到本页面顶部 -->\n<a href=\"#\">回到顶部</a>\n<!-- 跳转到其他页面锚点 -->\n<a href=\"demo.html#test1\">去demo.html页面的test1锚点</a>\n<!-- 刷新本页面 -->\n<a href=\"\">刷新本页面</a>\n<!-- 执行一段js,如果还不知道执行什么，可以留空，javascript:; -->\n<a href=\"javascript:alert(1);\">点我弹窗</a>\n```\n\n有序列表\n\n```\n<h2>要把大象放冰箱总共分几步</h2>\n<ol>\n<li>把冰箱门打开</li>\n<li>把大象放进去</li>\n<li>把冰箱门关上</li>\n</ol>\n```\n\n无序列表\n\n```\n<ul>\n    <li>深圳</li>\n    <li>上海</li>\n    <li>北京</li>\n</ul>\n```\n\n列表嵌套\n\n```\n<h2>我想去的几个城市</h2>\n<ul>\n\t<li>成都</li>\n\t<li>\n\t\t<span>上海</span>\n\t\t<ul>\n\t\t\t<li>外滩</li>\n\t\t\t<li>杜莎夫人蜡像馆</li>\n\t\t\t<li>\n\t\t\t\t<a href=\"https://www.opg.cn/\">东方明珠</a>\n\t\t\t</li>\n\t\t\t<li>迪士尼乐园</li>\n\t\t</ul>\n\t</li>\n\t<li>西安</li>\n\t<li>武汉</li>\n</ul>\n```\n\n自定义列表\n\n一个 dl 就是一个自定义列表，一个 dt 就是一个术语名称，一个 dd 就是术语描述（可以有多 个）\n\n```\n<h2>如何高效的学习？</h2>\n<dl>\n\t<dt>做好笔记</dt>\n\t<dd>笔记是我们以后复习的一个抓手</dd>\n\t<dd>笔记可以是电子版，也可以是纸质版</dd>\n\t<dt>多加练习</dt>\n\t<dd>只有敲出来的代码，才是自己的</dd>\n\t<dt>别怕出错</dt>\n\t<dd>错很正常，改正后并记住，就是经验</dd>\n</dl>\n```\n\n","slug":"html-css学习","published":1,"updated":"2024-12-26T07:22:27.575Z","comments":1,"layout":"post","photos":[],"_id":"cmcpwe25l000k9wnj9hdg42bv","content":"<h1 id=\"HTML基础\"><a href=\"#HTML基础\" class=\"headerlink\" title=\"HTML基础\"></a>HTML基础</h1><p> 跳转到锚点</p>\n<p>第一步：设置锚点</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 第一种方式：a标签配合name属性 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;test1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第二种方式：其他标签配合id属性 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test2&quot;</span>&gt;</span>我是一个位置<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>第二步：跳转锚点</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 跳转到test1锚点--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#test1&quot;</span>&gt;</span>去test1锚点<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 跳到本页面顶部 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>回到顶部<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 跳转到其他页面锚点 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;demo.html#test1&quot;</span>&gt;</span>去demo.html页面的test1锚点<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 刷新本页面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>刷新本页面<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 执行一段js,如果还不知道执行什么，可以留空，javascript:; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:alert(1);&quot;</span>&gt;</span>点我弹窗<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>有序列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2&gt;要把大象放冰箱总共分几步&lt;/h2&gt;</span><br><span class=\"line\">&lt;ol&gt;</span><br><span class=\"line\">&lt;li&gt;把冰箱门打开&lt;/li&gt;</span><br><span class=\"line\">&lt;li&gt;把大象放进去&lt;/li&gt;</span><br><span class=\"line\">&lt;li&gt;把冰箱门关上&lt;/li&gt;</span><br><span class=\"line\">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>\n\n<p>无序列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li&gt;深圳&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;上海&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;北京&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<p>列表嵌套</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2&gt;我想去的几个城市&lt;/h2&gt;</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">\t&lt;li&gt;成都&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;</span><br><span class=\"line\">\t\t&lt;span&gt;上海&lt;/span&gt;</span><br><span class=\"line\">\t\t&lt;ul&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;外滩&lt;/li&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;杜莎夫人蜡像馆&lt;/li&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;</span><br><span class=\"line\">\t\t\t\t&lt;a href=&quot;https://www.opg.cn/&quot;&gt;东方明珠&lt;/a&gt;</span><br><span class=\"line\">\t\t\t&lt;/li&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;迪士尼乐园&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;/ul&gt;</span><br><span class=\"line\">\t&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;西安&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;武汉&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<p>自定义列表</p>\n<p>一个 dl 就是一个自定义列表，一个 dt 就是一个术语名称，一个 dd 就是术语描述（可以有多 个）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2&gt;如何高效的学习？&lt;/h2&gt;</span><br><span class=\"line\">&lt;dl&gt;</span><br><span class=\"line\">\t&lt;dt&gt;做好笔记&lt;/dt&gt;</span><br><span class=\"line\">\t&lt;dd&gt;笔记是我们以后复习的一个抓手&lt;/dd&gt;</span><br><span class=\"line\">\t&lt;dd&gt;笔记可以是电子版，也可以是纸质版&lt;/dd&gt;</span><br><span class=\"line\">\t&lt;dt&gt;多加练习&lt;/dt&gt;</span><br><span class=\"line\">\t&lt;dd&gt;只有敲出来的代码，才是自己的&lt;/dd&gt;</span><br><span class=\"line\">\t&lt;dt&gt;别怕出错&lt;/dt&gt;</span><br><span class=\"line\">\t&lt;dd&gt;错很正常，改正后并记住，就是经验&lt;/dd&gt;</span><br><span class=\"line\">&lt;/dl&gt;</span><br></pre></td></tr></table></figure>\n\n","cover_type":"img","excerpt":"","more":"<h1 id=\"HTML基础\"><a href=\"#HTML基础\" class=\"headerlink\" title=\"HTML基础\"></a>HTML基础</h1><p> 跳转到锚点</p>\n<p>第一步：设置锚点</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 第一种方式：a标签配合name属性 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;test1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第二种方式：其他标签配合id属性 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test2&quot;</span>&gt;</span>我是一个位置<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>第二步：跳转锚点</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 跳转到test1锚点--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#test1&quot;</span>&gt;</span>去test1锚点<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 跳到本页面顶部 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>回到顶部<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 跳转到其他页面锚点 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;demo.html#test1&quot;</span>&gt;</span>去demo.html页面的test1锚点<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 刷新本页面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>刷新本页面<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 执行一段js,如果还不知道执行什么，可以留空，javascript:; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:alert(1);&quot;</span>&gt;</span>点我弹窗<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>有序列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2&gt;要把大象放冰箱总共分几步&lt;/h2&gt;</span><br><span class=\"line\">&lt;ol&gt;</span><br><span class=\"line\">&lt;li&gt;把冰箱门打开&lt;/li&gt;</span><br><span class=\"line\">&lt;li&gt;把大象放进去&lt;/li&gt;</span><br><span class=\"line\">&lt;li&gt;把冰箱门关上&lt;/li&gt;</span><br><span class=\"line\">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>\n\n<p>无序列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li&gt;深圳&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;上海&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;北京&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<p>列表嵌套</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2&gt;我想去的几个城市&lt;/h2&gt;</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">\t&lt;li&gt;成都&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;</span><br><span class=\"line\">\t\t&lt;span&gt;上海&lt;/span&gt;</span><br><span class=\"line\">\t\t&lt;ul&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;外滩&lt;/li&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;杜莎夫人蜡像馆&lt;/li&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;</span><br><span class=\"line\">\t\t\t\t&lt;a href=&quot;https://www.opg.cn/&quot;&gt;东方明珠&lt;/a&gt;</span><br><span class=\"line\">\t\t\t&lt;/li&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;迪士尼乐园&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;/ul&gt;</span><br><span class=\"line\">\t&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;西安&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;武汉&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<p>自定义列表</p>\n<p>一个 dl 就是一个自定义列表，一个 dt 就是一个术语名称，一个 dd 就是术语描述（可以有多 个）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2&gt;如何高效的学习？&lt;/h2&gt;</span><br><span class=\"line\">&lt;dl&gt;</span><br><span class=\"line\">\t&lt;dt&gt;做好笔记&lt;/dt&gt;</span><br><span class=\"line\">\t&lt;dd&gt;笔记是我们以后复习的一个抓手&lt;/dd&gt;</span><br><span class=\"line\">\t&lt;dd&gt;笔记可以是电子版，也可以是纸质版&lt;/dd&gt;</span><br><span class=\"line\">\t&lt;dt&gt;多加练习&lt;/dt&gt;</span><br><span class=\"line\">\t&lt;dd&gt;只有敲出来的代码，才是自己的&lt;/dd&gt;</span><br><span class=\"line\">\t&lt;dt&gt;别怕出错&lt;/dt&gt;</span><br><span class=\"line\">\t&lt;dd&gt;错很正常，改正后并记住，就是经验&lt;/dd&gt;</span><br><span class=\"line\">&lt;/dl&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"requests框架笔记","date":"2025-06-30T04:45:23.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":null,"_content":"\n# 四、接口自动化测试框架之requests详解（day16）\n\n## 1. 市面上主流的接口自动化测试方案\n\n1. **基于工具的接口测试**  \n   - Postman: JavaScript  \n   - JMeter: Java  \n\n2. **基于代码的接口测试**  \n   - Python + pytest + requests （+ YAML + logging + allure + git + jenkins）  \n\n3. **基于平台的接口测试**  \n   - 前端: Vue  \n   - 后端:  \n     - Python: Django  \n     - Java: SpringBoot  \n\n---\n\n## 2. HTTP接口协议\n\n### 1. 什么是接口\n\n**API（Application Programming Interface）**：  \n- 一个程序和另一个程序的数据交互方式（序列化和反序列化）。  \n\n**API测试**：  \n- 一个程序对另一个程序的测试。  \n- 涉及数据的序列化与传输。  \n\n**Restful接口**：  \n\n- Postman将数据按JSON序列化，通过HTTP协议传输到Nginx的80端口。  \n\n**RPC接口**：  \n- RPC Client将数据按二进制序列化，通过TCP协议传输到RPC Server的8123端口。  \n\n**Windows接口**：  \n- Win32程序将数据二进制序列化，通过Windows事件总线传输到Windows进程。  \n\n---\n\n### 2. HTTP协议\n\n1. 发送请求：客户端 -> 服务器\n2. 回复响应： 服务器 -> 客户端\n\n**请求和响应的组成**：  \n- **行**：数据第一行。  \n- **头**：正文之前的内容。  \n- **正文（体，Body）**：主要数据内容。  \n\n#### 1. 请求  \n**行**： 请求方法 路径（协议、主机、路径）版本号\n\n```\nGET https://www.baidu.com/ HTTP/1.1\n```\n\n**常见请求方法**：  \n\n- `GET`：获取资源。  \n- `POST`：创建资源。  \n- `DELETE`：删除资源。  \n- `PUT`：修改资源。  \n- `OPTIONS`：查询接口信息。  \n\n**头**：  \n- 键值对形式，数量、长度、名字不限，必须是ASCII。  \n示例：  \n\n```\nbeifan: www.baidu.com\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML,\nlike Gecko) Chrome/124.0.0.0 Safari/537.36\nAccept:\ntext/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image\n/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\nSec-Fetch-Site: none\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nsec-ch-ua: \"Chromium\";v=\"124\", \"Google Chrome\";v=\"124\", \"Not-A.Brand\";v=\"99\"\nsec-ch-ua-mobile: ?0\nsec-ch-ua-platform: \"Windows\"\nAccept-Encoding: gzip, deflate, br, zstd\nAccept-Language: zh-CN,zh;q=0.9\nCookie: BAIDUID_BFESS=3E8FB44D82CFDB0B6F04524F2264D9D6:FG=1; BIDUPSID\n```\n\n头与正文间有两个空行\n\n**正文**：  \n\n- 可以是空、表单（键值对）、JSON字符串或二进制数据（图片、视频等）。  \n\n#### 2. 响应  \n**行**：  版本号 状态码 状态描述\n\n```\nHTTP/1.1 200 OK\n```\n\n**常见状态码**：  \n\n- `1xx`：继续请求。  \n- `2xx`：请求成功。  \n- `3xx`：重定向（无正文）。  \n- `4xx`：客户端错误（请求问题）。  \n- `5xx`：服务器端错误（接口问题）。  \n\n**头**：  \n\n```\nConnection: keep-alive\nContent-Security-Policy: frame-ancestors 'self' https://chat.baidu.com\nhttp://mirror-chat.baidu.com https://fj-chat.baidu.com https://hba-chat.baidu.com\nhttps://hbe-chat.baidu.com https://njjs-chat.baidu.com https://nj-chat.baidu.com\nhttps://hna-chat.baidu.com https://hnb-chat.baidu.com http://debug.baidu-int.com;\nContent-Type: text/html; charset=utf-8\nDate: Sun, 21 Apr 2024 12:26:53 GMT\nServer: BWS/1.1\nSet-Cookie: H_PS_PSSID=40366_40379_40301_40511_40080_60132; path=/; expires=Mon,\n21-Apr-25 12:26:53 GMT; domain=.baidu.com\nTraceid: 1713702413079251559415571183161739773267\nX-Ua-Compatible: IE=Edge,chrome=1\nX-Xss-Protection: 1;mode=block\nContent-Length: 406773\n```\n\n**正文**：  \n\n- 可以是空、文本（HTML、TXT）、JSON字符串或二进制数据。\n\n<!DOCTYPE html><!--STATUS OK--><html><head><meta http-equiv=\"Content-Type\"\ncontent=\"text/html;charset=utf-8\"><meta http-equiv=\"X-UA-Compatible\"\ncontent=\"IE=edge,chrome=1\"><meta content=\"always\" name=\"referrer\"><meta\nname=\"theme-color\" content=\"#ffffff\"><meta name=\"description\" content=\"全球领先的中\n文搜索引擎、致力于让网民更便捷地获取信息，找到所求。百度超过千亿的中文网页数据库，可以瞬间找到相关\n的搜索结果。\"><link rel=\"shortcut icon\" href=\"https://www.baidu.com/favicon.ico\"\ntype=\"image/x-icon\" /><link rel=\"search\"\ntype=\"application/opensearchdescription+xml\" href=\"/content-search.xml\" title=\"百\n度搜索\" /><link rel=\"icon\" sizes=\"any\" mask\nhref=\"https://www.baidu.com/favicon.ico\"><link rel=\"dns-prefetch\"\nhref=\"//dss0.bdstatic.com\"/><link rel=\"dns-prefetch\" href=\"//dss1.bdstatic.com\"/>\n<link rel=\"dns-prefetch\" href=\"//ss1.bdstatic.com\"/><link rel=\"dns-prefetch\"\nhref=\"//sp0.baidu.com\"/><link rel=\"dns-prefetch\" href=\"//sp1.baidu.com\"/><link\nrel=\"dns-prefetch\" href=\"//sp2.baidu.com\"/><link rel=\"dns-prefetch\"\nhref=\"//pss.bdstatic.com\"/>  \n\n---\n\n## 3. requests用法\n\n### 1. 安装  \n```bash\npip install requests\n```\n\n```\npip show requests\n```\n\n### 2. 发送HTTP请求  \n\n**多种使用方式**：  \n```python\nrequests.get('http://www.baidu.com/')\nrequests.request('get', 'http://www.baidu.com/')\n\nsess = requests.session()\nsess.get('http://www.baidu.com/')\nsess.request('get', 'http://www.baidu.com/')\n```\n\n**统一内部原理**：  \n```python\nsess = requests.session()  # 实例化类\nsess.request('get', 'http://www.baidu.com/')  # 调用实例方法\n```\n\n**参数说明**：  \n- **行**：  \n  - `method`：请求方法（如`GET`）。  \n  - `url`：接口地址。  \n  - `params=None`：查询字符串。  \n- **头**：  \n  - `headers=None`：请求头。  \n  - `cookies=None`：Cookies。  \n- **正文**：  \n  - `data=None`：表单参数。  \n  - `files=None`：文件（二进制）。  \n  - `json=None`：JSON参数。  \n- **其他**：    \n  - `timeout=None`, # 超时时间\n  - `allow_redirects=True`, # 跟随重定向\n  - `proxies=None`, # 代理设置\n  - `hooks=None`, # 内部钩子\n  - `stream=None`, # 流式传输\n  - `verify=None`, # 验证HTTPS证书\n  - `cert=None`, # 自定义HTTPS证书\n\n**示例**：  \n\n```python\nimport requests\n\nresp = requests.request(\n    # 行\n    method='get',\n    url=\"https://www.baidu.com/upload\",\n    params={\"dir\": \"user_home\"},\n    #### 头\n    headers={\"name\": \"beifan\"},\n    #### 正文\n    data={\"name\": \"北凡\"},  # 表单数据\n    json={\"age\": [1, 1, 2]},\n    files={\"file\": open(\"conftest.py\", \"rb\")}  # 二进制模式打开文件\n)\n```\n**注意**：`data`和`json`不能共存。  \n\n### 3. 解析响应  \n```python\nimport requests\n\nresp = requests.request('get', 'https://api.weixin.qq.com/cgi-bin/token')\n\n# 行\nprint(resp.status_code, resp.reason)#状态码和状态描述\n\n# 头\nprint(resp.headers)\n\n# 正文\nprint(resp.text)      # 文本内容（人类可读）\nprint(resp.content)   # 二进制内容（适合下载）\nprint(resp.json())    # 将JSON文本反序列化为字典\n```\n\n---\n\n## 4. 接口自动化实战\n\n### 1. 接口文档  \n- 地址：`http://47.107.116.139/showdoc/web/?#/1`  \n- 需要密码（找班主任索取）。  \n\n### 2. 基本流程  \n1. **看懂文档**：  \n   - 接口数量、项目风格、接口具体信息（请求四要素：方法、地址、参数、鉴权或依赖）（响应：状态码、正文、错误码、错误提示）。  \n   - 业务需求：何时、为何请求接口。  \n2. **设计用例**：  \n   - 前置条件、用例参数、预期结果。  \n3. **编写与执行用例**：  \n   - 使用Python + pytest + requests。  \n4. **输出报告**：  \n   - 日志与测试报告。  \n\n### 3. 微信公众号项目  \n\n```python\nimport random\nimport time\n\nimport requests\nimport json\n\ng_var = {}\n# 1.获取鉴权码access token接口\ndef test_get_token():\n    res = requests.request(\n        method='get',\n        url=\"https://api.weixin.qq.com/cgi-bin/token\",\n        params={\n            \"grant_type\": \"client_credential\",\n            \"appid\": \"\",\n            \"secret\": \"\"\n        }\n    )\n\n    assert res.status_code == 200\n    access_token = res.json()[\"access_token\"]\n    assert access_token != \"\"\n    g_var[\"access_token\"]= access_token # 保存变量，为了其他接口使用\n\n\n# 2.获取公众号已创建的标签接口\ndef test_get_tags():\n    res = requests.request(\n        method='get',\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/get\",\n        params={\n            \"access_token\": g_var[\"access_token\"]\n        }\n    )\n\n    assert res.status_code == 200\n    tags = res.json()[\"tags\"]\n    assert tags\n    assert tags[0]['id'] == 2\n\n# 3.创建标签接口\ndef test_create_tags():\n    timestamp = str(time.time())\n    res = requests.request(\n        method='post',\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/create\",\n        params={\n            \"access_token\": g_var[\"access_token\"]\n        },\n        json={\"tag\":{\"name\":\"熊\" + timestamp}}\n    )\n\n    assert res.status_code == 200\n    s = res.text.replace(\"\\\\\\\\\",\"\\\\\")\n    res_json = json.loads(s)#替换后手动进行反序列化，将字符串转换为json\n    name = res_json[\"tag\"]['name']\n    id = res_json[\"tag\"]['id']\n    g_var['tag_id'] = id\n    assert name == \"熊\" + timestamp\n    assert isinstance(id,int)\n    \n    \n\n# 4.编辑标签接口\ndef test_edit_tags():\n    timestamp = str(time.time())\n    res = requests.request(\n        method='post',\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/update\",\n        params={\n            \"access_token\": g_var[\"access_token\"]\n        },\n        json={\"tag\": {\"id\":g_var['tag_id'],\"name\":\"happy\"+timestamp}}\n    )\n\n    assert res.status_code == 200\n    assert res.json()['errcode'] == 0\n    assert res.json()['errmsg'] == 'ok'\n\n# 5.删除标签接口\ndef test_del_tags():\n    res = requests.request(\n        method=\"post\",\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/delete\",\n        params={\n            'access_token':g_var['access_token']\n        },\n        json= {\"tag\":{\"id\":g_var[\"tag_id\"]}}\n    )\n    assert res.status_code ==200\n    assert res.json()['errcode'] == 0\n    assert res.json()['errmsg'] == 'ok'\n\n# 6.文件上传接口\ndef test_file_upload():\n    res = requests.request(\n        method=\"post\",\n        url=\"https://api.weixin.qq.com/cgi-bin/media/uploadimg\",\n        params={\n            'access_token': g_var['access_token']\n        },\n        files={\n            \"media\":open(\"data/shu.png\",\"rb\")\n        }\n    )\n    assert res.status_code == 200\n    url = res.json()['url']\n    assert 'http' in url\n    assert 'mmbiz.qpic.cn' in url\n```\n\n创建接口时断言发生问题\n\n```\nAssertionError: assert '\\\\u718a1751596032.4772298' == '熊1751596032.4772298'\n```\n\n```python\nprint(res.content)\nprint(res.text)\nprint(res.json())\n#打印出的结果\n{\"tag\":{\"id\":194,\"name\":\"\\\\\\\\u718a1751596032.4772298\"}}\n{\"tag\":{\"id\":194,\"name\":\"\\\\u718a1751596032.4772298\"}}\n{'tag': {'id': 194, 'name': '\\\\u718a1751596032.4772298'}}\n```\n\n使用``s.replace(\"\\\\\\\\\",\"\\\\\")` 将\\\\\\u718a1751596032.4772298变为\\\\u718a1751596032.4772298，就变成了Unicode编码格式\n\n# 五、接口自动化测试框架之requests封装（day17）\n\n## 1. 回顾项目特点\n\n1. 大部分的用例由以下几步骤  \n   - 发送请求  \n   - 提取数据  \n   - 断言数据  \n2. 大部分的用例需要相同参数值（身份凭据）  \n\n**封装目的**：通过隐藏细节减少重复步骤，降低使用难度，增加新特性。\n\n---\n\n## 2. 封装请求类\n\n### 1. HTTP报文日志\n```python\nimport requests  \nimport logging  \n\nlogger = logging.getLogger('request_utils')  # 日志记录器  \n\nclass RequestUtils:  \n    sess = requests.Session()  # 实例化Session  \n\n    def send_request(self, **kwargs):   # 统一参数类型，仅限关键字参数\n        logger.info('正在发送请求...')  \n        for k, v in kwargs.items():  \n            logger.info(f'\t参数内容: {k}={v}')  \n\n        resp = self.sess.request(**kwargs)  # 发送请求  # 参数长度、内容是不确定\n        logger.info('收到接口响应')  \n        logger.info(f'状态码={resp.status_code}')  \n        logger.info(f'响应头={resp.headers}')  \n        logger.info(f'\t响应正文={resp.text}')  \n        return resp\n```\n\n### 2. 自动添加公共参数\n```python\nclass RequestUtils:\n    sess = requests.Session()  # 实例化\n    public_params = {}  # 公共参数字典  \n\n    def send_request(self, **kwargs):  # 统一参数类型，仅限关键字参数\n        logger.info('正在发送请求...')\n        for k, v in kwargs.items():  \n            if k == 'params':\n                v.update(self.public_params) # 合并参数内容，把public_params合并到params中\n            logger.info(f'\t参数内容: {k}={v}')  \n```\n\n### 3. 简化文件上传\n```python\nclass RequestUtils:\n    sess = requests.Session() # 实例化\n    pubilc_params = {}\n    def send_request(self, **kwargs):\n        # 统一参数类型，仅限关键字参数\n        logger.info('正在发送请求...')\n        for k, v in kwargs.items():\n            if k == 'params':\n                v.update(self.pubilc_params) # 使用属性中的字典，修改本次参数\n            elif k == 'files':\n                for name, file in v.itemn():\n                    v[name] = open(file, \"rb\") # 二进制方式打开文件\n```\n\n## 3. 使用YAML数据驱动测试\n\n参数和返回值，结构相似的情况下，才适合数据驱动测试\n\n- 创建标签\n- 编辑标签\n\n### 完整代码\n\n打开数据文件封装函数\n\n```python\ndef to_yaml(path):\n    with open(path,encoding=\"utf-8\") as f:\n        s = f.read()\n        data_yaml = yaml.safe_load(s)\n    return data_yaml\n\n```\n\n使用`ddt_creat_tag.yaml`和`ddt_edit_tag_fail.yaml`分别对创建标签和编辑标签进行数据驱动测试\n\n`request_utils.py`代码\n\n```python\nimport requests\nimport logging\n\nlogger = logging.getLogger(\"request_utils\") #日志记录器\n\nclass RequestUtils:\n    sess = requests.session()\n    pubilc_params = {}  # 定义公共参数\n    opened_files=[] #创建一个打开文件的列表，用于接口请求完成后关闭文件\n    def send_request(self,**kwargs):\n        logger.info('正在发送请求...')\n        params=kwargs.get('params',{}) #使用get方法，当不存在params时会创建params且默认值为{}\n        params.update(self.pubilc_params) # 使用属性中的字典，修改本次参数\n        kwargs['params'] = params #当参数中没有params时需要添加params键来更新kwargs\n        files = kwargs.get('files',{})\n        for name, file_path in files.items():\n            if isinstance(file_path, str):\n                file_obj = open(file_path, \"rb\")\n                files[name] = file_obj\n                self.opened_files.append(file_obj) #写入列表\n        kwargs['files'] = files\n        for k, v in kwargs.items():\n            logger.info(f'  参数内容: {k}={v}')\n        res = self.sess.request(**kwargs)  # 发送请求  # 参数长度、内容是不确定\n        logger.info('收到接口响应')\n        logger.info(f'  状态码={res.status_code}')\n        logger.info(f'  响应头={res.headers}')\n        logger.info(f'  响应正文={res.text}')\n        for f in self.opened_files:\n            f.close()\n        return res\n```\n\n测试用例代码\n\n```python\nimport logging\nimport time\nimport pytest\n\nfrom commons.request_utils import RequestUtils\nfrom commons.aaa import to_yaml\nimport json\n\n#g_var = {} #全局变量函数\nlogger = logging.getLogger('ddt')\nddt_create_tag = to_yaml('data/ddt_creat_tag.yaml')\nlogger.info(f'data_ddt_create_tag={ddt_create_tag}')\nddt_edit_tag_fail = to_yaml('data/ddt_edit_tag_fail.yaml')\nlogger.info(f'ddt_edit_tag_fail={ddt_edit_tag_fail}')\n# 创建fixture，在所有用例结束后执行，用于删除标签\n@pytest.fixture(scope='session')\ndef del_tags():\n\n    yield\n    print('所有用例都执行完毕，开始删除测试数据')\n    logger.info('所有用例都执行完毕，开始删除测试数据')\n    res = RequestUtils().send_request(\n        method='get',\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/get\",\n\n    )\n    tags = res.json()['tags'] #返回数据先转换为json，获取到tags列表\n    for tag_name in ddt_create_tag: #外层循环，遍历已经创建的标签名\n        tagId = '000' #设定了一个默认值\n        for tag in tags: #内层循环，遍历tags列表\n            if tag_name == tag['name']: #名字与创建的标签名匹配就获取id值\n                tagId = tag['id']\n        if tagId == '000': #如果是默认值就跳过本次循环\n            continue\n        RequestUtils().send_request(\n            method=\"post\",\n            url=\"https://api.weixin.qq.com/cgi-bin/tags/delete\",\n\n            json={\"tag\": {\"id\": tagId}}\n        )\n\n\n# 1.获取鉴权码access token接口\ndef test_get_token():\n    res = RequestUtils().send_request(\n        method='get',\n        url=\"https://api.weixin.qq.com/cgi-bin/token\",\n        params={\n            \"grant_type\": \"client_credential\",\n            \"appid\": \"wx180cd14b59813610\",\n            \"secret\": \"0a0ac08da6958e499c4f8695db3f7697\"\n        }\n    )\n\n    assert res.status_code == 200\n    access_token = res.json()[\"access_token\"]\n    RequestUtils.pubilc_params['access_token'] = access_token\n    # g_var[\"access_token\"]= access_token # 保存变量，为了其他接口使用\n    assert access_token != \"\"\n\n\n# 2.获取公众号已创建的标签接口\ndef test_get_tags():\n    res = RequestUtils().send_request(\n        method='get',\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/get\",\n\n    )\n\n    assert res.status_code == 200\n    tags = res.json()[\"tags\"]\n    assert tags\n    assert tags[0]['id'] == 2\n\n\n# 3.创建标签接口\n# 参数化\n@pytest.mark.parametrize(\n    \"name\",\n    ddt_create_tag\n)\ndef test_create_tags(name,del_tags):\n    timestamp = str(time.time())\n    res = RequestUtils().send_request(\n        method='post',\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/create\",\n\n        json={\"tag\": {\"name\": name}}\n    )\n\n    assert res.status_code == 200\n    s = res.text.replace(\"\\\\\\\\\", \"\\\\\")\n    res_json = json.loads(s)  # 替换后手动进行反序列化，将字符串转换为json\n    tag_name = res_json[\"tag\"]['name']\n    tag_id = res_json[\"tag\"]['id']\n    g_var['tag_id'] = tag_id\n    assert tag_name == name\n    assert isinstance(tag_id, int)\n\n\n# 4.编辑标签接口\ndef test_edit_tags():\n    timestamp = str(time.time())\n    res = RequestUtils().send_request(\n        method='post',\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/update\",\n\n        json={\"tag\": {\"id\": g_var['tag_id'], \"name\": \"学习\" + timestamp}}\n    )\n\n    assert res.status_code == 200\n    assert res.json()['errcode'] == 0\n    assert res.json()['errmsg'] == 'ok'\n\n@pytest.mark.parametrize(\n    \"name,code\",\n    ddt_edit_tag_fail\n)\ndef test_edit_tags_fail(name,code):\n\n    res = RequestUtils().send_request(\n        method='post',\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/update\",\n\n        json={\"tag\": {\"id\": g_var['tag_id'], \"name\": name }}\n    )\n\n    assert res.status_code == 200\n    assert res.json()['errcode'] == code\n\n\n\n\n# 5.删除标签接口\ndef test_del_tags():\n    res = RequestUtils().send_request(\n        method=\"post\",\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/delete\",\n\n        json={\"tag\": {\"id\": g_var[\"tag_id\"]}}\n    )\n    assert res.status_code == 200\n    assert res.json()['errcode'] == 0\n    assert res.json()['errmsg'] == 'ok'\n\n\n# 6.文件上传接口\ndef test_file_upload():\n    res = RequestUtils().send_request(\n        method=\"post\",\n        url=\"https://api.weixin.qq.com/cgi-bin/media/uploadimg\",\n\n        files={\n            \"media\": \"data/shu.png\"\n        }\n    )\n    assert res.status_code == 200\n    url = res.json()['url']\n    assert 'http' in url\n    assert 'mmbiz.qpic.cn' in url\n\n```\n\n\n\n# 六、接口自动化测试框架之电商接口项目实战（day18）\n\n## 1. 电商接口项目实战\n\n### 1. 接口约定\n**基础URL**： \n`http://116.62.63.211/shop/api.php`  \n\n**查询字符串参数**：  \n| 参数名                  | 说明                          | 必填 |\n|-------------------------|-------------------------------|------|\n| `s`                     | 接口名称                      | 是   |\n| `application`           | 请求应用（web/app）           | 是   |\n| `application_client_type`| 客户端类型（ios/android/weixin/alipay） | 是   |\n| `token`                 | 身份凭据                      | 否   |\n| `ajax`                  | Web端异步请求标识             | 否   |\n\n**参数**：JSON  \n\n**响应**：JSON（包含字段：`code`, `msg`, `data`）  \n\n---\n\n### 2. 获取Token（其他用例的依赖）\n```python\nfrom commons.request_utils import RequestUtils\n\ndef test_get_token():\n    resp = RequestUtils().send_request(\n        method=\"post\",\n        url=\"http://101.34.221.219:8010/api.php\",\n        params={\n            \"s\": \"user/login\",\n            \"application\": \"app\",\n            \"application_client_type\": \"ios\",\n        },\n        json={\n            \"accounts\": \"beifan_1205\",\n            \"pwd\": \"beifan_1205\",\n            \"type\": \"username\"\n        }\n    )\n    \n    code = resp.json()['code']\n    token = resp.json()['data']['token']\n    \n    assert code == 0\n    assert token != \"\"\n    \n    # 设置全局公共参数\n    RequestUtils.public_params = {\n        \"application\": \"app\",\n        \"application_client_type\": \"ios\",\n        \"token\": token\n    }\n```\n\n---\n\n### 3. 商品收藏功能测试用例\n#### (1) 收藏商品\n```python\ndef test_goods_favor():\n    resp = RequestUtils().send_request(\n        method=\"post\",\n        url=\"http://101.34.221.219:8010/api.php\",\n        params={\"s\": \"goods/favor\"},\n        json={\"id\": 2, \"is_mandatory_favor\": 1}\n    )\n    \n    code = resp.json()['code']\n    assert code == 0\n```\n\n#### (2) 验证收藏列表\n```python\ndef test_usergoodsfavor_index_after_favor():\n    resp = RequestUtils().send_request(\n        method=\"post\",\n        url=\"http://101.34.221.219:8010/api.php\",\n        params={\"s\": \"usergoodsfavor/index\"}\n    )\n    \n    code = resp.json()['code']\n    text = resp.text\n    assert code == 0\n    assert '\"goods_id\":\"2\"' in text  # 验证商品ID=2存在\n```\n\n#### (3) 取消收藏\n```python\ndef test_usergoodsfavor_cancel():\n    resp = RequestUtils().send_request(\n        method=\"post\",\n        url=\"http://101.34.221.219:8010/api.php\",\n        params={\"s\": \"usergoodsfavor/cancel\"},\n        json={\"id\": \"2\"}\n    )\n    \n    code = resp.json()['code']\n    msg = resp.json()['msg']\n    assert code == 0\n    assert msg == '取消成功'\n```\n\n#### (4) 验证取消后收藏列表\n```python\ndef test_usergoodsfavor_index_after_cancel():\n    resp = RequestUtils().send_request(\n        method=\"post\",\n        url=\"http://101.34.221.219:8010/api.php\",\n        params={\"s\": \"usergoodsfavor/index\"}\n    )\n    \n    code = resp.json()['code']\n    text = resp.text\n    assert code == 0\n    assert '\"goods_id\":\"2\"' not in text  # 验证商品ID=2已移除\n```\n\n---\n\n## 项目技术栈总结\n| 技术         | 应用场景           |\n| ------------ | ------------------ |\n| Python       | 基础编程语言       |\n| Pytest       | 测试框架管理用例   |\n| Requests     | 发送HTTP请求       |\n| YAML         | 数据驱动测试       |\n| Logging      | 生成测试日志       |\n| Allure       | 生成可视化测试报告 |\n| Fixture      | 清理测试数据       |\n| 变量接口关联 | Token全局共享      |\n```\n```\n\n","source":"_posts/requests框架笔记.md","raw":"---\ntitle: requests框架笔记\ndate: 2025-06-30 12:45:23\ntags: 接口自动化\ncategories: 软件测试\ncover:\ndescription:\n---\n\n# 四、接口自动化测试框架之requests详解（day16）\n\n## 1. 市面上主流的接口自动化测试方案\n\n1. **基于工具的接口测试**  \n   - Postman: JavaScript  \n   - JMeter: Java  \n\n2. **基于代码的接口测试**  \n   - Python + pytest + requests （+ YAML + logging + allure + git + jenkins）  \n\n3. **基于平台的接口测试**  \n   - 前端: Vue  \n   - 后端:  \n     - Python: Django  \n     - Java: SpringBoot  \n\n---\n\n## 2. HTTP接口协议\n\n### 1. 什么是接口\n\n**API（Application Programming Interface）**：  \n- 一个程序和另一个程序的数据交互方式（序列化和反序列化）。  \n\n**API测试**：  \n- 一个程序对另一个程序的测试。  \n- 涉及数据的序列化与传输。  \n\n**Restful接口**：  \n\n- Postman将数据按JSON序列化，通过HTTP协议传输到Nginx的80端口。  \n\n**RPC接口**：  \n- RPC Client将数据按二进制序列化，通过TCP协议传输到RPC Server的8123端口。  \n\n**Windows接口**：  \n- Win32程序将数据二进制序列化，通过Windows事件总线传输到Windows进程。  \n\n---\n\n### 2. HTTP协议\n\n1. 发送请求：客户端 -> 服务器\n2. 回复响应： 服务器 -> 客户端\n\n**请求和响应的组成**：  \n- **行**：数据第一行。  \n- **头**：正文之前的内容。  \n- **正文（体，Body）**：主要数据内容。  \n\n#### 1. 请求  \n**行**： 请求方法 路径（协议、主机、路径）版本号\n\n```\nGET https://www.baidu.com/ HTTP/1.1\n```\n\n**常见请求方法**：  \n\n- `GET`：获取资源。  \n- `POST`：创建资源。  \n- `DELETE`：删除资源。  \n- `PUT`：修改资源。  \n- `OPTIONS`：查询接口信息。  \n\n**头**：  \n- 键值对形式，数量、长度、名字不限，必须是ASCII。  \n示例：  \n\n```\nbeifan: www.baidu.com\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML,\nlike Gecko) Chrome/124.0.0.0 Safari/537.36\nAccept:\ntext/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image\n/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\nSec-Fetch-Site: none\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nsec-ch-ua: \"Chromium\";v=\"124\", \"Google Chrome\";v=\"124\", \"Not-A.Brand\";v=\"99\"\nsec-ch-ua-mobile: ?0\nsec-ch-ua-platform: \"Windows\"\nAccept-Encoding: gzip, deflate, br, zstd\nAccept-Language: zh-CN,zh;q=0.9\nCookie: BAIDUID_BFESS=3E8FB44D82CFDB0B6F04524F2264D9D6:FG=1; BIDUPSID\n```\n\n头与正文间有两个空行\n\n**正文**：  \n\n- 可以是空、表单（键值对）、JSON字符串或二进制数据（图片、视频等）。  \n\n#### 2. 响应  \n**行**：  版本号 状态码 状态描述\n\n```\nHTTP/1.1 200 OK\n```\n\n**常见状态码**：  \n\n- `1xx`：继续请求。  \n- `2xx`：请求成功。  \n- `3xx`：重定向（无正文）。  \n- `4xx`：客户端错误（请求问题）。  \n- `5xx`：服务器端错误（接口问题）。  \n\n**头**：  \n\n```\nConnection: keep-alive\nContent-Security-Policy: frame-ancestors 'self' https://chat.baidu.com\nhttp://mirror-chat.baidu.com https://fj-chat.baidu.com https://hba-chat.baidu.com\nhttps://hbe-chat.baidu.com https://njjs-chat.baidu.com https://nj-chat.baidu.com\nhttps://hna-chat.baidu.com https://hnb-chat.baidu.com http://debug.baidu-int.com;\nContent-Type: text/html; charset=utf-8\nDate: Sun, 21 Apr 2024 12:26:53 GMT\nServer: BWS/1.1\nSet-Cookie: H_PS_PSSID=40366_40379_40301_40511_40080_60132; path=/; expires=Mon,\n21-Apr-25 12:26:53 GMT; domain=.baidu.com\nTraceid: 1713702413079251559415571183161739773267\nX-Ua-Compatible: IE=Edge,chrome=1\nX-Xss-Protection: 1;mode=block\nContent-Length: 406773\n```\n\n**正文**：  \n\n- 可以是空、文本（HTML、TXT）、JSON字符串或二进制数据。\n\n<!DOCTYPE html><!--STATUS OK--><html><head><meta http-equiv=\"Content-Type\"\ncontent=\"text/html;charset=utf-8\"><meta http-equiv=\"X-UA-Compatible\"\ncontent=\"IE=edge,chrome=1\"><meta content=\"always\" name=\"referrer\"><meta\nname=\"theme-color\" content=\"#ffffff\"><meta name=\"description\" content=\"全球领先的中\n文搜索引擎、致力于让网民更便捷地获取信息，找到所求。百度超过千亿的中文网页数据库，可以瞬间找到相关\n的搜索结果。\"><link rel=\"shortcut icon\" href=\"https://www.baidu.com/favicon.ico\"\ntype=\"image/x-icon\" /><link rel=\"search\"\ntype=\"application/opensearchdescription+xml\" href=\"/content-search.xml\" title=\"百\n度搜索\" /><link rel=\"icon\" sizes=\"any\" mask\nhref=\"https://www.baidu.com/favicon.ico\"><link rel=\"dns-prefetch\"\nhref=\"//dss0.bdstatic.com\"/><link rel=\"dns-prefetch\" href=\"//dss1.bdstatic.com\"/>\n<link rel=\"dns-prefetch\" href=\"//ss1.bdstatic.com\"/><link rel=\"dns-prefetch\"\nhref=\"//sp0.baidu.com\"/><link rel=\"dns-prefetch\" href=\"//sp1.baidu.com\"/><link\nrel=\"dns-prefetch\" href=\"//sp2.baidu.com\"/><link rel=\"dns-prefetch\"\nhref=\"//pss.bdstatic.com\"/>  \n\n---\n\n## 3. requests用法\n\n### 1. 安装  \n```bash\npip install requests\n```\n\n```\npip show requests\n```\n\n### 2. 发送HTTP请求  \n\n**多种使用方式**：  \n```python\nrequests.get('http://www.baidu.com/')\nrequests.request('get', 'http://www.baidu.com/')\n\nsess = requests.session()\nsess.get('http://www.baidu.com/')\nsess.request('get', 'http://www.baidu.com/')\n```\n\n**统一内部原理**：  \n```python\nsess = requests.session()  # 实例化类\nsess.request('get', 'http://www.baidu.com/')  # 调用实例方法\n```\n\n**参数说明**：  \n- **行**：  \n  - `method`：请求方法（如`GET`）。  \n  - `url`：接口地址。  \n  - `params=None`：查询字符串。  \n- **头**：  \n  - `headers=None`：请求头。  \n  - `cookies=None`：Cookies。  \n- **正文**：  \n  - `data=None`：表单参数。  \n  - `files=None`：文件（二进制）。  \n  - `json=None`：JSON参数。  \n- **其他**：    \n  - `timeout=None`, # 超时时间\n  - `allow_redirects=True`, # 跟随重定向\n  - `proxies=None`, # 代理设置\n  - `hooks=None`, # 内部钩子\n  - `stream=None`, # 流式传输\n  - `verify=None`, # 验证HTTPS证书\n  - `cert=None`, # 自定义HTTPS证书\n\n**示例**：  \n\n```python\nimport requests\n\nresp = requests.request(\n    # 行\n    method='get',\n    url=\"https://www.baidu.com/upload\",\n    params={\"dir\": \"user_home\"},\n    #### 头\n    headers={\"name\": \"beifan\"},\n    #### 正文\n    data={\"name\": \"北凡\"},  # 表单数据\n    json={\"age\": [1, 1, 2]},\n    files={\"file\": open(\"conftest.py\", \"rb\")}  # 二进制模式打开文件\n)\n```\n**注意**：`data`和`json`不能共存。  \n\n### 3. 解析响应  \n```python\nimport requests\n\nresp = requests.request('get', 'https://api.weixin.qq.com/cgi-bin/token')\n\n# 行\nprint(resp.status_code, resp.reason)#状态码和状态描述\n\n# 头\nprint(resp.headers)\n\n# 正文\nprint(resp.text)      # 文本内容（人类可读）\nprint(resp.content)   # 二进制内容（适合下载）\nprint(resp.json())    # 将JSON文本反序列化为字典\n```\n\n---\n\n## 4. 接口自动化实战\n\n### 1. 接口文档  \n- 地址：`http://47.107.116.139/showdoc/web/?#/1`  \n- 需要密码（找班主任索取）。  \n\n### 2. 基本流程  \n1. **看懂文档**：  \n   - 接口数量、项目风格、接口具体信息（请求四要素：方法、地址、参数、鉴权或依赖）（响应：状态码、正文、错误码、错误提示）。  \n   - 业务需求：何时、为何请求接口。  \n2. **设计用例**：  \n   - 前置条件、用例参数、预期结果。  \n3. **编写与执行用例**：  \n   - 使用Python + pytest + requests。  \n4. **输出报告**：  \n   - 日志与测试报告。  \n\n### 3. 微信公众号项目  \n\n```python\nimport random\nimport time\n\nimport requests\nimport json\n\ng_var = {}\n# 1.获取鉴权码access token接口\ndef test_get_token():\n    res = requests.request(\n        method='get',\n        url=\"https://api.weixin.qq.com/cgi-bin/token\",\n        params={\n            \"grant_type\": \"client_credential\",\n            \"appid\": \"\",\n            \"secret\": \"\"\n        }\n    )\n\n    assert res.status_code == 200\n    access_token = res.json()[\"access_token\"]\n    assert access_token != \"\"\n    g_var[\"access_token\"]= access_token # 保存变量，为了其他接口使用\n\n\n# 2.获取公众号已创建的标签接口\ndef test_get_tags():\n    res = requests.request(\n        method='get',\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/get\",\n        params={\n            \"access_token\": g_var[\"access_token\"]\n        }\n    )\n\n    assert res.status_code == 200\n    tags = res.json()[\"tags\"]\n    assert tags\n    assert tags[0]['id'] == 2\n\n# 3.创建标签接口\ndef test_create_tags():\n    timestamp = str(time.time())\n    res = requests.request(\n        method='post',\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/create\",\n        params={\n            \"access_token\": g_var[\"access_token\"]\n        },\n        json={\"tag\":{\"name\":\"熊\" + timestamp}}\n    )\n\n    assert res.status_code == 200\n    s = res.text.replace(\"\\\\\\\\\",\"\\\\\")\n    res_json = json.loads(s)#替换后手动进行反序列化，将字符串转换为json\n    name = res_json[\"tag\"]['name']\n    id = res_json[\"tag\"]['id']\n    g_var['tag_id'] = id\n    assert name == \"熊\" + timestamp\n    assert isinstance(id,int)\n    \n    \n\n# 4.编辑标签接口\ndef test_edit_tags():\n    timestamp = str(time.time())\n    res = requests.request(\n        method='post',\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/update\",\n        params={\n            \"access_token\": g_var[\"access_token\"]\n        },\n        json={\"tag\": {\"id\":g_var['tag_id'],\"name\":\"happy\"+timestamp}}\n    )\n\n    assert res.status_code == 200\n    assert res.json()['errcode'] == 0\n    assert res.json()['errmsg'] == 'ok'\n\n# 5.删除标签接口\ndef test_del_tags():\n    res = requests.request(\n        method=\"post\",\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/delete\",\n        params={\n            'access_token':g_var['access_token']\n        },\n        json= {\"tag\":{\"id\":g_var[\"tag_id\"]}}\n    )\n    assert res.status_code ==200\n    assert res.json()['errcode'] == 0\n    assert res.json()['errmsg'] == 'ok'\n\n# 6.文件上传接口\ndef test_file_upload():\n    res = requests.request(\n        method=\"post\",\n        url=\"https://api.weixin.qq.com/cgi-bin/media/uploadimg\",\n        params={\n            'access_token': g_var['access_token']\n        },\n        files={\n            \"media\":open(\"data/shu.png\",\"rb\")\n        }\n    )\n    assert res.status_code == 200\n    url = res.json()['url']\n    assert 'http' in url\n    assert 'mmbiz.qpic.cn' in url\n```\n\n创建接口时断言发生问题\n\n```\nAssertionError: assert '\\\\u718a1751596032.4772298' == '熊1751596032.4772298'\n```\n\n```python\nprint(res.content)\nprint(res.text)\nprint(res.json())\n#打印出的结果\n{\"tag\":{\"id\":194,\"name\":\"\\\\\\\\u718a1751596032.4772298\"}}\n{\"tag\":{\"id\":194,\"name\":\"\\\\u718a1751596032.4772298\"}}\n{'tag': {'id': 194, 'name': '\\\\u718a1751596032.4772298'}}\n```\n\n使用``s.replace(\"\\\\\\\\\",\"\\\\\")` 将\\\\\\u718a1751596032.4772298变为\\\\u718a1751596032.4772298，就变成了Unicode编码格式\n\n# 五、接口自动化测试框架之requests封装（day17）\n\n## 1. 回顾项目特点\n\n1. 大部分的用例由以下几步骤  \n   - 发送请求  \n   - 提取数据  \n   - 断言数据  \n2. 大部分的用例需要相同参数值（身份凭据）  \n\n**封装目的**：通过隐藏细节减少重复步骤，降低使用难度，增加新特性。\n\n---\n\n## 2. 封装请求类\n\n### 1. HTTP报文日志\n```python\nimport requests  \nimport logging  \n\nlogger = logging.getLogger('request_utils')  # 日志记录器  \n\nclass RequestUtils:  \n    sess = requests.Session()  # 实例化Session  \n\n    def send_request(self, **kwargs):   # 统一参数类型，仅限关键字参数\n        logger.info('正在发送请求...')  \n        for k, v in kwargs.items():  \n            logger.info(f'\t参数内容: {k}={v}')  \n\n        resp = self.sess.request(**kwargs)  # 发送请求  # 参数长度、内容是不确定\n        logger.info('收到接口响应')  \n        logger.info(f'状态码={resp.status_code}')  \n        logger.info(f'响应头={resp.headers}')  \n        logger.info(f'\t响应正文={resp.text}')  \n        return resp\n```\n\n### 2. 自动添加公共参数\n```python\nclass RequestUtils:\n    sess = requests.Session()  # 实例化\n    public_params = {}  # 公共参数字典  \n\n    def send_request(self, **kwargs):  # 统一参数类型，仅限关键字参数\n        logger.info('正在发送请求...')\n        for k, v in kwargs.items():  \n            if k == 'params':\n                v.update(self.public_params) # 合并参数内容，把public_params合并到params中\n            logger.info(f'\t参数内容: {k}={v}')  \n```\n\n### 3. 简化文件上传\n```python\nclass RequestUtils:\n    sess = requests.Session() # 实例化\n    pubilc_params = {}\n    def send_request(self, **kwargs):\n        # 统一参数类型，仅限关键字参数\n        logger.info('正在发送请求...')\n        for k, v in kwargs.items():\n            if k == 'params':\n                v.update(self.pubilc_params) # 使用属性中的字典，修改本次参数\n            elif k == 'files':\n                for name, file in v.itemn():\n                    v[name] = open(file, \"rb\") # 二进制方式打开文件\n```\n\n## 3. 使用YAML数据驱动测试\n\n参数和返回值，结构相似的情况下，才适合数据驱动测试\n\n- 创建标签\n- 编辑标签\n\n### 完整代码\n\n打开数据文件封装函数\n\n```python\ndef to_yaml(path):\n    with open(path,encoding=\"utf-8\") as f:\n        s = f.read()\n        data_yaml = yaml.safe_load(s)\n    return data_yaml\n\n```\n\n使用`ddt_creat_tag.yaml`和`ddt_edit_tag_fail.yaml`分别对创建标签和编辑标签进行数据驱动测试\n\n`request_utils.py`代码\n\n```python\nimport requests\nimport logging\n\nlogger = logging.getLogger(\"request_utils\") #日志记录器\n\nclass RequestUtils:\n    sess = requests.session()\n    pubilc_params = {}  # 定义公共参数\n    opened_files=[] #创建一个打开文件的列表，用于接口请求完成后关闭文件\n    def send_request(self,**kwargs):\n        logger.info('正在发送请求...')\n        params=kwargs.get('params',{}) #使用get方法，当不存在params时会创建params且默认值为{}\n        params.update(self.pubilc_params) # 使用属性中的字典，修改本次参数\n        kwargs['params'] = params #当参数中没有params时需要添加params键来更新kwargs\n        files = kwargs.get('files',{})\n        for name, file_path in files.items():\n            if isinstance(file_path, str):\n                file_obj = open(file_path, \"rb\")\n                files[name] = file_obj\n                self.opened_files.append(file_obj) #写入列表\n        kwargs['files'] = files\n        for k, v in kwargs.items():\n            logger.info(f'  参数内容: {k}={v}')\n        res = self.sess.request(**kwargs)  # 发送请求  # 参数长度、内容是不确定\n        logger.info('收到接口响应')\n        logger.info(f'  状态码={res.status_code}')\n        logger.info(f'  响应头={res.headers}')\n        logger.info(f'  响应正文={res.text}')\n        for f in self.opened_files:\n            f.close()\n        return res\n```\n\n测试用例代码\n\n```python\nimport logging\nimport time\nimport pytest\n\nfrom commons.request_utils import RequestUtils\nfrom commons.aaa import to_yaml\nimport json\n\n#g_var = {} #全局变量函数\nlogger = logging.getLogger('ddt')\nddt_create_tag = to_yaml('data/ddt_creat_tag.yaml')\nlogger.info(f'data_ddt_create_tag={ddt_create_tag}')\nddt_edit_tag_fail = to_yaml('data/ddt_edit_tag_fail.yaml')\nlogger.info(f'ddt_edit_tag_fail={ddt_edit_tag_fail}')\n# 创建fixture，在所有用例结束后执行，用于删除标签\n@pytest.fixture(scope='session')\ndef del_tags():\n\n    yield\n    print('所有用例都执行完毕，开始删除测试数据')\n    logger.info('所有用例都执行完毕，开始删除测试数据')\n    res = RequestUtils().send_request(\n        method='get',\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/get\",\n\n    )\n    tags = res.json()['tags'] #返回数据先转换为json，获取到tags列表\n    for tag_name in ddt_create_tag: #外层循环，遍历已经创建的标签名\n        tagId = '000' #设定了一个默认值\n        for tag in tags: #内层循环，遍历tags列表\n            if tag_name == tag['name']: #名字与创建的标签名匹配就获取id值\n                tagId = tag['id']\n        if tagId == '000': #如果是默认值就跳过本次循环\n            continue\n        RequestUtils().send_request(\n            method=\"post\",\n            url=\"https://api.weixin.qq.com/cgi-bin/tags/delete\",\n\n            json={\"tag\": {\"id\": tagId}}\n        )\n\n\n# 1.获取鉴权码access token接口\ndef test_get_token():\n    res = RequestUtils().send_request(\n        method='get',\n        url=\"https://api.weixin.qq.com/cgi-bin/token\",\n        params={\n            \"grant_type\": \"client_credential\",\n            \"appid\": \"wx180cd14b59813610\",\n            \"secret\": \"0a0ac08da6958e499c4f8695db3f7697\"\n        }\n    )\n\n    assert res.status_code == 200\n    access_token = res.json()[\"access_token\"]\n    RequestUtils.pubilc_params['access_token'] = access_token\n    # g_var[\"access_token\"]= access_token # 保存变量，为了其他接口使用\n    assert access_token != \"\"\n\n\n# 2.获取公众号已创建的标签接口\ndef test_get_tags():\n    res = RequestUtils().send_request(\n        method='get',\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/get\",\n\n    )\n\n    assert res.status_code == 200\n    tags = res.json()[\"tags\"]\n    assert tags\n    assert tags[0]['id'] == 2\n\n\n# 3.创建标签接口\n# 参数化\n@pytest.mark.parametrize(\n    \"name\",\n    ddt_create_tag\n)\ndef test_create_tags(name,del_tags):\n    timestamp = str(time.time())\n    res = RequestUtils().send_request(\n        method='post',\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/create\",\n\n        json={\"tag\": {\"name\": name}}\n    )\n\n    assert res.status_code == 200\n    s = res.text.replace(\"\\\\\\\\\", \"\\\\\")\n    res_json = json.loads(s)  # 替换后手动进行反序列化，将字符串转换为json\n    tag_name = res_json[\"tag\"]['name']\n    tag_id = res_json[\"tag\"]['id']\n    g_var['tag_id'] = tag_id\n    assert tag_name == name\n    assert isinstance(tag_id, int)\n\n\n# 4.编辑标签接口\ndef test_edit_tags():\n    timestamp = str(time.time())\n    res = RequestUtils().send_request(\n        method='post',\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/update\",\n\n        json={\"tag\": {\"id\": g_var['tag_id'], \"name\": \"学习\" + timestamp}}\n    )\n\n    assert res.status_code == 200\n    assert res.json()['errcode'] == 0\n    assert res.json()['errmsg'] == 'ok'\n\n@pytest.mark.parametrize(\n    \"name,code\",\n    ddt_edit_tag_fail\n)\ndef test_edit_tags_fail(name,code):\n\n    res = RequestUtils().send_request(\n        method='post',\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/update\",\n\n        json={\"tag\": {\"id\": g_var['tag_id'], \"name\": name }}\n    )\n\n    assert res.status_code == 200\n    assert res.json()['errcode'] == code\n\n\n\n\n# 5.删除标签接口\ndef test_del_tags():\n    res = RequestUtils().send_request(\n        method=\"post\",\n        url=\"https://api.weixin.qq.com/cgi-bin/tags/delete\",\n\n        json={\"tag\": {\"id\": g_var[\"tag_id\"]}}\n    )\n    assert res.status_code == 200\n    assert res.json()['errcode'] == 0\n    assert res.json()['errmsg'] == 'ok'\n\n\n# 6.文件上传接口\ndef test_file_upload():\n    res = RequestUtils().send_request(\n        method=\"post\",\n        url=\"https://api.weixin.qq.com/cgi-bin/media/uploadimg\",\n\n        files={\n            \"media\": \"data/shu.png\"\n        }\n    )\n    assert res.status_code == 200\n    url = res.json()['url']\n    assert 'http' in url\n    assert 'mmbiz.qpic.cn' in url\n\n```\n\n\n\n# 六、接口自动化测试框架之电商接口项目实战（day18）\n\n## 1. 电商接口项目实战\n\n### 1. 接口约定\n**基础URL**： \n`http://116.62.63.211/shop/api.php`  \n\n**查询字符串参数**：  \n| 参数名                  | 说明                          | 必填 |\n|-------------------------|-------------------------------|------|\n| `s`                     | 接口名称                      | 是   |\n| `application`           | 请求应用（web/app）           | 是   |\n| `application_client_type`| 客户端类型（ios/android/weixin/alipay） | 是   |\n| `token`                 | 身份凭据                      | 否   |\n| `ajax`                  | Web端异步请求标识             | 否   |\n\n**参数**：JSON  \n\n**响应**：JSON（包含字段：`code`, `msg`, `data`）  \n\n---\n\n### 2. 获取Token（其他用例的依赖）\n```python\nfrom commons.request_utils import RequestUtils\n\ndef test_get_token():\n    resp = RequestUtils().send_request(\n        method=\"post\",\n        url=\"http://101.34.221.219:8010/api.php\",\n        params={\n            \"s\": \"user/login\",\n            \"application\": \"app\",\n            \"application_client_type\": \"ios\",\n        },\n        json={\n            \"accounts\": \"beifan_1205\",\n            \"pwd\": \"beifan_1205\",\n            \"type\": \"username\"\n        }\n    )\n    \n    code = resp.json()['code']\n    token = resp.json()['data']['token']\n    \n    assert code == 0\n    assert token != \"\"\n    \n    # 设置全局公共参数\n    RequestUtils.public_params = {\n        \"application\": \"app\",\n        \"application_client_type\": \"ios\",\n        \"token\": token\n    }\n```\n\n---\n\n### 3. 商品收藏功能测试用例\n#### (1) 收藏商品\n```python\ndef test_goods_favor():\n    resp = RequestUtils().send_request(\n        method=\"post\",\n        url=\"http://101.34.221.219:8010/api.php\",\n        params={\"s\": \"goods/favor\"},\n        json={\"id\": 2, \"is_mandatory_favor\": 1}\n    )\n    \n    code = resp.json()['code']\n    assert code == 0\n```\n\n#### (2) 验证收藏列表\n```python\ndef test_usergoodsfavor_index_after_favor():\n    resp = RequestUtils().send_request(\n        method=\"post\",\n        url=\"http://101.34.221.219:8010/api.php\",\n        params={\"s\": \"usergoodsfavor/index\"}\n    )\n    \n    code = resp.json()['code']\n    text = resp.text\n    assert code == 0\n    assert '\"goods_id\":\"2\"' in text  # 验证商品ID=2存在\n```\n\n#### (3) 取消收藏\n```python\ndef test_usergoodsfavor_cancel():\n    resp = RequestUtils().send_request(\n        method=\"post\",\n        url=\"http://101.34.221.219:8010/api.php\",\n        params={\"s\": \"usergoodsfavor/cancel\"},\n        json={\"id\": \"2\"}\n    )\n    \n    code = resp.json()['code']\n    msg = resp.json()['msg']\n    assert code == 0\n    assert msg == '取消成功'\n```\n\n#### (4) 验证取消后收藏列表\n```python\ndef test_usergoodsfavor_index_after_cancel():\n    resp = RequestUtils().send_request(\n        method=\"post\",\n        url=\"http://101.34.221.219:8010/api.php\",\n        params={\"s\": \"usergoodsfavor/index\"}\n    )\n    \n    code = resp.json()['code']\n    text = resp.text\n    assert code == 0\n    assert '\"goods_id\":\"2\"' not in text  # 验证商品ID=2已移除\n```\n\n---\n\n## 项目技术栈总结\n| 技术         | 应用场景           |\n| ------------ | ------------------ |\n| Python       | 基础编程语言       |\n| Pytest       | 测试框架管理用例   |\n| Requests     | 发送HTTP请求       |\n| YAML         | 数据驱动测试       |\n| Logging      | 生成测试日志       |\n| Allure       | 生成可视化测试报告 |\n| Fixture      | 清理测试数据       |\n| 变量接口关联 | Token全局共享      |\n```\n```\n\n","slug":"requests框架笔记","published":1,"updated":"2025-07-05T05:26:03.978Z","comments":1,"layout":"post","photos":[],"_id":"cmcpwe25l000n9wnj4b4ig5ue","content":"<h1 id=\"四、接口自动化测试框架之requests详解（day16）\"><a href=\"#四、接口自动化测试框架之requests详解（day16）\" class=\"headerlink\" title=\"四、接口自动化测试框架之requests详解（day16）\"></a>四、接口自动化测试框架之requests详解（day16）</h1><h2 id=\"1-市面上主流的接口自动化测试方案\"><a href=\"#1-市面上主流的接口自动化测试方案\" class=\"headerlink\" title=\"1. 市面上主流的接口自动化测试方案\"></a>1. 市面上主流的接口自动化测试方案</h2><ol>\n<li><p><strong>基于工具的接口测试</strong>  </p>\n<ul>\n<li>Postman: JavaScript  </li>\n<li>JMeter: Java</li>\n</ul>\n</li>\n<li><p><strong>基于代码的接口测试</strong>  </p>\n<ul>\n<li>Python + pytest + requests （+ YAML + logging + allure + git + jenkins）</li>\n</ul>\n</li>\n<li><p><strong>基于平台的接口测试</strong>  </p>\n<ul>\n<li>前端: Vue  </li>\n<li>后端:  <ul>\n<li>Python: Django  </li>\n<li>Java: SpringBoot</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"2-HTTP接口协议\"><a href=\"#2-HTTP接口协议\" class=\"headerlink\" title=\"2. HTTP接口协议\"></a>2. HTTP接口协议</h2><h3 id=\"1-什么是接口\"><a href=\"#1-什么是接口\" class=\"headerlink\" title=\"1. 什么是接口\"></a>1. 什么是接口</h3><p><strong>API（Application Programming Interface）</strong>：  </p>\n<ul>\n<li>一个程序和另一个程序的数据交互方式（序列化和反序列化）。</li>\n</ul>\n<p><strong>API测试</strong>：  </p>\n<ul>\n<li>一个程序对另一个程序的测试。  </li>\n<li>涉及数据的序列化与传输。</li>\n</ul>\n<p><strong>Restful接口</strong>：  </p>\n<ul>\n<li>Postman将数据按JSON序列化，通过HTTP协议传输到Nginx的80端口。</li>\n</ul>\n<p><strong>RPC接口</strong>：  </p>\n<ul>\n<li>RPC Client将数据按二进制序列化，通过TCP协议传输到RPC Server的8123端口。</li>\n</ul>\n<p><strong>Windows接口</strong>：  </p>\n<ul>\n<li>Win32程序将数据二进制序列化，通过Windows事件总线传输到Windows进程。</li>\n</ul>\n<hr>\n<h3 id=\"2-HTTP协议\"><a href=\"#2-HTTP协议\" class=\"headerlink\" title=\"2. HTTP协议\"></a>2. HTTP协议</h3><ol>\n<li>发送请求：客户端 -&gt; 服务器</li>\n<li>回复响应： 服务器 -&gt; 客户端</li>\n</ol>\n<p><strong>请求和响应的组成</strong>：  </p>\n<ul>\n<li><strong>行</strong>：数据第一行。  </li>\n<li><strong>头</strong>：正文之前的内容。  </li>\n<li><strong>正文（体，Body）</strong>：主要数据内容。</li>\n</ul>\n<h4 id=\"1-请求\"><a href=\"#1-请求\" class=\"headerlink\" title=\"1. 请求\"></a>1. 请求</h4><p><strong>行</strong>： 请求方法 路径（协议、主机、路径）版本号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET https://www.baidu.com/ HTTP/1.1</span><br></pre></td></tr></table></figure>\n\n<p><strong>常见请求方法</strong>：  </p>\n<ul>\n<li><code>GET</code>：获取资源。  </li>\n<li><code>POST</code>：创建资源。  </li>\n<li><code>DELETE</code>：删除资源。  </li>\n<li><code>PUT</code>：修改资源。  </li>\n<li><code>OPTIONS</code>：查询接口信息。</li>\n</ul>\n<p><strong>头</strong>：  </p>\n<ul>\n<li>键值对形式，数量、长度、名字不限，必须是ASCII。<br>示例：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beifan: www.baidu.com</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML,</span><br><span class=\"line\">like Gecko) Chrome/124.0.0.0 Safari/537.36</span><br><span class=\"line\">Accept:</span><br><span class=\"line\">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image</span><br><span class=\"line\">/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class=\"line\">Sec-Fetch-Site: none</span><br><span class=\"line\">Sec-Fetch-Mode: navigate</span><br><span class=\"line\">Sec-Fetch-User: ?1</span><br><span class=\"line\">Sec-Fetch-Dest: document</span><br><span class=\"line\">sec-ch-ua: &quot;Chromium&quot;;v=&quot;124&quot;, &quot;Google Chrome&quot;;v=&quot;124&quot;, &quot;Not-A.Brand&quot;;v=&quot;99&quot;</span><br><span class=\"line\">sec-ch-ua-mobile: ?0</span><br><span class=\"line\">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class=\"line\">Accept-Encoding: gzip, deflate, br, zstd</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.9</span><br><span class=\"line\">Cookie: BAIDUID_BFESS=3E8FB44D82CFDB0B6F04524F2264D9D6:FG=1; BIDUPSID</span><br></pre></td></tr></table></figure>\n\n<p>头与正文间有两个空行</p>\n<p><strong>正文</strong>：  </p>\n<ul>\n<li>可以是空、表单（键值对）、JSON字符串或二进制数据（图片、视频等）。</li>\n</ul>\n<h4 id=\"2-响应\"><a href=\"#2-响应\" class=\"headerlink\" title=\"2. 响应\"></a>2. 响应</h4><p><strong>行</strong>：  版本号 状态码 状态描述</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure>\n\n<p><strong>常见状态码</strong>：  </p>\n<ul>\n<li><code>1xx</code>：继续请求。  </li>\n<li><code>2xx</code>：请求成功。  </li>\n<li><code>3xx</code>：重定向（无正文）。  </li>\n<li><code>4xx</code>：客户端错误（请求问题）。  </li>\n<li><code>5xx</code>：服务器端错误（接口问题）。</li>\n</ul>\n<p><strong>头</strong>：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Content-Security-Policy: frame-ancestors &#x27;self&#x27; https://chat.baidu.com</span><br><span class=\"line\">http://mirror-chat.baidu.com https://fj-chat.baidu.com https://hba-chat.baidu.com</span><br><span class=\"line\">https://hbe-chat.baidu.com https://njjs-chat.baidu.com https://nj-chat.baidu.com</span><br><span class=\"line\">https://hna-chat.baidu.com https://hnb-chat.baidu.com http://debug.baidu-int.com;</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br><span class=\"line\">Date: Sun, 21 Apr 2024 12:26:53 GMT</span><br><span class=\"line\">Server: BWS/1.1</span><br><span class=\"line\">Set-Cookie: H_PS_PSSID=40366_40379_40301_40511_40080_60132; path=/; expires=Mon,</span><br><span class=\"line\">21-Apr-25 12:26:53 GMT; domain=.baidu.com</span><br><span class=\"line\">Traceid: 1713702413079251559415571183161739773267</span><br><span class=\"line\">X-Ua-Compatible: IE=Edge,chrome=1</span><br><span class=\"line\">X-Xss-Protection: 1;mode=block</span><br><span class=\"line\">Content-Length: 406773</span><br></pre></td></tr></table></figure>\n\n<p><strong>正文</strong>：  </p>\n<ul>\n<li>可以是空、文本（HTML、TXT）、JSON字符串或二进制数据。</li>\n</ul>\n<!DOCTYPE html><!--STATUS OK--><html><head><meta http-equiv=\"Content-Type\"\n<p>content&#x3D;”text&#x2F;html;charset&#x3D;utf-8”&gt;<meta http-equiv=\"X-UA-Compatible\"\ncontent=\"IE=edge,chrome=1\"><meta content=\"always\" name=\"referrer\"><meta\nname=\"theme-color\" content=\"#ffffff\"><meta name=\"description\" content=\"全球领先的中\n文搜索引擎、致力于让网民更便捷地获取信息，找到所求。百度超过千亿的中文网页数据库，可以瞬间找到相关\n的搜索结果。\"><link rel=\"shortcut icon\" href=\"https://www.baidu.com/favicon.ico\"\ntype=\"image/x-icon\" /><link rel=\"search\"\ntype=\"application/opensearchdescription+xml\" href=\"/content-search.xml\" title=\"百\n度搜索\" /><link rel=\"icon\" sizes=\"any\" mask\nhref=\"https://www.baidu.com/favicon.ico\"><link rel=\"dns-prefetch\"\nhref=\"//dss0.bdstatic.com\"/><link rel=\"dns-prefetch\" href=\"//dss1.bdstatic.com\"/></p>\n<link rel=\"dns-prefetch\" href=\"//ss1.bdstatic.com\"/><link rel=\"dns-prefetch\"\nhref=\"//sp0.baidu.com\"/><link rel=\"dns-prefetch\" href=\"//sp1.baidu.com\"/><link\nrel=\"dns-prefetch\" href=\"//sp2.baidu.com\"/><link rel=\"dns-prefetch\"\nhref=\"//pss.bdstatic.com\"/>  \n\n<hr>\n<h2 id=\"3-requests用法\"><a href=\"#3-requests用法\" class=\"headerlink\" title=\"3. requests用法\"></a>3. requests用法</h2><h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip show requests</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-发送HTTP请求\"><a href=\"#2-发送HTTP请求\" class=\"headerlink\" title=\"2. 发送HTTP请求\"></a>2. 发送HTTP请求</h3><p><strong>多种使用方式</strong>：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requests.get(<span class=\"string\">&#x27;http://www.baidu.com/&#x27;</span>)</span><br><span class=\"line\">requests.request(<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;http://www.baidu.com/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sess = requests.session()</span><br><span class=\"line\">sess.get(<span class=\"string\">&#x27;http://www.baidu.com/&#x27;</span>)</span><br><span class=\"line\">sess.request(<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;http://www.baidu.com/&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>统一内部原理</strong>：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sess = requests.session()  <span class=\"comment\"># 实例化类</span></span><br><span class=\"line\">sess.request(<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;http://www.baidu.com/&#x27;</span>)  <span class=\"comment\"># 调用实例方法</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>参数说明</strong>：  </p>\n<ul>\n<li><strong>行</strong>：  <ul>\n<li><code>method</code>：请求方法（如<code>GET</code>）。  </li>\n<li><code>url</code>：接口地址。  </li>\n<li><code>params=None</code>：查询字符串。</li>\n</ul>\n</li>\n<li><strong>头</strong>：  <ul>\n<li><code>headers=None</code>：请求头。  </li>\n<li><code>cookies=None</code>：Cookies。</li>\n</ul>\n</li>\n<li><strong>正文</strong>：  <ul>\n<li><code>data=None</code>：表单参数。  </li>\n<li><code>files=None</code>：文件（二进制）。  </li>\n<li><code>json=None</code>：JSON参数。</li>\n</ul>\n</li>\n<li><strong>其他</strong>：    <ul>\n<li><code>timeout=None</code>, # 超时时间</li>\n<li><code>allow_redirects=True</code>, # 跟随重定向</li>\n<li><code>proxies=None</code>, # 代理设置</li>\n<li><code>hooks=None</code>, # 内部钩子</li>\n<li><code>stream=None</code>, # 流式传输</li>\n<li><code>verify=None</code>, # 验证HTTPS证书</li>\n<li><code>cert=None</code>, # 自定义HTTPS证书</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例</strong>：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">resp = requests.request(</span><br><span class=\"line\">    <span class=\"comment\"># 行</span></span><br><span class=\"line\">    method=<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">    url=<span class=\"string\">&quot;https://www.baidu.com/upload&quot;</span>,</span><br><span class=\"line\">    params=&#123;<span class=\"string\">&quot;dir&quot;</span>: <span class=\"string\">&quot;user_home&quot;</span>&#125;,</span><br><span class=\"line\">    <span class=\"comment\">#### 头</span></span><br><span class=\"line\">    headers=&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;beifan&quot;</span>&#125;,</span><br><span class=\"line\">    <span class=\"comment\">#### 正文</span></span><br><span class=\"line\">    data=&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;北凡&quot;</span>&#125;,  <span class=\"comment\"># 表单数据</span></span><br><span class=\"line\">    json=&#123;<span class=\"string\">&quot;age&quot;</span>: [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]&#125;,</span><br><span class=\"line\">    files=&#123;<span class=\"string\">&quot;file&quot;</span>: <span class=\"built_in\">open</span>(<span class=\"string\">&quot;conftest.py&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>)&#125;  <span class=\"comment\"># 二进制模式打开文件</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：<code>data</code>和<code>json</code>不能共存。  </p>\n<h3 id=\"3-解析响应\"><a href=\"#3-解析响应\" class=\"headerlink\" title=\"3. 解析响应\"></a>3. 解析响应</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">resp = requests.request(<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;https://api.weixin.qq.com/cgi-bin/token&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 行</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(resp.status_code, resp.reason)<span class=\"comment\">#状态码和状态描述</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 头</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(resp.headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正文</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(resp.text)      <span class=\"comment\"># 文本内容（人类可读）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(resp.content)   <span class=\"comment\"># 二进制内容（适合下载）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(resp.json())    <span class=\"comment\"># 将JSON文本反序列化为字典</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"4-接口自动化实战\"><a href=\"#4-接口自动化实战\" class=\"headerlink\" title=\"4. 接口自动化实战\"></a>4. 接口自动化实战</h2><h3 id=\"1-接口文档\"><a href=\"#1-接口文档\" class=\"headerlink\" title=\"1. 接口文档\"></a>1. 接口文档</h3><ul>\n<li>地址：<code>http://47.107.116.139/showdoc/web/?#/1</code>  </li>\n<li>需要密码（找班主任索取）。</li>\n</ul>\n<h3 id=\"2-基本流程\"><a href=\"#2-基本流程\" class=\"headerlink\" title=\"2. 基本流程\"></a>2. 基本流程</h3><ol>\n<li><strong>看懂文档</strong>：  <ul>\n<li>接口数量、项目风格、接口具体信息（请求四要素：方法、地址、参数、鉴权或依赖）（响应：状态码、正文、错误码、错误提示）。  </li>\n<li>业务需求：何时、为何请求接口。</li>\n</ul>\n</li>\n<li><strong>设计用例</strong>：  <ul>\n<li>前置条件、用例参数、预期结果。</li>\n</ul>\n</li>\n<li><strong>编写与执行用例</strong>：  <ul>\n<li>使用Python + pytest + requests。</li>\n</ul>\n</li>\n<li><strong>输出报告</strong>：  <ul>\n<li>日志与测试报告。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-微信公众号项目\"><a href=\"#3-微信公众号项目\" class=\"headerlink\" title=\"3. 微信公众号项目\"></a>3. 微信公众号项目</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">g_var = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\"># 1.获取鉴权码access token接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_get_token</span>():</span><br><span class=\"line\">    res = requests.request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/token&quot;</span>,</span><br><span class=\"line\">        params=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;grant_type&quot;</span>: <span class=\"string\">&quot;client_credential&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;appid&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;secret&quot;</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    access_token = res.json()[<span class=\"string\">&quot;access_token&quot;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> access_token != <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    g_var[<span class=\"string\">&quot;access_token&quot;</span>]= access_token <span class=\"comment\"># 保存变量，为了其他接口使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.获取公众号已创建的标签接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_get_tags</span>():</span><br><span class=\"line\">    res = requests.request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/get&quot;</span>,</span><br><span class=\"line\">        params=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;access_token&quot;</span>: g_var[<span class=\"string\">&quot;access_token&quot;</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    tags = res.json()[<span class=\"string\">&quot;tags&quot;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> tags</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> tags[<span class=\"number\">0</span>][<span class=\"string\">&#x27;id&#x27;</span>] == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.创建标签接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_create_tags</span>():</span><br><span class=\"line\">    timestamp = <span class=\"built_in\">str</span>(time.time())</span><br><span class=\"line\">    res = requests.request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/create&quot;</span>,</span><br><span class=\"line\">        params=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;access_token&quot;</span>: g_var[<span class=\"string\">&quot;access_token&quot;</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        json=&#123;<span class=\"string\">&quot;tag&quot;</span>:&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;熊&quot;</span> + timestamp&#125;&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    s = res.text.replace(<span class=\"string\">&quot;\\\\\\\\&quot;</span>,<span class=\"string\">&quot;\\\\&quot;</span>)</span><br><span class=\"line\">    res_json = json.loads(s)<span class=\"comment\">#替换后手动进行反序列化，将字符串转换为json</span></span><br><span class=\"line\">    name = res_json[<span class=\"string\">&quot;tag&quot;</span>][<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\">    <span class=\"built_in\">id</span> = res_json[<span class=\"string\">&quot;tag&quot;</span>][<span class=\"string\">&#x27;id&#x27;</span>]</span><br><span class=\"line\">    g_var[<span class=\"string\">&#x27;tag_id&#x27;</span>] = <span class=\"built_in\">id</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> name == <span class=\"string\">&quot;熊&quot;</span> + timestamp</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(<span class=\"built_in\">id</span>,<span class=\"built_in\">int</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.编辑标签接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_edit_tags</span>():</span><br><span class=\"line\">    timestamp = <span class=\"built_in\">str</span>(time.time())</span><br><span class=\"line\">    res = requests.request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/update&quot;</span>,</span><br><span class=\"line\">        params=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;access_token&quot;</span>: g_var[<span class=\"string\">&quot;access_token&quot;</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        json=&#123;<span class=\"string\">&quot;tag&quot;</span>: &#123;<span class=\"string\">&quot;id&quot;</span>:g_var[<span class=\"string\">&#x27;tag_id&#x27;</span>],<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;happy&quot;</span>+timestamp&#125;&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errcode&#x27;</span>] == <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errmsg&#x27;</span>] == <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.删除标签接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_del_tags</span>():</span><br><span class=\"line\">    res = requests.request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/delete&quot;</span>,</span><br><span class=\"line\">        params=&#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;access_token&#x27;</span>:g_var[<span class=\"string\">&#x27;access_token&#x27;</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        json= &#123;<span class=\"string\">&quot;tag&quot;</span>:&#123;<span class=\"string\">&quot;id&quot;</span>:g_var[<span class=\"string\">&quot;tag_id&quot;</span>]&#125;&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code ==<span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errcode&#x27;</span>] == <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errmsg&#x27;</span>] == <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.文件上传接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_file_upload</span>():</span><br><span class=\"line\">    res = requests.request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/media/uploadimg&quot;</span>,</span><br><span class=\"line\">        params=&#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;access_token&#x27;</span>: g_var[<span class=\"string\">&#x27;access_token&#x27;</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        files=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;media&quot;</span>:<span class=\"built_in\">open</span>(<span class=\"string\">&quot;data/shu.png&quot;</span>,<span class=\"string\">&quot;rb&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    url = res.json()[<span class=\"string\">&#x27;url&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;http&#x27;</span> <span class=\"keyword\">in</span> url</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;mmbiz.qpic.cn&#x27;</span> <span class=\"keyword\">in</span> url</span><br></pre></td></tr></table></figure>\n\n<p>创建接口时断言发生问题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AssertionError: assert &#x27;\\\\u718a1751596032.4772298&#x27; == &#x27;熊1751596032.4772298&#x27;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(res.content)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res.text)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res.json())</span><br><span class=\"line\"><span class=\"comment\">#打印出的结果</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;tag&quot;</span>:&#123;<span class=\"string\">&quot;id&quot;</span>:<span class=\"number\">194</span>,<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;\\\\\\\\u718a1751596032.4772298&quot;</span>&#125;&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;tag&quot;</span>:&#123;<span class=\"string\">&quot;id&quot;</span>:<span class=\"number\">194</span>,<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;\\\\u718a1751596032.4772298&quot;</span>&#125;&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;tag&#x27;</span>: &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">194</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;\\\\u718a1751596032.4772298&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用&#96;&#96;s.replace(“\\\\“,”\\“)&#96; 将\\\\u718a1751596032.4772298变为\\u718a1751596032.4772298，就变成了Unicode编码格式</p>\n<h1 id=\"五、接口自动化测试框架之requests封装（day17）\"><a href=\"#五、接口自动化测试框架之requests封装（day17）\" class=\"headerlink\" title=\"五、接口自动化测试框架之requests封装（day17）\"></a>五、接口自动化测试框架之requests封装（day17）</h1><h2 id=\"1-回顾项目特点\"><a href=\"#1-回顾项目特点\" class=\"headerlink\" title=\"1. 回顾项目特点\"></a>1. 回顾项目特点</h2><ol>\n<li>大部分的用例由以下几步骤  <ul>\n<li>发送请求  </li>\n<li>提取数据  </li>\n<li>断言数据</li>\n</ul>\n</li>\n<li>大部分的用例需要相同参数值（身份凭据）</li>\n</ol>\n<p><strong>封装目的</strong>：通过隐藏细节减少重复步骤，降低使用难度，增加新特性。</p>\n<hr>\n<h2 id=\"2-封装请求类\"><a href=\"#2-封装请求类\" class=\"headerlink\" title=\"2. 封装请求类\"></a>2. 封装请求类</h2><h3 id=\"1-HTTP报文日志\"><a href=\"#1-HTTP报文日志\" class=\"headerlink\" title=\"1. HTTP报文日志\"></a>1. HTTP报文日志</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests  </span><br><span class=\"line\"><span class=\"keyword\">import</span> logging  </span><br><span class=\"line\"></span><br><span class=\"line\">logger = logging.getLogger(<span class=\"string\">&#x27;request_utils&#x27;</span>)  <span class=\"comment\"># 日志记录器  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RequestUtils</span>:  </span><br><span class=\"line\">    sess = requests.Session()  <span class=\"comment\"># 实例化Session  </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">send_request</span>(<span class=\"params\">self, **kwargs</span>):   <span class=\"comment\"># 统一参数类型，仅限关键字参数</span></span><br><span class=\"line\">        logger.info(<span class=\"string\">&#x27;正在发送请求...&#x27;</span>)  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> kwargs.items():  </span><br><span class=\"line\">            logger.info(<span class=\"string\">f&#x27;\t参数内容: <span class=\"subst\">&#123;k&#125;</span>=<span class=\"subst\">&#123;v&#125;</span>&#x27;</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\">        resp = self.sess.request(**kwargs)  <span class=\"comment\"># 发送请求  # 参数长度、内容是不确定</span></span><br><span class=\"line\">        logger.info(<span class=\"string\">&#x27;收到接口响应&#x27;</span>)  </span><br><span class=\"line\">        logger.info(<span class=\"string\">f&#x27;状态码=<span class=\"subst\">&#123;resp.status_code&#125;</span>&#x27;</span>)  </span><br><span class=\"line\">        logger.info(<span class=\"string\">f&#x27;响应头=<span class=\"subst\">&#123;resp.headers&#125;</span>&#x27;</span>)  </span><br><span class=\"line\">        logger.info(<span class=\"string\">f&#x27;\t响应正文=<span class=\"subst\">&#123;resp.text&#125;</span>&#x27;</span>)  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> resp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-自动添加公共参数\"><a href=\"#2-自动添加公共参数\" class=\"headerlink\" title=\"2. 自动添加公共参数\"></a>2. 自动添加公共参数</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RequestUtils</span>:</span><br><span class=\"line\">    sess = requests.Session()  <span class=\"comment\"># 实例化</span></span><br><span class=\"line\">    public_params = &#123;&#125;  <span class=\"comment\"># 公共参数字典  </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">send_request</span>(<span class=\"params\">self, **kwargs</span>):  <span class=\"comment\"># 统一参数类型，仅限关键字参数</span></span><br><span class=\"line\">        logger.info(<span class=\"string\">&#x27;正在发送请求...&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> kwargs.items():  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> k == <span class=\"string\">&#x27;params&#x27;</span>:</span><br><span class=\"line\">                v.update(self.public_params) <span class=\"comment\"># 合并参数内容，把public_params合并到params中</span></span><br><span class=\"line\">            logger.info(<span class=\"string\">f&#x27;\t参数内容: <span class=\"subst\">&#123;k&#125;</span>=<span class=\"subst\">&#123;v&#125;</span>&#x27;</span>)  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-简化文件上传\"><a href=\"#3-简化文件上传\" class=\"headerlink\" title=\"3. 简化文件上传\"></a>3. 简化文件上传</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RequestUtils</span>:</span><br><span class=\"line\">    sess = requests.Session() <span class=\"comment\"># 实例化</span></span><br><span class=\"line\">    pubilc_params = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">send_request</span>(<span class=\"params\">self, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 统一参数类型，仅限关键字参数</span></span><br><span class=\"line\">        logger.info(<span class=\"string\">&#x27;正在发送请求...&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> kwargs.items():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> k == <span class=\"string\">&#x27;params&#x27;</span>:</span><br><span class=\"line\">                v.update(self.pubilc_params) <span class=\"comment\"># 使用属性中的字典，修改本次参数</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> k == <span class=\"string\">&#x27;files&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> name, file <span class=\"keyword\">in</span> v.itemn():</span><br><span class=\"line\">                    v[name] = <span class=\"built_in\">open</span>(file, <span class=\"string\">&quot;rb&quot;</span>) <span class=\"comment\"># 二进制方式打开文件</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-使用YAML数据驱动测试\"><a href=\"#3-使用YAML数据驱动测试\" class=\"headerlink\" title=\"3. 使用YAML数据驱动测试\"></a>3. 使用YAML数据驱动测试</h2><p>参数和返回值，结构相似的情况下，才适合数据驱动测试</p>\n<ul>\n<li>创建标签</li>\n<li>编辑标签</li>\n</ul>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p>打开数据文件封装函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">to_yaml</span>(<span class=\"params\">path</span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(path,encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        s = f.read()</span><br><span class=\"line\">        data_yaml = yaml.safe_load(s)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data_yaml</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>ddt_creat_tag.yaml</code>和<code>ddt_edit_tag_fail.yaml</code>分别对创建标签和编辑标签进行数据驱动测试</p>\n<p><code>request_utils.py</code>代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"></span><br><span class=\"line\">logger = logging.getLogger(<span class=\"string\">&quot;request_utils&quot;</span>) <span class=\"comment\">#日志记录器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RequestUtils</span>:</span><br><span class=\"line\">    sess = requests.session()</span><br><span class=\"line\">    pubilc_params = &#123;&#125;  <span class=\"comment\"># 定义公共参数</span></span><br><span class=\"line\">    opened_files=[] <span class=\"comment\">#创建一个打开文件的列表，用于接口请求完成后关闭文件</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">send_request</span>(<span class=\"params\">self,**kwargs</span>):</span><br><span class=\"line\">        logger.info(<span class=\"string\">&#x27;正在发送请求...&#x27;</span>)</span><br><span class=\"line\">        params=kwargs.get(<span class=\"string\">&#x27;params&#x27;</span>,&#123;&#125;) <span class=\"comment\">#使用get方法，当不存在params时会创建params且默认值为&#123;&#125;</span></span><br><span class=\"line\">        params.update(self.pubilc_params) <span class=\"comment\"># 使用属性中的字典，修改本次参数</span></span><br><span class=\"line\">        kwargs[<span class=\"string\">&#x27;params&#x27;</span>] = params <span class=\"comment\">#当参数中没有params时需要添加params键来更新kwargs</span></span><br><span class=\"line\">        files = kwargs.get(<span class=\"string\">&#x27;files&#x27;</span>,&#123;&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> name, file_path <span class=\"keyword\">in</span> files.items():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(file_path, <span class=\"built_in\">str</span>):</span><br><span class=\"line\">                file_obj = <span class=\"built_in\">open</span>(file_path, <span class=\"string\">&quot;rb&quot;</span>)</span><br><span class=\"line\">                files[name] = file_obj</span><br><span class=\"line\">                self.opened_files.append(file_obj) <span class=\"comment\">#写入列表</span></span><br><span class=\"line\">        kwargs[<span class=\"string\">&#x27;files&#x27;</span>] = files</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> kwargs.items():</span><br><span class=\"line\">            logger.info(<span class=\"string\">f&#x27;  参数内容: <span class=\"subst\">&#123;k&#125;</span>=<span class=\"subst\">&#123;v&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        res = self.sess.request(**kwargs)  <span class=\"comment\"># 发送请求  # 参数长度、内容是不确定</span></span><br><span class=\"line\">        logger.info(<span class=\"string\">&#x27;收到接口响应&#x27;</span>)</span><br><span class=\"line\">        logger.info(<span class=\"string\">f&#x27;  状态码=<span class=\"subst\">&#123;res.status_code&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        logger.info(<span class=\"string\">f&#x27;  响应头=<span class=\"subst\">&#123;res.headers&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        logger.info(<span class=\"string\">f&#x27;  响应正文=<span class=\"subst\">&#123;res.text&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> self.opened_files:</span><br><span class=\"line\">            f.close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n\n<p>测试用例代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> commons.request_utils <span class=\"keyword\">import</span> RequestUtils</span><br><span class=\"line\"><span class=\"keyword\">from</span> commons.aaa <span class=\"keyword\">import</span> to_yaml</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#g_var = &#123;&#125; #全局变量函数</span></span><br><span class=\"line\">logger = logging.getLogger(<span class=\"string\">&#x27;ddt&#x27;</span>)</span><br><span class=\"line\">ddt_create_tag = to_yaml(<span class=\"string\">&#x27;data/ddt_creat_tag.yaml&#x27;</span>)</span><br><span class=\"line\">logger.info(<span class=\"string\">f&#x27;data_ddt_create_tag=<span class=\"subst\">&#123;ddt_create_tag&#125;</span>&#x27;</span>)</span><br><span class=\"line\">ddt_edit_tag_fail = to_yaml(<span class=\"string\">&#x27;data/ddt_edit_tag_fail.yaml&#x27;</span>)</span><br><span class=\"line\">logger.info(<span class=\"string\">f&#x27;ddt_edit_tag_fail=<span class=\"subst\">&#123;ddt_edit_tag_fail&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 创建fixture，在所有用例结束后执行，用于删除标签</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.fixture(<span class=\"params\">scope=<span class=\"string\">&#x27;session&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">del_tags</span>():</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">yield</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;所有用例都执行完毕，开始删除测试数据&#x27;</span>)</span><br><span class=\"line\">    logger.info(<span class=\"string\">&#x27;所有用例都执行完毕，开始删除测试数据&#x27;</span>)</span><br><span class=\"line\">    res = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/get&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    )</span><br><span class=\"line\">    tags = res.json()[<span class=\"string\">&#x27;tags&#x27;</span>] <span class=\"comment\">#返回数据先转换为json，获取到tags列表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> tag_name <span class=\"keyword\">in</span> ddt_create_tag: <span class=\"comment\">#外层循环，遍历已经创建的标签名</span></span><br><span class=\"line\">        tagId = <span class=\"string\">&#x27;000&#x27;</span> <span class=\"comment\">#设定了一个默认值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> tag <span class=\"keyword\">in</span> tags: <span class=\"comment\">#内层循环，遍历tags列表</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> tag_name == tag[<span class=\"string\">&#x27;name&#x27;</span>]: <span class=\"comment\">#名字与创建的标签名匹配就获取id值</span></span><br><span class=\"line\">                tagId = tag[<span class=\"string\">&#x27;id&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> tagId == <span class=\"string\">&#x27;000&#x27;</span>: <span class=\"comment\">#如果是默认值就跳过本次循环</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        RequestUtils().send_request(</span><br><span class=\"line\">            method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">            url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/delete&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            json=&#123;<span class=\"string\">&quot;tag&quot;</span>: &#123;<span class=\"string\">&quot;id&quot;</span>: tagId&#125;&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.获取鉴权码access token接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_get_token</span>():</span><br><span class=\"line\">    res = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/token&quot;</span>,</span><br><span class=\"line\">        params=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;grant_type&quot;</span>: <span class=\"string\">&quot;client_credential&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;appid&quot;</span>: <span class=\"string\">&quot;wx180cd14b59813610&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;secret&quot;</span>: <span class=\"string\">&quot;0a0ac08da6958e499c4f8695db3f7697&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    access_token = res.json()[<span class=\"string\">&quot;access_token&quot;</span>]</span><br><span class=\"line\">    RequestUtils.pubilc_params[<span class=\"string\">&#x27;access_token&#x27;</span>] = access_token</span><br><span class=\"line\">    <span class=\"comment\"># g_var[&quot;access_token&quot;]= access_token # 保存变量，为了其他接口使用</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> access_token != <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.获取公众号已创建的标签接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_get_tags</span>():</span><br><span class=\"line\">    res = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/get&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    tags = res.json()[<span class=\"string\">&quot;tags&quot;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> tags</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> tags[<span class=\"number\">0</span>][<span class=\"string\">&#x27;id&#x27;</span>] == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.创建标签接口</span></span><br><span class=\"line\"><span class=\"comment\"># 参数化</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;name&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ddt_create_tag</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_create_tags</span>(<span class=\"params\">name,del_tags</span>):</span><br><span class=\"line\">    timestamp = <span class=\"built_in\">str</span>(time.time())</span><br><span class=\"line\">    res = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/create&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        json=&#123;<span class=\"string\">&quot;tag&quot;</span>: &#123;<span class=\"string\">&quot;name&quot;</span>: name&#125;&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    s = res.text.replace(<span class=\"string\">&quot;\\\\\\\\&quot;</span>, <span class=\"string\">&quot;\\\\&quot;</span>)</span><br><span class=\"line\">    res_json = json.loads(s)  <span class=\"comment\"># 替换后手动进行反序列化，将字符串转换为json</span></span><br><span class=\"line\">    tag_name = res_json[<span class=\"string\">&quot;tag&quot;</span>][<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\">    tag_id = res_json[<span class=\"string\">&quot;tag&quot;</span>][<span class=\"string\">&#x27;id&#x27;</span>]</span><br><span class=\"line\">    g_var[<span class=\"string\">&#x27;tag_id&#x27;</span>] = tag_id</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> tag_name == name</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(tag_id, <span class=\"built_in\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.编辑标签接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_edit_tags</span>():</span><br><span class=\"line\">    timestamp = <span class=\"built_in\">str</span>(time.time())</span><br><span class=\"line\">    res = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/update&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        json=&#123;<span class=\"string\">&quot;tag&quot;</span>: &#123;<span class=\"string\">&quot;id&quot;</span>: g_var[<span class=\"string\">&#x27;tag_id&#x27;</span>], <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;学习&quot;</span> + timestamp&#125;&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errcode&#x27;</span>] == <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errmsg&#x27;</span>] == <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;name,code&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ddt_edit_tag_fail</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_edit_tags_fail</span>(<span class=\"params\">name,code</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    res = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/update&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        json=&#123;<span class=\"string\">&quot;tag&quot;</span>: &#123;<span class=\"string\">&quot;id&quot;</span>: g_var[<span class=\"string\">&#x27;tag_id&#x27;</span>], <span class=\"string\">&quot;name&quot;</span>: name &#125;&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errcode&#x27;</span>] == code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.删除标签接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_del_tags</span>():</span><br><span class=\"line\">    res = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/delete&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        json=&#123;<span class=\"string\">&quot;tag&quot;</span>: &#123;<span class=\"string\">&quot;id&quot;</span>: g_var[<span class=\"string\">&quot;tag_id&quot;</span>]&#125;&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errcode&#x27;</span>] == <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errmsg&#x27;</span>] == <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.文件上传接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_file_upload</span>():</span><br><span class=\"line\">    res = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/media/uploadimg&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        files=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;media&quot;</span>: <span class=\"string\">&quot;data/shu.png&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    url = res.json()[<span class=\"string\">&#x27;url&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;http&#x27;</span> <span class=\"keyword\">in</span> url</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;mmbiz.qpic.cn&#x27;</span> <span class=\"keyword\">in</span> url</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"六、接口自动化测试框架之电商接口项目实战（day18）\"><a href=\"#六、接口自动化测试框架之电商接口项目实战（day18）\" class=\"headerlink\" title=\"六、接口自动化测试框架之电商接口项目实战（day18）\"></a>六、接口自动化测试框架之电商接口项目实战（day18）</h1><h2 id=\"1-电商接口项目实战\"><a href=\"#1-电商接口项目实战\" class=\"headerlink\" title=\"1. 电商接口项目实战\"></a>1. 电商接口项目实战</h2><h3 id=\"1-接口约定\"><a href=\"#1-接口约定\" class=\"headerlink\" title=\"1. 接口约定\"></a>1. 接口约定</h3><p><strong>基础URL</strong>：<br><code>http://116.62.63.211/shop/api.php</code>  </p>\n<p><strong>查询字符串参数</strong>：  </p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>说明</th>\n<th>必填</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>s</code></td>\n<td>接口名称</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>application</code></td>\n<td>请求应用（web&#x2F;app）</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>application_client_type</code></td>\n<td>客户端类型（ios&#x2F;android&#x2F;weixin&#x2F;alipay）</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>token</code></td>\n<td>身份凭据</td>\n<td>否</td>\n</tr>\n<tr>\n<td><code>ajax</code></td>\n<td>Web端异步请求标识</td>\n<td>否</td>\n</tr>\n</tbody></table>\n<p><strong>参数</strong>：JSON  </p>\n<p><strong>响应</strong>：JSON（包含字段：<code>code</code>, <code>msg</code>, <code>data</code>）  </p>\n<hr>\n<h3 id=\"2-获取Token（其他用例的依赖）\"><a href=\"#2-获取Token（其他用例的依赖）\" class=\"headerlink\" title=\"2. 获取Token（其他用例的依赖）\"></a>2. 获取Token（其他用例的依赖）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> commons.request_utils <span class=\"keyword\">import</span> RequestUtils</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_get_token</span>():</span><br><span class=\"line\">    resp = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;http://101.34.221.219:8010/api.php&quot;</span>,</span><br><span class=\"line\">        params=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;s&quot;</span>: <span class=\"string\">&quot;user/login&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;application&quot;</span>: <span class=\"string\">&quot;app&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;application_client_type&quot;</span>: <span class=\"string\">&quot;ios&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        json=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;accounts&quot;</span>: <span class=\"string\">&quot;beifan_1205&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;pwd&quot;</span>: <span class=\"string\">&quot;beifan_1205&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;username&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    code = resp.json()[<span class=\"string\">&#x27;code&#x27;</span>]</span><br><span class=\"line\">    token = resp.json()[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;token&#x27;</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">assert</span> code == <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> token != <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 设置全局公共参数</span></span><br><span class=\"line\">    RequestUtils.public_params = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;application&quot;</span>: <span class=\"string\">&quot;app&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;application_client_type&quot;</span>: <span class=\"string\">&quot;ios&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;token&quot;</span>: token</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-商品收藏功能测试用例\"><a href=\"#3-商品收藏功能测试用例\" class=\"headerlink\" title=\"3. 商品收藏功能测试用例\"></a>3. 商品收藏功能测试用例</h3><h4 id=\"1-收藏商品\"><a href=\"#1-收藏商品\" class=\"headerlink\" title=\"(1) 收藏商品\"></a>(1) 收藏商品</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_goods_favor</span>():</span><br><span class=\"line\">    resp = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;http://101.34.221.219:8010/api.php&quot;</span>,</span><br><span class=\"line\">        params=&#123;<span class=\"string\">&quot;s&quot;</span>: <span class=\"string\">&quot;goods/favor&quot;</span>&#125;,</span><br><span class=\"line\">        json=&#123;<span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">2</span>, <span class=\"string\">&quot;is_mandatory_favor&quot;</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    code = resp.json()[<span class=\"string\">&#x27;code&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> code == <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-验证收藏列表\"><a href=\"#2-验证收藏列表\" class=\"headerlink\" title=\"(2) 验证收藏列表\"></a>(2) 验证收藏列表</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_usergoodsfavor_index_after_favor</span>():</span><br><span class=\"line\">    resp = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;http://101.34.221.219:8010/api.php&quot;</span>,</span><br><span class=\"line\">        params=&#123;<span class=\"string\">&quot;s&quot;</span>: <span class=\"string\">&quot;usergoodsfavor/index&quot;</span>&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    code = resp.json()[<span class=\"string\">&#x27;code&#x27;</span>]</span><br><span class=\"line\">    text = resp.text</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> code == <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;&quot;goods_id&quot;:&quot;2&quot;&#x27;</span> <span class=\"keyword\">in</span> text  <span class=\"comment\"># 验证商品ID=2存在</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-取消收藏\"><a href=\"#3-取消收藏\" class=\"headerlink\" title=\"(3) 取消收藏\"></a>(3) 取消收藏</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_usergoodsfavor_cancel</span>():</span><br><span class=\"line\">    resp = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;http://101.34.221.219:8010/api.php&quot;</span>,</span><br><span class=\"line\">        params=&#123;<span class=\"string\">&quot;s&quot;</span>: <span class=\"string\">&quot;usergoodsfavor/cancel&quot;</span>&#125;,</span><br><span class=\"line\">        json=&#123;<span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;2&quot;</span>&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    code = resp.json()[<span class=\"string\">&#x27;code&#x27;</span>]</span><br><span class=\"line\">    msg = resp.json()[<span class=\"string\">&#x27;msg&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> code == <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> msg == <span class=\"string\">&#x27;取消成功&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-验证取消后收藏列表\"><a href=\"#4-验证取消后收藏列表\" class=\"headerlink\" title=\"(4) 验证取消后收藏列表\"></a>(4) 验证取消后收藏列表</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_usergoodsfavor_index_after_cancel</span>():</span><br><span class=\"line\">    resp = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;http://101.34.221.219:8010/api.php&quot;</span>,</span><br><span class=\"line\">        params=&#123;<span class=\"string\">&quot;s&quot;</span>: <span class=\"string\">&quot;usergoodsfavor/index&quot;</span>&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    code = resp.json()[<span class=\"string\">&#x27;code&#x27;</span>]</span><br><span class=\"line\">    text = resp.text</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> code == <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;&quot;goods_id&quot;:&quot;2&quot;&#x27;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> text  <span class=\"comment\"># 验证商品ID=2已移除</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"项目技术栈总结\"><a href=\"#项目技术栈总结\" class=\"headerlink\" title=\"项目技术栈总结\"></a>项目技术栈总结</h2><table>\n<thead>\n<tr>\n<th>技术</th>\n<th>应用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Python</td>\n<td>基础编程语言</td>\n</tr>\n<tr>\n<td>Pytest</td>\n<td>测试框架管理用例</td>\n</tr>\n<tr>\n<td>Requests</td>\n<td>发送HTTP请求</td>\n</tr>\n<tr>\n<td>YAML</td>\n<td>数据驱动测试</td>\n</tr>\n<tr>\n<td>Logging</td>\n<td>生成测试日志</td>\n</tr>\n<tr>\n<td>Allure</td>\n<td>生成可视化测试报告</td>\n</tr>\n<tr>\n<td>Fixture</td>\n<td>清理测试数据</td>\n</tr>\n<tr>\n<td>变量接口关联</td>\n<td>Token全局共享</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","cover_type":"img","excerpt":"","more":"<h1 id=\"四、接口自动化测试框架之requests详解（day16）\"><a href=\"#四、接口自动化测试框架之requests详解（day16）\" class=\"headerlink\" title=\"四、接口自动化测试框架之requests详解（day16）\"></a>四、接口自动化测试框架之requests详解（day16）</h1><h2 id=\"1-市面上主流的接口自动化测试方案\"><a href=\"#1-市面上主流的接口自动化测试方案\" class=\"headerlink\" title=\"1. 市面上主流的接口自动化测试方案\"></a>1. 市面上主流的接口自动化测试方案</h2><ol>\n<li><p><strong>基于工具的接口测试</strong>  </p>\n<ul>\n<li>Postman: JavaScript  </li>\n<li>JMeter: Java</li>\n</ul>\n</li>\n<li><p><strong>基于代码的接口测试</strong>  </p>\n<ul>\n<li>Python + pytest + requests （+ YAML + logging + allure + git + jenkins）</li>\n</ul>\n</li>\n<li><p><strong>基于平台的接口测试</strong>  </p>\n<ul>\n<li>前端: Vue  </li>\n<li>后端:  <ul>\n<li>Python: Django  </li>\n<li>Java: SpringBoot</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"2-HTTP接口协议\"><a href=\"#2-HTTP接口协议\" class=\"headerlink\" title=\"2. HTTP接口协议\"></a>2. HTTP接口协议</h2><h3 id=\"1-什么是接口\"><a href=\"#1-什么是接口\" class=\"headerlink\" title=\"1. 什么是接口\"></a>1. 什么是接口</h3><p><strong>API（Application Programming Interface）</strong>：  </p>\n<ul>\n<li>一个程序和另一个程序的数据交互方式（序列化和反序列化）。</li>\n</ul>\n<p><strong>API测试</strong>：  </p>\n<ul>\n<li>一个程序对另一个程序的测试。  </li>\n<li>涉及数据的序列化与传输。</li>\n</ul>\n<p><strong>Restful接口</strong>：  </p>\n<ul>\n<li>Postman将数据按JSON序列化，通过HTTP协议传输到Nginx的80端口。</li>\n</ul>\n<p><strong>RPC接口</strong>：  </p>\n<ul>\n<li>RPC Client将数据按二进制序列化，通过TCP协议传输到RPC Server的8123端口。</li>\n</ul>\n<p><strong>Windows接口</strong>：  </p>\n<ul>\n<li>Win32程序将数据二进制序列化，通过Windows事件总线传输到Windows进程。</li>\n</ul>\n<hr>\n<h3 id=\"2-HTTP协议\"><a href=\"#2-HTTP协议\" class=\"headerlink\" title=\"2. HTTP协议\"></a>2. HTTP协议</h3><ol>\n<li>发送请求：客户端 -&gt; 服务器</li>\n<li>回复响应： 服务器 -&gt; 客户端</li>\n</ol>\n<p><strong>请求和响应的组成</strong>：  </p>\n<ul>\n<li><strong>行</strong>：数据第一行。  </li>\n<li><strong>头</strong>：正文之前的内容。  </li>\n<li><strong>正文（体，Body）</strong>：主要数据内容。</li>\n</ul>\n<h4 id=\"1-请求\"><a href=\"#1-请求\" class=\"headerlink\" title=\"1. 请求\"></a>1. 请求</h4><p><strong>行</strong>： 请求方法 路径（协议、主机、路径）版本号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET https://www.baidu.com/ HTTP/1.1</span><br></pre></td></tr></table></figure>\n\n<p><strong>常见请求方法</strong>：  </p>\n<ul>\n<li><code>GET</code>：获取资源。  </li>\n<li><code>POST</code>：创建资源。  </li>\n<li><code>DELETE</code>：删除资源。  </li>\n<li><code>PUT</code>：修改资源。  </li>\n<li><code>OPTIONS</code>：查询接口信息。</li>\n</ul>\n<p><strong>头</strong>：  </p>\n<ul>\n<li>键值对形式，数量、长度、名字不限，必须是ASCII。<br>示例：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beifan: www.baidu.com</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML,</span><br><span class=\"line\">like Gecko) Chrome/124.0.0.0 Safari/537.36</span><br><span class=\"line\">Accept:</span><br><span class=\"line\">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image</span><br><span class=\"line\">/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class=\"line\">Sec-Fetch-Site: none</span><br><span class=\"line\">Sec-Fetch-Mode: navigate</span><br><span class=\"line\">Sec-Fetch-User: ?1</span><br><span class=\"line\">Sec-Fetch-Dest: document</span><br><span class=\"line\">sec-ch-ua: &quot;Chromium&quot;;v=&quot;124&quot;, &quot;Google Chrome&quot;;v=&quot;124&quot;, &quot;Not-A.Brand&quot;;v=&quot;99&quot;</span><br><span class=\"line\">sec-ch-ua-mobile: ?0</span><br><span class=\"line\">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class=\"line\">Accept-Encoding: gzip, deflate, br, zstd</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.9</span><br><span class=\"line\">Cookie: BAIDUID_BFESS=3E8FB44D82CFDB0B6F04524F2264D9D6:FG=1; BIDUPSID</span><br></pre></td></tr></table></figure>\n\n<p>头与正文间有两个空行</p>\n<p><strong>正文</strong>：  </p>\n<ul>\n<li>可以是空、表单（键值对）、JSON字符串或二进制数据（图片、视频等）。</li>\n</ul>\n<h4 id=\"2-响应\"><a href=\"#2-响应\" class=\"headerlink\" title=\"2. 响应\"></a>2. 响应</h4><p><strong>行</strong>：  版本号 状态码 状态描述</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure>\n\n<p><strong>常见状态码</strong>：  </p>\n<ul>\n<li><code>1xx</code>：继续请求。  </li>\n<li><code>2xx</code>：请求成功。  </li>\n<li><code>3xx</code>：重定向（无正文）。  </li>\n<li><code>4xx</code>：客户端错误（请求问题）。  </li>\n<li><code>5xx</code>：服务器端错误（接口问题）。</li>\n</ul>\n<p><strong>头</strong>：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Content-Security-Policy: frame-ancestors &#x27;self&#x27; https://chat.baidu.com</span><br><span class=\"line\">http://mirror-chat.baidu.com https://fj-chat.baidu.com https://hba-chat.baidu.com</span><br><span class=\"line\">https://hbe-chat.baidu.com https://njjs-chat.baidu.com https://nj-chat.baidu.com</span><br><span class=\"line\">https://hna-chat.baidu.com https://hnb-chat.baidu.com http://debug.baidu-int.com;</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br><span class=\"line\">Date: Sun, 21 Apr 2024 12:26:53 GMT</span><br><span class=\"line\">Server: BWS/1.1</span><br><span class=\"line\">Set-Cookie: H_PS_PSSID=40366_40379_40301_40511_40080_60132; path=/; expires=Mon,</span><br><span class=\"line\">21-Apr-25 12:26:53 GMT; domain=.baidu.com</span><br><span class=\"line\">Traceid: 1713702413079251559415571183161739773267</span><br><span class=\"line\">X-Ua-Compatible: IE=Edge,chrome=1</span><br><span class=\"line\">X-Xss-Protection: 1;mode=block</span><br><span class=\"line\">Content-Length: 406773</span><br></pre></td></tr></table></figure>\n\n<p><strong>正文</strong>：  </p>\n<ul>\n<li>可以是空、文本（HTML、TXT）、JSON字符串或二进制数据。</li>\n</ul>\n<!DOCTYPE html><!--STATUS OK--><html><head><meta http-equiv=\"Content-Type\"\n<p>content&#x3D;”text&#x2F;html;charset&#x3D;utf-8”&gt;<meta http-equiv=\"X-UA-Compatible\"\ncontent=\"IE=edge,chrome=1\"><meta content=\"always\" name=\"referrer\"><meta\nname=\"theme-color\" content=\"#ffffff\"><meta name=\"description\" content=\"全球领先的中\n文搜索引擎、致力于让网民更便捷地获取信息，找到所求。百度超过千亿的中文网页数据库，可以瞬间找到相关\n的搜索结果。\"><link rel=\"shortcut icon\" href=\"https://www.baidu.com/favicon.ico\"\ntype=\"image/x-icon\" /><link rel=\"search\"\ntype=\"application/opensearchdescription+xml\" href=\"/content-search.xml\" title=\"百\n度搜索\" /><link rel=\"icon\" sizes=\"any\" mask\nhref=\"https://www.baidu.com/favicon.ico\"><link rel=\"dns-prefetch\"\nhref=\"//dss0.bdstatic.com\"/><link rel=\"dns-prefetch\" href=\"//dss1.bdstatic.com\"/></p>\n<link rel=\"dns-prefetch\" href=\"//ss1.bdstatic.com\"/><link rel=\"dns-prefetch\"\nhref=\"//sp0.baidu.com\"/><link rel=\"dns-prefetch\" href=\"//sp1.baidu.com\"/><link\nrel=\"dns-prefetch\" href=\"//sp2.baidu.com\"/><link rel=\"dns-prefetch\"\nhref=\"//pss.bdstatic.com\"/>  \n\n<hr>\n<h2 id=\"3-requests用法\"><a href=\"#3-requests用法\" class=\"headerlink\" title=\"3. requests用法\"></a>3. requests用法</h2><h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip show requests</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-发送HTTP请求\"><a href=\"#2-发送HTTP请求\" class=\"headerlink\" title=\"2. 发送HTTP请求\"></a>2. 发送HTTP请求</h3><p><strong>多种使用方式</strong>：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requests.get(<span class=\"string\">&#x27;http://www.baidu.com/&#x27;</span>)</span><br><span class=\"line\">requests.request(<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;http://www.baidu.com/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sess = requests.session()</span><br><span class=\"line\">sess.get(<span class=\"string\">&#x27;http://www.baidu.com/&#x27;</span>)</span><br><span class=\"line\">sess.request(<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;http://www.baidu.com/&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>统一内部原理</strong>：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sess = requests.session()  <span class=\"comment\"># 实例化类</span></span><br><span class=\"line\">sess.request(<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;http://www.baidu.com/&#x27;</span>)  <span class=\"comment\"># 调用实例方法</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>参数说明</strong>：  </p>\n<ul>\n<li><strong>行</strong>：  <ul>\n<li><code>method</code>：请求方法（如<code>GET</code>）。  </li>\n<li><code>url</code>：接口地址。  </li>\n<li><code>params=None</code>：查询字符串。</li>\n</ul>\n</li>\n<li><strong>头</strong>：  <ul>\n<li><code>headers=None</code>：请求头。  </li>\n<li><code>cookies=None</code>：Cookies。</li>\n</ul>\n</li>\n<li><strong>正文</strong>：  <ul>\n<li><code>data=None</code>：表单参数。  </li>\n<li><code>files=None</code>：文件（二进制）。  </li>\n<li><code>json=None</code>：JSON参数。</li>\n</ul>\n</li>\n<li><strong>其他</strong>：    <ul>\n<li><code>timeout=None</code>, # 超时时间</li>\n<li><code>allow_redirects=True</code>, # 跟随重定向</li>\n<li><code>proxies=None</code>, # 代理设置</li>\n<li><code>hooks=None</code>, # 内部钩子</li>\n<li><code>stream=None</code>, # 流式传输</li>\n<li><code>verify=None</code>, # 验证HTTPS证书</li>\n<li><code>cert=None</code>, # 自定义HTTPS证书</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例</strong>：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">resp = requests.request(</span><br><span class=\"line\">    <span class=\"comment\"># 行</span></span><br><span class=\"line\">    method=<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">    url=<span class=\"string\">&quot;https://www.baidu.com/upload&quot;</span>,</span><br><span class=\"line\">    params=&#123;<span class=\"string\">&quot;dir&quot;</span>: <span class=\"string\">&quot;user_home&quot;</span>&#125;,</span><br><span class=\"line\">    <span class=\"comment\">#### 头</span></span><br><span class=\"line\">    headers=&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;beifan&quot;</span>&#125;,</span><br><span class=\"line\">    <span class=\"comment\">#### 正文</span></span><br><span class=\"line\">    data=&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;北凡&quot;</span>&#125;,  <span class=\"comment\"># 表单数据</span></span><br><span class=\"line\">    json=&#123;<span class=\"string\">&quot;age&quot;</span>: [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]&#125;,</span><br><span class=\"line\">    files=&#123;<span class=\"string\">&quot;file&quot;</span>: <span class=\"built_in\">open</span>(<span class=\"string\">&quot;conftest.py&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>)&#125;  <span class=\"comment\"># 二进制模式打开文件</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：<code>data</code>和<code>json</code>不能共存。  </p>\n<h3 id=\"3-解析响应\"><a href=\"#3-解析响应\" class=\"headerlink\" title=\"3. 解析响应\"></a>3. 解析响应</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">resp = requests.request(<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;https://api.weixin.qq.com/cgi-bin/token&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 行</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(resp.status_code, resp.reason)<span class=\"comment\">#状态码和状态描述</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 头</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(resp.headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正文</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(resp.text)      <span class=\"comment\"># 文本内容（人类可读）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(resp.content)   <span class=\"comment\"># 二进制内容（适合下载）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(resp.json())    <span class=\"comment\"># 将JSON文本反序列化为字典</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"4-接口自动化实战\"><a href=\"#4-接口自动化实战\" class=\"headerlink\" title=\"4. 接口自动化实战\"></a>4. 接口自动化实战</h2><h3 id=\"1-接口文档\"><a href=\"#1-接口文档\" class=\"headerlink\" title=\"1. 接口文档\"></a>1. 接口文档</h3><ul>\n<li>地址：<code>http://47.107.116.139/showdoc/web/?#/1</code>  </li>\n<li>需要密码（找班主任索取）。</li>\n</ul>\n<h3 id=\"2-基本流程\"><a href=\"#2-基本流程\" class=\"headerlink\" title=\"2. 基本流程\"></a>2. 基本流程</h3><ol>\n<li><strong>看懂文档</strong>：  <ul>\n<li>接口数量、项目风格、接口具体信息（请求四要素：方法、地址、参数、鉴权或依赖）（响应：状态码、正文、错误码、错误提示）。  </li>\n<li>业务需求：何时、为何请求接口。</li>\n</ul>\n</li>\n<li><strong>设计用例</strong>：  <ul>\n<li>前置条件、用例参数、预期结果。</li>\n</ul>\n</li>\n<li><strong>编写与执行用例</strong>：  <ul>\n<li>使用Python + pytest + requests。</li>\n</ul>\n</li>\n<li><strong>输出报告</strong>：  <ul>\n<li>日志与测试报告。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-微信公众号项目\"><a href=\"#3-微信公众号项目\" class=\"headerlink\" title=\"3. 微信公众号项目\"></a>3. 微信公众号项目</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">g_var = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\"># 1.获取鉴权码access token接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_get_token</span>():</span><br><span class=\"line\">    res = requests.request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/token&quot;</span>,</span><br><span class=\"line\">        params=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;grant_type&quot;</span>: <span class=\"string\">&quot;client_credential&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;appid&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;secret&quot;</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    access_token = res.json()[<span class=\"string\">&quot;access_token&quot;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> access_token != <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    g_var[<span class=\"string\">&quot;access_token&quot;</span>]= access_token <span class=\"comment\"># 保存变量，为了其他接口使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.获取公众号已创建的标签接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_get_tags</span>():</span><br><span class=\"line\">    res = requests.request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/get&quot;</span>,</span><br><span class=\"line\">        params=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;access_token&quot;</span>: g_var[<span class=\"string\">&quot;access_token&quot;</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    tags = res.json()[<span class=\"string\">&quot;tags&quot;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> tags</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> tags[<span class=\"number\">0</span>][<span class=\"string\">&#x27;id&#x27;</span>] == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.创建标签接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_create_tags</span>():</span><br><span class=\"line\">    timestamp = <span class=\"built_in\">str</span>(time.time())</span><br><span class=\"line\">    res = requests.request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/create&quot;</span>,</span><br><span class=\"line\">        params=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;access_token&quot;</span>: g_var[<span class=\"string\">&quot;access_token&quot;</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        json=&#123;<span class=\"string\">&quot;tag&quot;</span>:&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;熊&quot;</span> + timestamp&#125;&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    s = res.text.replace(<span class=\"string\">&quot;\\\\\\\\&quot;</span>,<span class=\"string\">&quot;\\\\&quot;</span>)</span><br><span class=\"line\">    res_json = json.loads(s)<span class=\"comment\">#替换后手动进行反序列化，将字符串转换为json</span></span><br><span class=\"line\">    name = res_json[<span class=\"string\">&quot;tag&quot;</span>][<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\">    <span class=\"built_in\">id</span> = res_json[<span class=\"string\">&quot;tag&quot;</span>][<span class=\"string\">&#x27;id&#x27;</span>]</span><br><span class=\"line\">    g_var[<span class=\"string\">&#x27;tag_id&#x27;</span>] = <span class=\"built_in\">id</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> name == <span class=\"string\">&quot;熊&quot;</span> + timestamp</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(<span class=\"built_in\">id</span>,<span class=\"built_in\">int</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.编辑标签接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_edit_tags</span>():</span><br><span class=\"line\">    timestamp = <span class=\"built_in\">str</span>(time.time())</span><br><span class=\"line\">    res = requests.request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/update&quot;</span>,</span><br><span class=\"line\">        params=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;access_token&quot;</span>: g_var[<span class=\"string\">&quot;access_token&quot;</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        json=&#123;<span class=\"string\">&quot;tag&quot;</span>: &#123;<span class=\"string\">&quot;id&quot;</span>:g_var[<span class=\"string\">&#x27;tag_id&#x27;</span>],<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;happy&quot;</span>+timestamp&#125;&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errcode&#x27;</span>] == <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errmsg&#x27;</span>] == <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.删除标签接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_del_tags</span>():</span><br><span class=\"line\">    res = requests.request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/delete&quot;</span>,</span><br><span class=\"line\">        params=&#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;access_token&#x27;</span>:g_var[<span class=\"string\">&#x27;access_token&#x27;</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        json= &#123;<span class=\"string\">&quot;tag&quot;</span>:&#123;<span class=\"string\">&quot;id&quot;</span>:g_var[<span class=\"string\">&quot;tag_id&quot;</span>]&#125;&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code ==<span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errcode&#x27;</span>] == <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errmsg&#x27;</span>] == <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.文件上传接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_file_upload</span>():</span><br><span class=\"line\">    res = requests.request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/media/uploadimg&quot;</span>,</span><br><span class=\"line\">        params=&#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;access_token&#x27;</span>: g_var[<span class=\"string\">&#x27;access_token&#x27;</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        files=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;media&quot;</span>:<span class=\"built_in\">open</span>(<span class=\"string\">&quot;data/shu.png&quot;</span>,<span class=\"string\">&quot;rb&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    url = res.json()[<span class=\"string\">&#x27;url&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;http&#x27;</span> <span class=\"keyword\">in</span> url</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;mmbiz.qpic.cn&#x27;</span> <span class=\"keyword\">in</span> url</span><br></pre></td></tr></table></figure>\n\n<p>创建接口时断言发生问题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AssertionError: assert &#x27;\\\\u718a1751596032.4772298&#x27; == &#x27;熊1751596032.4772298&#x27;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(res.content)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res.text)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res.json())</span><br><span class=\"line\"><span class=\"comment\">#打印出的结果</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;tag&quot;</span>:&#123;<span class=\"string\">&quot;id&quot;</span>:<span class=\"number\">194</span>,<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;\\\\\\\\u718a1751596032.4772298&quot;</span>&#125;&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;tag&quot;</span>:&#123;<span class=\"string\">&quot;id&quot;</span>:<span class=\"number\">194</span>,<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;\\\\u718a1751596032.4772298&quot;</span>&#125;&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;tag&#x27;</span>: &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">194</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;\\\\u718a1751596032.4772298&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用&#96;&#96;s.replace(“\\\\“,”\\“)&#96; 将\\\\u718a1751596032.4772298变为\\u718a1751596032.4772298，就变成了Unicode编码格式</p>\n<h1 id=\"五、接口自动化测试框架之requests封装（day17）\"><a href=\"#五、接口自动化测试框架之requests封装（day17）\" class=\"headerlink\" title=\"五、接口自动化测试框架之requests封装（day17）\"></a>五、接口自动化测试框架之requests封装（day17）</h1><h2 id=\"1-回顾项目特点\"><a href=\"#1-回顾项目特点\" class=\"headerlink\" title=\"1. 回顾项目特点\"></a>1. 回顾项目特点</h2><ol>\n<li>大部分的用例由以下几步骤  <ul>\n<li>发送请求  </li>\n<li>提取数据  </li>\n<li>断言数据</li>\n</ul>\n</li>\n<li>大部分的用例需要相同参数值（身份凭据）</li>\n</ol>\n<p><strong>封装目的</strong>：通过隐藏细节减少重复步骤，降低使用难度，增加新特性。</p>\n<hr>\n<h2 id=\"2-封装请求类\"><a href=\"#2-封装请求类\" class=\"headerlink\" title=\"2. 封装请求类\"></a>2. 封装请求类</h2><h3 id=\"1-HTTP报文日志\"><a href=\"#1-HTTP报文日志\" class=\"headerlink\" title=\"1. HTTP报文日志\"></a>1. HTTP报文日志</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests  </span><br><span class=\"line\"><span class=\"keyword\">import</span> logging  </span><br><span class=\"line\"></span><br><span class=\"line\">logger = logging.getLogger(<span class=\"string\">&#x27;request_utils&#x27;</span>)  <span class=\"comment\"># 日志记录器  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RequestUtils</span>:  </span><br><span class=\"line\">    sess = requests.Session()  <span class=\"comment\"># 实例化Session  </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">send_request</span>(<span class=\"params\">self, **kwargs</span>):   <span class=\"comment\"># 统一参数类型，仅限关键字参数</span></span><br><span class=\"line\">        logger.info(<span class=\"string\">&#x27;正在发送请求...&#x27;</span>)  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> kwargs.items():  </span><br><span class=\"line\">            logger.info(<span class=\"string\">f&#x27;\t参数内容: <span class=\"subst\">&#123;k&#125;</span>=<span class=\"subst\">&#123;v&#125;</span>&#x27;</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\">        resp = self.sess.request(**kwargs)  <span class=\"comment\"># 发送请求  # 参数长度、内容是不确定</span></span><br><span class=\"line\">        logger.info(<span class=\"string\">&#x27;收到接口响应&#x27;</span>)  </span><br><span class=\"line\">        logger.info(<span class=\"string\">f&#x27;状态码=<span class=\"subst\">&#123;resp.status_code&#125;</span>&#x27;</span>)  </span><br><span class=\"line\">        logger.info(<span class=\"string\">f&#x27;响应头=<span class=\"subst\">&#123;resp.headers&#125;</span>&#x27;</span>)  </span><br><span class=\"line\">        logger.info(<span class=\"string\">f&#x27;\t响应正文=<span class=\"subst\">&#123;resp.text&#125;</span>&#x27;</span>)  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> resp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-自动添加公共参数\"><a href=\"#2-自动添加公共参数\" class=\"headerlink\" title=\"2. 自动添加公共参数\"></a>2. 自动添加公共参数</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RequestUtils</span>:</span><br><span class=\"line\">    sess = requests.Session()  <span class=\"comment\"># 实例化</span></span><br><span class=\"line\">    public_params = &#123;&#125;  <span class=\"comment\"># 公共参数字典  </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">send_request</span>(<span class=\"params\">self, **kwargs</span>):  <span class=\"comment\"># 统一参数类型，仅限关键字参数</span></span><br><span class=\"line\">        logger.info(<span class=\"string\">&#x27;正在发送请求...&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> kwargs.items():  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> k == <span class=\"string\">&#x27;params&#x27;</span>:</span><br><span class=\"line\">                v.update(self.public_params) <span class=\"comment\"># 合并参数内容，把public_params合并到params中</span></span><br><span class=\"line\">            logger.info(<span class=\"string\">f&#x27;\t参数内容: <span class=\"subst\">&#123;k&#125;</span>=<span class=\"subst\">&#123;v&#125;</span>&#x27;</span>)  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-简化文件上传\"><a href=\"#3-简化文件上传\" class=\"headerlink\" title=\"3. 简化文件上传\"></a>3. 简化文件上传</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RequestUtils</span>:</span><br><span class=\"line\">    sess = requests.Session() <span class=\"comment\"># 实例化</span></span><br><span class=\"line\">    pubilc_params = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">send_request</span>(<span class=\"params\">self, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 统一参数类型，仅限关键字参数</span></span><br><span class=\"line\">        logger.info(<span class=\"string\">&#x27;正在发送请求...&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> kwargs.items():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> k == <span class=\"string\">&#x27;params&#x27;</span>:</span><br><span class=\"line\">                v.update(self.pubilc_params) <span class=\"comment\"># 使用属性中的字典，修改本次参数</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> k == <span class=\"string\">&#x27;files&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> name, file <span class=\"keyword\">in</span> v.itemn():</span><br><span class=\"line\">                    v[name] = <span class=\"built_in\">open</span>(file, <span class=\"string\">&quot;rb&quot;</span>) <span class=\"comment\"># 二进制方式打开文件</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-使用YAML数据驱动测试\"><a href=\"#3-使用YAML数据驱动测试\" class=\"headerlink\" title=\"3. 使用YAML数据驱动测试\"></a>3. 使用YAML数据驱动测试</h2><p>参数和返回值，结构相似的情况下，才适合数据驱动测试</p>\n<ul>\n<li>创建标签</li>\n<li>编辑标签</li>\n</ul>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p>打开数据文件封装函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">to_yaml</span>(<span class=\"params\">path</span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(path,encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        s = f.read()</span><br><span class=\"line\">        data_yaml = yaml.safe_load(s)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data_yaml</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>ddt_creat_tag.yaml</code>和<code>ddt_edit_tag_fail.yaml</code>分别对创建标签和编辑标签进行数据驱动测试</p>\n<p><code>request_utils.py</code>代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"></span><br><span class=\"line\">logger = logging.getLogger(<span class=\"string\">&quot;request_utils&quot;</span>) <span class=\"comment\">#日志记录器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RequestUtils</span>:</span><br><span class=\"line\">    sess = requests.session()</span><br><span class=\"line\">    pubilc_params = &#123;&#125;  <span class=\"comment\"># 定义公共参数</span></span><br><span class=\"line\">    opened_files=[] <span class=\"comment\">#创建一个打开文件的列表，用于接口请求完成后关闭文件</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">send_request</span>(<span class=\"params\">self,**kwargs</span>):</span><br><span class=\"line\">        logger.info(<span class=\"string\">&#x27;正在发送请求...&#x27;</span>)</span><br><span class=\"line\">        params=kwargs.get(<span class=\"string\">&#x27;params&#x27;</span>,&#123;&#125;) <span class=\"comment\">#使用get方法，当不存在params时会创建params且默认值为&#123;&#125;</span></span><br><span class=\"line\">        params.update(self.pubilc_params) <span class=\"comment\"># 使用属性中的字典，修改本次参数</span></span><br><span class=\"line\">        kwargs[<span class=\"string\">&#x27;params&#x27;</span>] = params <span class=\"comment\">#当参数中没有params时需要添加params键来更新kwargs</span></span><br><span class=\"line\">        files = kwargs.get(<span class=\"string\">&#x27;files&#x27;</span>,&#123;&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> name, file_path <span class=\"keyword\">in</span> files.items():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(file_path, <span class=\"built_in\">str</span>):</span><br><span class=\"line\">                file_obj = <span class=\"built_in\">open</span>(file_path, <span class=\"string\">&quot;rb&quot;</span>)</span><br><span class=\"line\">                files[name] = file_obj</span><br><span class=\"line\">                self.opened_files.append(file_obj) <span class=\"comment\">#写入列表</span></span><br><span class=\"line\">        kwargs[<span class=\"string\">&#x27;files&#x27;</span>] = files</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> kwargs.items():</span><br><span class=\"line\">            logger.info(<span class=\"string\">f&#x27;  参数内容: <span class=\"subst\">&#123;k&#125;</span>=<span class=\"subst\">&#123;v&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        res = self.sess.request(**kwargs)  <span class=\"comment\"># 发送请求  # 参数长度、内容是不确定</span></span><br><span class=\"line\">        logger.info(<span class=\"string\">&#x27;收到接口响应&#x27;</span>)</span><br><span class=\"line\">        logger.info(<span class=\"string\">f&#x27;  状态码=<span class=\"subst\">&#123;res.status_code&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        logger.info(<span class=\"string\">f&#x27;  响应头=<span class=\"subst\">&#123;res.headers&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        logger.info(<span class=\"string\">f&#x27;  响应正文=<span class=\"subst\">&#123;res.text&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> self.opened_files:</span><br><span class=\"line\">            f.close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n\n<p>测试用例代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> commons.request_utils <span class=\"keyword\">import</span> RequestUtils</span><br><span class=\"line\"><span class=\"keyword\">from</span> commons.aaa <span class=\"keyword\">import</span> to_yaml</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#g_var = &#123;&#125; #全局变量函数</span></span><br><span class=\"line\">logger = logging.getLogger(<span class=\"string\">&#x27;ddt&#x27;</span>)</span><br><span class=\"line\">ddt_create_tag = to_yaml(<span class=\"string\">&#x27;data/ddt_creat_tag.yaml&#x27;</span>)</span><br><span class=\"line\">logger.info(<span class=\"string\">f&#x27;data_ddt_create_tag=<span class=\"subst\">&#123;ddt_create_tag&#125;</span>&#x27;</span>)</span><br><span class=\"line\">ddt_edit_tag_fail = to_yaml(<span class=\"string\">&#x27;data/ddt_edit_tag_fail.yaml&#x27;</span>)</span><br><span class=\"line\">logger.info(<span class=\"string\">f&#x27;ddt_edit_tag_fail=<span class=\"subst\">&#123;ddt_edit_tag_fail&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 创建fixture，在所有用例结束后执行，用于删除标签</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.fixture(<span class=\"params\">scope=<span class=\"string\">&#x27;session&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">del_tags</span>():</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">yield</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;所有用例都执行完毕，开始删除测试数据&#x27;</span>)</span><br><span class=\"line\">    logger.info(<span class=\"string\">&#x27;所有用例都执行完毕，开始删除测试数据&#x27;</span>)</span><br><span class=\"line\">    res = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/get&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    )</span><br><span class=\"line\">    tags = res.json()[<span class=\"string\">&#x27;tags&#x27;</span>] <span class=\"comment\">#返回数据先转换为json，获取到tags列表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> tag_name <span class=\"keyword\">in</span> ddt_create_tag: <span class=\"comment\">#外层循环，遍历已经创建的标签名</span></span><br><span class=\"line\">        tagId = <span class=\"string\">&#x27;000&#x27;</span> <span class=\"comment\">#设定了一个默认值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> tag <span class=\"keyword\">in</span> tags: <span class=\"comment\">#内层循环，遍历tags列表</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> tag_name == tag[<span class=\"string\">&#x27;name&#x27;</span>]: <span class=\"comment\">#名字与创建的标签名匹配就获取id值</span></span><br><span class=\"line\">                tagId = tag[<span class=\"string\">&#x27;id&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> tagId == <span class=\"string\">&#x27;000&#x27;</span>: <span class=\"comment\">#如果是默认值就跳过本次循环</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        RequestUtils().send_request(</span><br><span class=\"line\">            method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">            url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/delete&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            json=&#123;<span class=\"string\">&quot;tag&quot;</span>: &#123;<span class=\"string\">&quot;id&quot;</span>: tagId&#125;&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.获取鉴权码access token接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_get_token</span>():</span><br><span class=\"line\">    res = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/token&quot;</span>,</span><br><span class=\"line\">        params=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;grant_type&quot;</span>: <span class=\"string\">&quot;client_credential&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;appid&quot;</span>: <span class=\"string\">&quot;wx180cd14b59813610&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;secret&quot;</span>: <span class=\"string\">&quot;0a0ac08da6958e499c4f8695db3f7697&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    access_token = res.json()[<span class=\"string\">&quot;access_token&quot;</span>]</span><br><span class=\"line\">    RequestUtils.pubilc_params[<span class=\"string\">&#x27;access_token&#x27;</span>] = access_token</span><br><span class=\"line\">    <span class=\"comment\"># g_var[&quot;access_token&quot;]= access_token # 保存变量，为了其他接口使用</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> access_token != <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.获取公众号已创建的标签接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_get_tags</span>():</span><br><span class=\"line\">    res = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/get&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    tags = res.json()[<span class=\"string\">&quot;tags&quot;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> tags</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> tags[<span class=\"number\">0</span>][<span class=\"string\">&#x27;id&#x27;</span>] == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.创建标签接口</span></span><br><span class=\"line\"><span class=\"comment\"># 参数化</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;name&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ddt_create_tag</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_create_tags</span>(<span class=\"params\">name,del_tags</span>):</span><br><span class=\"line\">    timestamp = <span class=\"built_in\">str</span>(time.time())</span><br><span class=\"line\">    res = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/create&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        json=&#123;<span class=\"string\">&quot;tag&quot;</span>: &#123;<span class=\"string\">&quot;name&quot;</span>: name&#125;&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    s = res.text.replace(<span class=\"string\">&quot;\\\\\\\\&quot;</span>, <span class=\"string\">&quot;\\\\&quot;</span>)</span><br><span class=\"line\">    res_json = json.loads(s)  <span class=\"comment\"># 替换后手动进行反序列化，将字符串转换为json</span></span><br><span class=\"line\">    tag_name = res_json[<span class=\"string\">&quot;tag&quot;</span>][<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\">    tag_id = res_json[<span class=\"string\">&quot;tag&quot;</span>][<span class=\"string\">&#x27;id&#x27;</span>]</span><br><span class=\"line\">    g_var[<span class=\"string\">&#x27;tag_id&#x27;</span>] = tag_id</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> tag_name == name</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(tag_id, <span class=\"built_in\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.编辑标签接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_edit_tags</span>():</span><br><span class=\"line\">    timestamp = <span class=\"built_in\">str</span>(time.time())</span><br><span class=\"line\">    res = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/update&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        json=&#123;<span class=\"string\">&quot;tag&quot;</span>: &#123;<span class=\"string\">&quot;id&quot;</span>: g_var[<span class=\"string\">&#x27;tag_id&#x27;</span>], <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;学习&quot;</span> + timestamp&#125;&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errcode&#x27;</span>] == <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errmsg&#x27;</span>] == <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;name,code&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ddt_edit_tag_fail</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_edit_tags_fail</span>(<span class=\"params\">name,code</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    res = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/update&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        json=&#123;<span class=\"string\">&quot;tag&quot;</span>: &#123;<span class=\"string\">&quot;id&quot;</span>: g_var[<span class=\"string\">&#x27;tag_id&#x27;</span>], <span class=\"string\">&quot;name&quot;</span>: name &#125;&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errcode&#x27;</span>] == code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.删除标签接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_del_tags</span>():</span><br><span class=\"line\">    res = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/tags/delete&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        json=&#123;<span class=\"string\">&quot;tag&quot;</span>: &#123;<span class=\"string\">&quot;id&quot;</span>: g_var[<span class=\"string\">&quot;tag_id&quot;</span>]&#125;&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errcode&#x27;</span>] == <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.json()[<span class=\"string\">&#x27;errmsg&#x27;</span>] == <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.文件上传接口</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_file_upload</span>():</span><br><span class=\"line\">    res = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/media/uploadimg&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        files=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;media&quot;</span>: <span class=\"string\">&quot;data/shu.png&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res.status_code == <span class=\"number\">200</span></span><br><span class=\"line\">    url = res.json()[<span class=\"string\">&#x27;url&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;http&#x27;</span> <span class=\"keyword\">in</span> url</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;mmbiz.qpic.cn&#x27;</span> <span class=\"keyword\">in</span> url</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"六、接口自动化测试框架之电商接口项目实战（day18）\"><a href=\"#六、接口自动化测试框架之电商接口项目实战（day18）\" class=\"headerlink\" title=\"六、接口自动化测试框架之电商接口项目实战（day18）\"></a>六、接口自动化测试框架之电商接口项目实战（day18）</h1><h2 id=\"1-电商接口项目实战\"><a href=\"#1-电商接口项目实战\" class=\"headerlink\" title=\"1. 电商接口项目实战\"></a>1. 电商接口项目实战</h2><h3 id=\"1-接口约定\"><a href=\"#1-接口约定\" class=\"headerlink\" title=\"1. 接口约定\"></a>1. 接口约定</h3><p><strong>基础URL</strong>：<br><code>http://116.62.63.211/shop/api.php</code>  </p>\n<p><strong>查询字符串参数</strong>：  </p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>说明</th>\n<th>必填</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>s</code></td>\n<td>接口名称</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>application</code></td>\n<td>请求应用（web&#x2F;app）</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>application_client_type</code></td>\n<td>客户端类型（ios&#x2F;android&#x2F;weixin&#x2F;alipay）</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>token</code></td>\n<td>身份凭据</td>\n<td>否</td>\n</tr>\n<tr>\n<td><code>ajax</code></td>\n<td>Web端异步请求标识</td>\n<td>否</td>\n</tr>\n</tbody></table>\n<p><strong>参数</strong>：JSON  </p>\n<p><strong>响应</strong>：JSON（包含字段：<code>code</code>, <code>msg</code>, <code>data</code>）  </p>\n<hr>\n<h3 id=\"2-获取Token（其他用例的依赖）\"><a href=\"#2-获取Token（其他用例的依赖）\" class=\"headerlink\" title=\"2. 获取Token（其他用例的依赖）\"></a>2. 获取Token（其他用例的依赖）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> commons.request_utils <span class=\"keyword\">import</span> RequestUtils</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_get_token</span>():</span><br><span class=\"line\">    resp = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;http://101.34.221.219:8010/api.php&quot;</span>,</span><br><span class=\"line\">        params=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;s&quot;</span>: <span class=\"string\">&quot;user/login&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;application&quot;</span>: <span class=\"string\">&quot;app&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;application_client_type&quot;</span>: <span class=\"string\">&quot;ios&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        json=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;accounts&quot;</span>: <span class=\"string\">&quot;beifan_1205&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;pwd&quot;</span>: <span class=\"string\">&quot;beifan_1205&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;username&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    code = resp.json()[<span class=\"string\">&#x27;code&#x27;</span>]</span><br><span class=\"line\">    token = resp.json()[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;token&#x27;</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">assert</span> code == <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> token != <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 设置全局公共参数</span></span><br><span class=\"line\">    RequestUtils.public_params = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;application&quot;</span>: <span class=\"string\">&quot;app&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;application_client_type&quot;</span>: <span class=\"string\">&quot;ios&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;token&quot;</span>: token</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-商品收藏功能测试用例\"><a href=\"#3-商品收藏功能测试用例\" class=\"headerlink\" title=\"3. 商品收藏功能测试用例\"></a>3. 商品收藏功能测试用例</h3><h4 id=\"1-收藏商品\"><a href=\"#1-收藏商品\" class=\"headerlink\" title=\"(1) 收藏商品\"></a>(1) 收藏商品</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_goods_favor</span>():</span><br><span class=\"line\">    resp = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;http://101.34.221.219:8010/api.php&quot;</span>,</span><br><span class=\"line\">        params=&#123;<span class=\"string\">&quot;s&quot;</span>: <span class=\"string\">&quot;goods/favor&quot;</span>&#125;,</span><br><span class=\"line\">        json=&#123;<span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">2</span>, <span class=\"string\">&quot;is_mandatory_favor&quot;</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    code = resp.json()[<span class=\"string\">&#x27;code&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> code == <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-验证收藏列表\"><a href=\"#2-验证收藏列表\" class=\"headerlink\" title=\"(2) 验证收藏列表\"></a>(2) 验证收藏列表</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_usergoodsfavor_index_after_favor</span>():</span><br><span class=\"line\">    resp = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;http://101.34.221.219:8010/api.php&quot;</span>,</span><br><span class=\"line\">        params=&#123;<span class=\"string\">&quot;s&quot;</span>: <span class=\"string\">&quot;usergoodsfavor/index&quot;</span>&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    code = resp.json()[<span class=\"string\">&#x27;code&#x27;</span>]</span><br><span class=\"line\">    text = resp.text</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> code == <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;&quot;goods_id&quot;:&quot;2&quot;&#x27;</span> <span class=\"keyword\">in</span> text  <span class=\"comment\"># 验证商品ID=2存在</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-取消收藏\"><a href=\"#3-取消收藏\" class=\"headerlink\" title=\"(3) 取消收藏\"></a>(3) 取消收藏</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_usergoodsfavor_cancel</span>():</span><br><span class=\"line\">    resp = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;http://101.34.221.219:8010/api.php&quot;</span>,</span><br><span class=\"line\">        params=&#123;<span class=\"string\">&quot;s&quot;</span>: <span class=\"string\">&quot;usergoodsfavor/cancel&quot;</span>&#125;,</span><br><span class=\"line\">        json=&#123;<span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;2&quot;</span>&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    code = resp.json()[<span class=\"string\">&#x27;code&#x27;</span>]</span><br><span class=\"line\">    msg = resp.json()[<span class=\"string\">&#x27;msg&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> code == <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> msg == <span class=\"string\">&#x27;取消成功&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-验证取消后收藏列表\"><a href=\"#4-验证取消后收藏列表\" class=\"headerlink\" title=\"(4) 验证取消后收藏列表\"></a>(4) 验证取消后收藏列表</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_usergoodsfavor_index_after_cancel</span>():</span><br><span class=\"line\">    resp = RequestUtils().send_request(</span><br><span class=\"line\">        method=<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        url=<span class=\"string\">&quot;http://101.34.221.219:8010/api.php&quot;</span>,</span><br><span class=\"line\">        params=&#123;<span class=\"string\">&quot;s&quot;</span>: <span class=\"string\">&quot;usergoodsfavor/index&quot;</span>&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    code = resp.json()[<span class=\"string\">&#x27;code&#x27;</span>]</span><br><span class=\"line\">    text = resp.text</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> code == <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;&quot;goods_id&quot;:&quot;2&quot;&#x27;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> text  <span class=\"comment\"># 验证商品ID=2已移除</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"项目技术栈总结\"><a href=\"#项目技术栈总结\" class=\"headerlink\" title=\"项目技术栈总结\"></a>项目技术栈总结</h2><table>\n<thead>\n<tr>\n<th>技术</th>\n<th>应用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Python</td>\n<td>基础编程语言</td>\n</tr>\n<tr>\n<td>Pytest</td>\n<td>测试框架管理用例</td>\n</tr>\n<tr>\n<td>Requests</td>\n<td>发送HTTP请求</td>\n</tr>\n<tr>\n<td>YAML</td>\n<td>数据驱动测试</td>\n</tr>\n<tr>\n<td>Logging</td>\n<td>生成测试日志</td>\n</tr>\n<tr>\n<td>Allure</td>\n<td>生成可视化测试报告</td>\n</tr>\n<tr>\n<td>Fixture</td>\n<td>清理测试数据</td>\n</tr>\n<tr>\n<td>变量接口关联</td>\n<td>Token全局共享</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"python基础","date":"2023-05-19T07:00:17.000Z","_content":"\n安装-day1\n\n# Python基础语法及数据类型常用的方法（day2）\n\n## 1. 注释的基本使用\n\n**注释的含义：**  \n- 注释的作用是让代码更加具备可读性，对代码进行解释说明的文字  \n- 如果想让代码不参与程序的内存，那么可以将代码进行注释  \n- 被注释的代码和解释性说明的文字信息都不会参与程序的运行  \n\n**注释的使用：**  \n- **单行注释**  \n  - 使用符号：`# 注释的相关描述文字信息`  \n  - **快捷键**: `Ctrl + /`  \n- **多行注释**  \n  - 使用符号：`\"\"\" 被多行注释的相关内容 \"\"\"`  \n  - 没有快捷键  \n  - 使用多行注释的引号，可以是单引号也可以是双引号，前后都是3个单/双引号即可  \n\n**代码演示：**  \n```python\n# 单行注释：输出666  \nprint(666)  \n\n# 单行注释：输出888  \nprint(888)  \n\n# 不想让代码参与程序的执行，那么可以将代码注释掉  \n# print(999)  # 快捷键: Ctrl + /  \n\n# 使用多行注释  \n\"\"\"  \nprint(1)  \nprint(1)  \n\"\"\"  \n\n# 使用3个单引号  \n'''  \nprint(2)  \nprint(2)  \nprint(2)  \n'''  \n\n# 一般多行注释比较少用，因为单行注释可以起到多行注释的效果  \n#  \n# print(3)  \n# print(3)  \n# print(3)  \n# print(3)  \n```\n\n**注意点：**  \n- 多行注释的符号不管是单引号还是双引号，全部要使用英文状态下的符号  \n- Python中所有需要使用的特殊符号都是英文状态下，不能使用中文符号  \n\n---\n\n## 2. 变量的定义和使用\n\n### 变量的概念：  \n- 变量就是用来存储数据的  \n- 变量的作用就是用来储存不同类型的数据  \n- 变量的值可以一直变化或者被覆盖  \n\n### 变量的基本定义和使用代码演示：  \n```python\n# 变量需要取名字：变量名  \n# 变量是通过等于号进行赋值，把等号右边的实际值赋值给等号左边变量名  \nnum = 666  \nnum2 = 888  \n\n# 对变量进行输出，输出对应的变量名中储存的实际值  \nprint(num)  # 666  \nprint(num2) # 888  \n\n# 变量是可以重复赋值，以及覆盖  \nprint(\"-\" * 100)  \nnum = 777  \nprint(num)  # 777  \n\n# 注意点：在使用变量之前的最后一次赋值为变量的实际值  \nnum = 999  \nprint(num2) # 888  \n```\n\n### 变量的数据类型：  \n```python\n# 如何查看变量的数据类型：使用type内建函数进行查看  \n# 内建函数：实现某种特定功能就叫做函数，Python自带的函数叫做内建函数  \n# print(), type()都是属于内建函数具有某种功能  \n\n# 整数类型  \nnum = 100  \n# 浮点数类型  \nnum2 = 3.14  \nprint(type(num))   # <class 'int'> 代表整数类型  \nprint(type(num2))  # <class 'float'> 代表浮点数类型（小数类型）  \n\n# 布尔类型  \n# 是两个关键字分别是：True默认代表数字：1,和False默认代表数字：0  \n# 关键字：Python中已经取好的变量名，就叫做关键字，也具备某种特殊的含义  \nprint(True)  \nprint(False)  \nprint(type(True))   # <class 'bool'>  \nprint(type(False))  # <class 'bool'>  \nprint(True + True)   # 2  \nprint(True + False)  # 1  \nprint(False + True)  # 1  \nprint(False + False) # 0  \n\n# 列表：[]  \n# 列表中可以存放任何的数据类型  \nlist1 = [11, 12.34, False, True]  \nprint(len(list1))  # 4  \nprint(list1)  \nprint(type(list1))  # <class 'list'>  \n\n# 元组：()  \nt1 = (1, 2, 3, 4)  \nprint(len(t1))  # 4  \nprint(t1)  \nprint(type(t1))  # <class 'tuple'>  \n\n# 元组()默认可以不写，如果数据与数据之间隔开，那么就是元组  \nt2 = 6, 7, 8  \nprint(t2)  \nprint(type(t2))  # <class 'tuple'>  \n\n# 字典: {键:值}, 可以同时有多个键值对  \ndict1 = {\"name\": \"胡歌\"}  \nprint(dict1)  \nprint(type(dict1))  # <class 'dict'>  \n\ndict2 = {\"name\": \"胡歌\", \"name2\": \"彭子晏\", \"name3\": \"阮经天\"}  \nprint(len(dict2))  # 3:3组键值对  \nprint(dict2)  \nprint(type(dict2))  # <class 'dict'>  \n\n# 集合: {数据1,数据2}  \n# 特性: 自动去重，集合中没有重复的数据  \nset1 = {1, 2, 3}  \nprint(set1)  \nprint(type(set1))  # <class 'set'>  \n\nset2 = {1, 1, 2, 3, 12, 1, 2, 1, 2, 1, 2, 3, 4, 2, 1}  \nprint(set2)  # {1, 2, 3, 4, 12}  \nprint(len(set1))  # 3  \nprint(len(set2))  # 5  \n\n# 字符串: '字符',\"字符\",\"\"\"字符\"\"\"  \n# 字符串含义: 用引号引起来的任何一串字符就叫做字符串  \nname = '胡歌'  \nname2 = \"彭子晏\"  \nname3 = \"\"\"阮经天\"\"\"  # 在定义变量的时候三个单/双引号表示字符串，不是多行注释  \nnum4 = \"120\"  \nnum5 = '120'  \nnum6 = '''120'''  \n\nprint(len(name))    # 2  \nprint(len(name2))   # 3  \nprint(len(name3))   # 3  \nprint(len(num4))    # 3  \nprint(type(name))   # <class 'str'>  \nprint(type(name2))  # <class 'str'>  \nprint(type(name3))  # <class 'str'>  \nprint(type(num4))   # <class 'str'>  \n```\n\n**总结：**  \n* Python中常见的数据类型包括:  \n  ○ 整数类型: int  \n  ○ 浮点数类型: float  \n  ○ 布尔类型: bool  \n  ○ 列表: list  \n  ○ 元组: tuple  \n  ○ 字典: dict  \n  ○ 字符串: str  \n  ○ 集合: set  \n\n**分类：**  \n- **数字类型的数据**：整数类型，浮点数类型，布尔类型  \n- **非数字类型的数据**：字符串，列表，元组，字典，集合  \n- **容器类型数据**：字符串，列表，元组，字典，集合（容器类型里面的数据每个值叫做元素）  \n\n**内建函数：**  \n- `print()`：输出功能  \n- `type()`：查看变量的数据类型功能  \n- `len()`：查看容器类型的数据个数  \n\n---\n\n## 3. PyCharm中波浪线含义\n\n| 波浪线颜色 | 含义                   | 解决方法                    |\n| ---------- | ---------------------- | --------------------------- |\n| **黄色**   | 代码不符合PEP8书写规范 | 使用快捷键 `Ctrl + Alt + L` |\n| **绿色**   | 英文单词拼写错误       | 修正拼写错误                |\n| **红色**   | 语法错误               | 立即修正语法错误            |\n\n---\n\n## 4. 标识符的定义\n\n**标识符的含义：** Python中所有的命名都叫做标识符  \n- 变量名  \n- 函数名  \n- 类名  \n- 对象名  \n- 模块名  \n- 包名  \n- ...  \n\n### 4.1 标识符的命名规则\n- **由数字、字母、下划线组成，不能以数字开头，不能是关键字**  \n  - 关键字：Python中已经取好的名字就叫做关键字  \n  - 每个关键字都会有独特的含义  \n  - 在PyCharm中显示：橙色高亮  \n\n```python\nimport keyword  \n\n# 查看关键字列表  \nprint(keyword.kwlist)  \n# ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']  \n\nprint(len(keyword.kwlist))  # 35  \n```\n\n- **区分大小写**  \n- **不建议使用不符合规范的名字**  \n\n### 4.2 标识符命名建议\n- **见名知意**：尽量使用英文单词（如姓名：name，年龄：age）  \n- **小驼峰命名法**：第一个单词首字母小写，后续单词首字母大写（如：myName）  \n- **大驼峰命名法**：每个单词首字母都大写（类名常用，如：FirstName）  \n- **下划线命名法**：单词间用下划线连接（如：user_name）  \n\n**注意点：**  \n- 所有标识符命名唯一可以使用的符号就是 `_` 下划线  \n\n---\n\n## 5. 格式化输出\n\n**格式化输出的含义：**  \n- 按照指定的方式，拼接字符串新的内容进行输出  \n- 当输出一个字符串的同时，结合变量一起输出  \n\n### 5.1 占位符格式化输出\n```python\nname = \"蔡徐坤\"  \nage = 18  \nheight = 1.78  \n\n# 占位符类型：  \n# %s - 字符串  %d - 整数  %f - 浮点数  \nprint('我的名字是：%s' % name)  \nprint('我今年：%d岁' % age)  \n\n# 浮点数默认保留六位小数  \n# %.2f 保留两位小数  \nprint('我的身高是：%.2f米' % height)  \n\n# 多个变量同时输出  \nprint('我的名字是：%s，我今年：%d岁，我的身高是：%.2f米' % (name, age, height))  \n```\n\n### 5.2 format函数格式化输出\n```python\nname = \"蔡徐坤\"  \nage = 18  \nheight = 1.78  \n\n# 默认顺序  \nprint(\"我的名字是：{}，我今年：{}岁，我的身高是：{}米\".format(name, age, height))  \n\n# 指定变量名  \nprint(\"我的名字是：{name}，我今年：{age}岁，我的身高是：{height}米\".format(  \n    name=name, age=age, height=height  \n))  \n```\n\n---\n\n## 6. 标准输入\n\n通过 `input()` 函数接收用户输入：  \n```python\n# input在没有收到数据之前，程序会挂起  \npassword = input(\"请输入你的密码：\")  \nprint(\"您输入的密码是：\", password)  \nprint(type(password))  # <class 'str'>  \n\n# 注意：input获取的所有内容都会转为字符串  \nnum1 = input(\"请输入第一个数字：\")  \nnum2 = input(\"请输入第二个数字：\")  \nprint(f\"相加结果为：{num1 + num2}\")  # 字符串拼接（如：输入12和13得到\"1213\"）  \n\n# 转换类型示例  \nnum1 = int(input(\"请输入第一个数字：\"))  \nnum2 = int(input(\"请输入第二个数字：\"))  \nprint(f\"相加结果为：{num1 + num2}\")  # 数值相加  \n```\n\n**总结：**  \n- 使用 `input()` 时程序会挂起，不按回车不会往下执行  \n- 输入的所有数据都会转为字符串类型  \n- 需要数值计算时需手动转换类型（如 `int()`）  \n\n\n\n\n\n","source":"_posts/python学习.md","raw":"---\ntitle: python基础\ndate: 2023-05-19 15:00:17\ntags: Python\n---\n\n安装-day1\n\n# Python基础语法及数据类型常用的方法（day2）\n\n## 1. 注释的基本使用\n\n**注释的含义：**  \n- 注释的作用是让代码更加具备可读性，对代码进行解释说明的文字  \n- 如果想让代码不参与程序的内存，那么可以将代码进行注释  \n- 被注释的代码和解释性说明的文字信息都不会参与程序的运行  \n\n**注释的使用：**  \n- **单行注释**  \n  - 使用符号：`# 注释的相关描述文字信息`  \n  - **快捷键**: `Ctrl + /`  \n- **多行注释**  \n  - 使用符号：`\"\"\" 被多行注释的相关内容 \"\"\"`  \n  - 没有快捷键  \n  - 使用多行注释的引号，可以是单引号也可以是双引号，前后都是3个单/双引号即可  \n\n**代码演示：**  \n```python\n# 单行注释：输出666  \nprint(666)  \n\n# 单行注释：输出888  \nprint(888)  \n\n# 不想让代码参与程序的执行，那么可以将代码注释掉  \n# print(999)  # 快捷键: Ctrl + /  \n\n# 使用多行注释  \n\"\"\"  \nprint(1)  \nprint(1)  \n\"\"\"  \n\n# 使用3个单引号  \n'''  \nprint(2)  \nprint(2)  \nprint(2)  \n'''  \n\n# 一般多行注释比较少用，因为单行注释可以起到多行注释的效果  \n#  \n# print(3)  \n# print(3)  \n# print(3)  \n# print(3)  \n```\n\n**注意点：**  \n- 多行注释的符号不管是单引号还是双引号，全部要使用英文状态下的符号  \n- Python中所有需要使用的特殊符号都是英文状态下，不能使用中文符号  \n\n---\n\n## 2. 变量的定义和使用\n\n### 变量的概念：  \n- 变量就是用来存储数据的  \n- 变量的作用就是用来储存不同类型的数据  \n- 变量的值可以一直变化或者被覆盖  \n\n### 变量的基本定义和使用代码演示：  \n```python\n# 变量需要取名字：变量名  \n# 变量是通过等于号进行赋值，把等号右边的实际值赋值给等号左边变量名  \nnum = 666  \nnum2 = 888  \n\n# 对变量进行输出，输出对应的变量名中储存的实际值  \nprint(num)  # 666  \nprint(num2) # 888  \n\n# 变量是可以重复赋值，以及覆盖  \nprint(\"-\" * 100)  \nnum = 777  \nprint(num)  # 777  \n\n# 注意点：在使用变量之前的最后一次赋值为变量的实际值  \nnum = 999  \nprint(num2) # 888  \n```\n\n### 变量的数据类型：  \n```python\n# 如何查看变量的数据类型：使用type内建函数进行查看  \n# 内建函数：实现某种特定功能就叫做函数，Python自带的函数叫做内建函数  \n# print(), type()都是属于内建函数具有某种功能  \n\n# 整数类型  \nnum = 100  \n# 浮点数类型  \nnum2 = 3.14  \nprint(type(num))   # <class 'int'> 代表整数类型  \nprint(type(num2))  # <class 'float'> 代表浮点数类型（小数类型）  \n\n# 布尔类型  \n# 是两个关键字分别是：True默认代表数字：1,和False默认代表数字：0  \n# 关键字：Python中已经取好的变量名，就叫做关键字，也具备某种特殊的含义  \nprint(True)  \nprint(False)  \nprint(type(True))   # <class 'bool'>  \nprint(type(False))  # <class 'bool'>  \nprint(True + True)   # 2  \nprint(True + False)  # 1  \nprint(False + True)  # 1  \nprint(False + False) # 0  \n\n# 列表：[]  \n# 列表中可以存放任何的数据类型  \nlist1 = [11, 12.34, False, True]  \nprint(len(list1))  # 4  \nprint(list1)  \nprint(type(list1))  # <class 'list'>  \n\n# 元组：()  \nt1 = (1, 2, 3, 4)  \nprint(len(t1))  # 4  \nprint(t1)  \nprint(type(t1))  # <class 'tuple'>  \n\n# 元组()默认可以不写，如果数据与数据之间隔开，那么就是元组  \nt2 = 6, 7, 8  \nprint(t2)  \nprint(type(t2))  # <class 'tuple'>  \n\n# 字典: {键:值}, 可以同时有多个键值对  \ndict1 = {\"name\": \"胡歌\"}  \nprint(dict1)  \nprint(type(dict1))  # <class 'dict'>  \n\ndict2 = {\"name\": \"胡歌\", \"name2\": \"彭子晏\", \"name3\": \"阮经天\"}  \nprint(len(dict2))  # 3:3组键值对  \nprint(dict2)  \nprint(type(dict2))  # <class 'dict'>  \n\n# 集合: {数据1,数据2}  \n# 特性: 自动去重，集合中没有重复的数据  \nset1 = {1, 2, 3}  \nprint(set1)  \nprint(type(set1))  # <class 'set'>  \n\nset2 = {1, 1, 2, 3, 12, 1, 2, 1, 2, 1, 2, 3, 4, 2, 1}  \nprint(set2)  # {1, 2, 3, 4, 12}  \nprint(len(set1))  # 3  \nprint(len(set2))  # 5  \n\n# 字符串: '字符',\"字符\",\"\"\"字符\"\"\"  \n# 字符串含义: 用引号引起来的任何一串字符就叫做字符串  \nname = '胡歌'  \nname2 = \"彭子晏\"  \nname3 = \"\"\"阮经天\"\"\"  # 在定义变量的时候三个单/双引号表示字符串，不是多行注释  \nnum4 = \"120\"  \nnum5 = '120'  \nnum6 = '''120'''  \n\nprint(len(name))    # 2  \nprint(len(name2))   # 3  \nprint(len(name3))   # 3  \nprint(len(num4))    # 3  \nprint(type(name))   # <class 'str'>  \nprint(type(name2))  # <class 'str'>  \nprint(type(name3))  # <class 'str'>  \nprint(type(num4))   # <class 'str'>  \n```\n\n**总结：**  \n* Python中常见的数据类型包括:  \n  ○ 整数类型: int  \n  ○ 浮点数类型: float  \n  ○ 布尔类型: bool  \n  ○ 列表: list  \n  ○ 元组: tuple  \n  ○ 字典: dict  \n  ○ 字符串: str  \n  ○ 集合: set  \n\n**分类：**  \n- **数字类型的数据**：整数类型，浮点数类型，布尔类型  \n- **非数字类型的数据**：字符串，列表，元组，字典，集合  \n- **容器类型数据**：字符串，列表，元组，字典，集合（容器类型里面的数据每个值叫做元素）  \n\n**内建函数：**  \n- `print()`：输出功能  \n- `type()`：查看变量的数据类型功能  \n- `len()`：查看容器类型的数据个数  \n\n---\n\n## 3. PyCharm中波浪线含义\n\n| 波浪线颜色 | 含义                   | 解决方法                    |\n| ---------- | ---------------------- | --------------------------- |\n| **黄色**   | 代码不符合PEP8书写规范 | 使用快捷键 `Ctrl + Alt + L` |\n| **绿色**   | 英文单词拼写错误       | 修正拼写错误                |\n| **红色**   | 语法错误               | 立即修正语法错误            |\n\n---\n\n## 4. 标识符的定义\n\n**标识符的含义：** Python中所有的命名都叫做标识符  \n- 变量名  \n- 函数名  \n- 类名  \n- 对象名  \n- 模块名  \n- 包名  \n- ...  \n\n### 4.1 标识符的命名规则\n- **由数字、字母、下划线组成，不能以数字开头，不能是关键字**  \n  - 关键字：Python中已经取好的名字就叫做关键字  \n  - 每个关键字都会有独特的含义  \n  - 在PyCharm中显示：橙色高亮  \n\n```python\nimport keyword  \n\n# 查看关键字列表  \nprint(keyword.kwlist)  \n# ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']  \n\nprint(len(keyword.kwlist))  # 35  \n```\n\n- **区分大小写**  \n- **不建议使用不符合规范的名字**  \n\n### 4.2 标识符命名建议\n- **见名知意**：尽量使用英文单词（如姓名：name，年龄：age）  \n- **小驼峰命名法**：第一个单词首字母小写，后续单词首字母大写（如：myName）  \n- **大驼峰命名法**：每个单词首字母都大写（类名常用，如：FirstName）  \n- **下划线命名法**：单词间用下划线连接（如：user_name）  \n\n**注意点：**  \n- 所有标识符命名唯一可以使用的符号就是 `_` 下划线  \n\n---\n\n## 5. 格式化输出\n\n**格式化输出的含义：**  \n- 按照指定的方式，拼接字符串新的内容进行输出  \n- 当输出一个字符串的同时，结合变量一起输出  \n\n### 5.1 占位符格式化输出\n```python\nname = \"蔡徐坤\"  \nage = 18  \nheight = 1.78  \n\n# 占位符类型：  \n# %s - 字符串  %d - 整数  %f - 浮点数  \nprint('我的名字是：%s' % name)  \nprint('我今年：%d岁' % age)  \n\n# 浮点数默认保留六位小数  \n# %.2f 保留两位小数  \nprint('我的身高是：%.2f米' % height)  \n\n# 多个变量同时输出  \nprint('我的名字是：%s，我今年：%d岁，我的身高是：%.2f米' % (name, age, height))  \n```\n\n### 5.2 format函数格式化输出\n```python\nname = \"蔡徐坤\"  \nage = 18  \nheight = 1.78  \n\n# 默认顺序  \nprint(\"我的名字是：{}，我今年：{}岁，我的身高是：{}米\".format(name, age, height))  \n\n# 指定变量名  \nprint(\"我的名字是：{name}，我今年：{age}岁，我的身高是：{height}米\".format(  \n    name=name, age=age, height=height  \n))  \n```\n\n---\n\n## 6. 标准输入\n\n通过 `input()` 函数接收用户输入：  \n```python\n# input在没有收到数据之前，程序会挂起  \npassword = input(\"请输入你的密码：\")  \nprint(\"您输入的密码是：\", password)  \nprint(type(password))  # <class 'str'>  \n\n# 注意：input获取的所有内容都会转为字符串  \nnum1 = input(\"请输入第一个数字：\")  \nnum2 = input(\"请输入第二个数字：\")  \nprint(f\"相加结果为：{num1 + num2}\")  # 字符串拼接（如：输入12和13得到\"1213\"）  \n\n# 转换类型示例  \nnum1 = int(input(\"请输入第一个数字：\"))  \nnum2 = int(input(\"请输入第二个数字：\"))  \nprint(f\"相加结果为：{num1 + num2}\")  # 数值相加  \n```\n\n**总结：**  \n- 使用 `input()` 时程序会挂起，不按回车不会往下执行  \n- 输入的所有数据都会转为字符串类型  \n- 需要数值计算时需手动转换类型（如 `int()`）  \n\n\n\n\n\n","slug":"python学习","published":1,"updated":"2025-07-03T11:08:32.945Z","comments":1,"layout":"post","photos":[],"_id":"cmcpwe25m000r9wnj9tjc8029","content":"<p>安装-day1</p>\n<h1 id=\"Python基础语法及数据类型常用的方法（day2）\"><a href=\"#Python基础语法及数据类型常用的方法（day2）\" class=\"headerlink\" title=\"Python基础语法及数据类型常用的方法（day2）\"></a>Python基础语法及数据类型常用的方法（day2）</h1><h2 id=\"1-注释的基本使用\"><a href=\"#1-注释的基本使用\" class=\"headerlink\" title=\"1. 注释的基本使用\"></a>1. 注释的基本使用</h2><p><strong>注释的含义：</strong>  </p>\n<ul>\n<li>注释的作用是让代码更加具备可读性，对代码进行解释说明的文字  </li>\n<li>如果想让代码不参与程序的内存，那么可以将代码进行注释  </li>\n<li>被注释的代码和解释性说明的文字信息都不会参与程序的运行</li>\n</ul>\n<p><strong>注释的使用：</strong>  </p>\n<ul>\n<li><strong>单行注释</strong>  <ul>\n<li>使用符号：<code># 注释的相关描述文字信息</code>  </li>\n<li><strong>快捷键</strong>: <code>Ctrl + /</code></li>\n</ul>\n</li>\n<li><strong>多行注释</strong>  <ul>\n<li>使用符号：<code>&quot;&quot;&quot; 被多行注释的相关内容 &quot;&quot;&quot;</code>  </li>\n<li>没有快捷键  </li>\n<li>使用多行注释的引号，可以是单引号也可以是双引号，前后都是3个单&#x2F;双引号即可</li>\n</ul>\n</li>\n</ul>\n<p><strong>代码演示：</strong>  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行注释：输出666  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">666</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 单行注释：输出888  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">888</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不想让代码参与程序的执行，那么可以将代码注释掉  </span></span><br><span class=\"line\"><span class=\"comment\"># print(999)  # 快捷键: Ctrl + /  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用多行注释  </span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;  </span></span><br><span class=\"line\"><span class=\"string\">print(1)  </span></span><br><span class=\"line\"><span class=\"string\">print(1)  </span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用3个单引号  </span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;  </span></span><br><span class=\"line\"><span class=\"string\">print(2)  </span></span><br><span class=\"line\"><span class=\"string\">print(2)  </span></span><br><span class=\"line\"><span class=\"string\">print(2)  </span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一般多行注释比较少用，因为单行注释可以起到多行注释的效果  </span></span><br><span class=\"line\"><span class=\"comment\">#  </span></span><br><span class=\"line\"><span class=\"comment\"># print(3)  </span></span><br><span class=\"line\"><span class=\"comment\"># print(3)  </span></span><br><span class=\"line\"><span class=\"comment\"># print(3)  </span></span><br><span class=\"line\"><span class=\"comment\"># print(3)  </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意点：</strong>  </p>\n<ul>\n<li>多行注释的符号不管是单引号还是双引号，全部要使用英文状态下的符号  </li>\n<li>Python中所有需要使用的特殊符号都是英文状态下，不能使用中文符号</li>\n</ul>\n<hr>\n<h2 id=\"2-变量的定义和使用\"><a href=\"#2-变量的定义和使用\" class=\"headerlink\" title=\"2. 变量的定义和使用\"></a>2. 变量的定义和使用</h2><h3 id=\"变量的概念：\"><a href=\"#变量的概念：\" class=\"headerlink\" title=\"变量的概念：\"></a>变量的概念：</h3><ul>\n<li>变量就是用来存储数据的  </li>\n<li>变量的作用就是用来储存不同类型的数据  </li>\n<li>变量的值可以一直变化或者被覆盖</li>\n</ul>\n<h3 id=\"变量的基本定义和使用代码演示：\"><a href=\"#变量的基本定义和使用代码演示：\" class=\"headerlink\" title=\"变量的基本定义和使用代码演示：\"></a>变量的基本定义和使用代码演示：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 变量需要取名字：变量名  </span></span><br><span class=\"line\"><span class=\"comment\"># 变量是通过等于号进行赋值，把等号右边的实际值赋值给等号左边变量名  </span></span><br><span class=\"line\">num = <span class=\"number\">666</span>  </span><br><span class=\"line\">num2 = <span class=\"number\">888</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对变量进行输出，输出对应的变量名中储存的实际值  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(num)  <span class=\"comment\"># 666  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(num2) <span class=\"comment\"># 888  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 变量是可以重复赋值，以及覆盖  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-&quot;</span> * <span class=\"number\">100</span>)  </span><br><span class=\"line\">num = <span class=\"number\">777</span>  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(num)  <span class=\"comment\"># 777  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意点：在使用变量之前的最后一次赋值为变量的实际值  </span></span><br><span class=\"line\">num = <span class=\"number\">999</span>  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(num2) <span class=\"comment\"># 888  </span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量的数据类型：\"><a href=\"#变量的数据类型：\" class=\"headerlink\" title=\"变量的数据类型：\"></a>变量的数据类型：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如何查看变量的数据类型：使用type内建函数进行查看  </span></span><br><span class=\"line\"><span class=\"comment\"># 内建函数：实现某种特定功能就叫做函数，Python自带的函数叫做内建函数  </span></span><br><span class=\"line\"><span class=\"comment\"># print(), type()都是属于内建函数具有某种功能  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 整数类型  </span></span><br><span class=\"line\">num = <span class=\"number\">100</span>  </span><br><span class=\"line\"><span class=\"comment\"># 浮点数类型  </span></span><br><span class=\"line\">num2 = <span class=\"number\">3.14</span>  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(num))   <span class=\"comment\"># &lt;class &#x27;int&#x27;&gt; 代表整数类型  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(num2))  <span class=\"comment\"># &lt;class &#x27;float&#x27;&gt; 代表浮点数类型（小数类型）  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 布尔类型  </span></span><br><span class=\"line\"><span class=\"comment\"># 是两个关键字分别是：True默认代表数字：1,和False默认代表数字：0  </span></span><br><span class=\"line\"><span class=\"comment\"># 关键字：Python中已经取好的变量名，就叫做关键字，也具备某种特殊的含义  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span>)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span>)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">True</span>))   <span class=\"comment\"># &lt;class &#x27;bool&#x27;&gt;  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">False</span>))  <span class=\"comment\"># &lt;class &#x27;bool&#x27;&gt;  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span> + <span class=\"literal\">True</span>)   <span class=\"comment\"># 2  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span> + <span class=\"literal\">False</span>)  <span class=\"comment\"># 1  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span> + <span class=\"literal\">True</span>)  <span class=\"comment\"># 1  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span> + <span class=\"literal\">False</span>) <span class=\"comment\"># 0  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表：[]  </span></span><br><span class=\"line\"><span class=\"comment\"># 列表中可以存放任何的数据类型  </span></span><br><span class=\"line\">list1 = [<span class=\"number\">11</span>, <span class=\"number\">12.34</span>, <span class=\"literal\">False</span>, <span class=\"literal\">True</span>]  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(list1))  <span class=\"comment\"># 4  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list1)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(list1))  <span class=\"comment\"># &lt;class &#x27;list&#x27;&gt;  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 元组：()  </span></span><br><span class=\"line\">t1 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(t1))  <span class=\"comment\"># 4  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(t1)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(t1))  <span class=\"comment\"># &lt;class &#x27;tuple&#x27;&gt;  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 元组()默认可以不写，如果数据与数据之间隔开，那么就是元组  </span></span><br><span class=\"line\">t2 = <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(t2)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(t2))  <span class=\"comment\"># &lt;class &#x27;tuple&#x27;&gt;  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字典: &#123;键:值&#125;, 可以同时有多个键值对  </span></span><br><span class=\"line\">dict1 = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;胡歌&quot;</span>&#125;  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(dict1))  <span class=\"comment\"># &lt;class &#x27;dict&#x27;&gt;  </span></span><br><span class=\"line\"></span><br><span class=\"line\">dict2 = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;胡歌&quot;</span>, <span class=\"string\">&quot;name2&quot;</span>: <span class=\"string\">&quot;彭子晏&quot;</span>, <span class=\"string\">&quot;name3&quot;</span>: <span class=\"string\">&quot;阮经天&quot;</span>&#125;  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(dict2))  <span class=\"comment\"># 3:3组键值对  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict2)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(dict2))  <span class=\"comment\"># &lt;class &#x27;dict&#x27;&gt;  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 集合: &#123;数据1,数据2&#125;  </span></span><br><span class=\"line\"><span class=\"comment\"># 特性: 自动去重，集合中没有重复的数据  </span></span><br><span class=\"line\">set1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(set1))  <span class=\"comment\"># &lt;class &#x27;set&#x27;&gt;  </span></span><br><span class=\"line\"></span><br><span class=\"line\">set2 = &#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(set2)  <span class=\"comment\"># &#123;1, 2, 3, 4, 12&#125;  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(set1))  <span class=\"comment\"># 3  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(set2))  <span class=\"comment\"># 5  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串: &#x27;字符&#x27;,&quot;字符&quot;,&quot;&quot;&quot;字符&quot;&quot;&quot;  </span></span><br><span class=\"line\"><span class=\"comment\"># 字符串含义: 用引号引起来的任何一串字符就叫做字符串  </span></span><br><span class=\"line\">name = <span class=\"string\">&#x27;胡歌&#x27;</span>  </span><br><span class=\"line\">name2 = <span class=\"string\">&quot;彭子晏&quot;</span>  </span><br><span class=\"line\">name3 = <span class=\"string\">&quot;&quot;&quot;阮经天&quot;&quot;&quot;</span>  <span class=\"comment\"># 在定义变量的时候三个单/双引号表示字符串，不是多行注释  </span></span><br><span class=\"line\">num4 = <span class=\"string\">&quot;120&quot;</span>  </span><br><span class=\"line\">num5 = <span class=\"string\">&#x27;120&#x27;</span>  </span><br><span class=\"line\">num6 = <span class=\"string\">&#x27;&#x27;&#x27;120&#x27;&#x27;&#x27;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(name))    <span class=\"comment\"># 2  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(name2))   <span class=\"comment\"># 3  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(name3))   <span class=\"comment\"># 3  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(num4))    <span class=\"comment\"># 3  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(name))   <span class=\"comment\"># &lt;class &#x27;str&#x27;&gt;  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(name2))  <span class=\"comment\"># &lt;class &#x27;str&#x27;&gt;  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(name3))  <span class=\"comment\"># &lt;class &#x27;str&#x27;&gt;  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(num4))   <span class=\"comment\"># &lt;class &#x27;str&#x27;&gt;  </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>  </p>\n<ul>\n<li>Python中常见的数据类型包括:<br>○ 整数类型: int<br>○ 浮点数类型: float<br>○ 布尔类型: bool<br>○ 列表: list<br>○ 元组: tuple<br>○ 字典: dict<br>○ 字符串: str<br>○ 集合: set</li>\n</ul>\n<p><strong>分类：</strong>  </p>\n<ul>\n<li><strong>数字类型的数据</strong>：整数类型，浮点数类型，布尔类型  </li>\n<li><strong>非数字类型的数据</strong>：字符串，列表，元组，字典，集合  </li>\n<li><strong>容器类型数据</strong>：字符串，列表，元组，字典，集合（容器类型里面的数据每个值叫做元素）</li>\n</ul>\n<p><strong>内建函数：</strong>  </p>\n<ul>\n<li><code>print()</code>：输出功能  </li>\n<li><code>type()</code>：查看变量的数据类型功能  </li>\n<li><code>len()</code>：查看容器类型的数据个数</li>\n</ul>\n<hr>\n<h2 id=\"3-PyCharm中波浪线含义\"><a href=\"#3-PyCharm中波浪线含义\" class=\"headerlink\" title=\"3. PyCharm中波浪线含义\"></a>3. PyCharm中波浪线含义</h2><table>\n<thead>\n<tr>\n<th>波浪线颜色</th>\n<th>含义</th>\n<th>解决方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>黄色</strong></td>\n<td>代码不符合PEP8书写规范</td>\n<td>使用快捷键 <code>Ctrl + Alt + L</code></td>\n</tr>\n<tr>\n<td><strong>绿色</strong></td>\n<td>英文单词拼写错误</td>\n<td>修正拼写错误</td>\n</tr>\n<tr>\n<td><strong>红色</strong></td>\n<td>语法错误</td>\n<td>立即修正语法错误</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"4-标识符的定义\"><a href=\"#4-标识符的定义\" class=\"headerlink\" title=\"4. 标识符的定义\"></a>4. 标识符的定义</h2><p><strong>标识符的含义：</strong> Python中所有的命名都叫做标识符  </p>\n<ul>\n<li>变量名  </li>\n<li>函数名  </li>\n<li>类名  </li>\n<li>对象名  </li>\n<li>模块名  </li>\n<li>包名  </li>\n<li>…</li>\n</ul>\n<h3 id=\"4-1-标识符的命名规则\"><a href=\"#4-1-标识符的命名规则\" class=\"headerlink\" title=\"4.1 标识符的命名规则\"></a>4.1 标识符的命名规则</h3><ul>\n<li><strong>由数字、字母、下划线组成，不能以数字开头，不能是关键字</strong>  <ul>\n<li>关键字：Python中已经取好的名字就叫做关键字  </li>\n<li>每个关键字都会有独特的含义  </li>\n<li>在PyCharm中显示：橙色高亮</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> keyword  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看关键字列表  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(keyword.kwlist)  </span><br><span class=\"line\"><span class=\"comment\"># [&#x27;False&#x27;, &#x27;None&#x27;, &#x27;True&#x27;, &#x27;and&#x27;, &#x27;as&#x27;, &#x27;assert&#x27;, &#x27;async&#x27;, &#x27;await&#x27;, &#x27;break&#x27;, &#x27;class&#x27;, &#x27;continue&#x27;, &#x27;def&#x27;, &#x27;del&#x27;, &#x27;elif&#x27;, &#x27;else&#x27;, &#x27;except&#x27;, &#x27;finally&#x27;, &#x27;for&#x27;, &#x27;from&#x27;, &#x27;global&#x27;, &#x27;if&#x27;, &#x27;import&#x27;, &#x27;in&#x27;, &#x27;is&#x27;, &#x27;lambda&#x27;, &#x27;nonlocal&#x27;, &#x27;not&#x27;, &#x27;or&#x27;, &#x27;pass&#x27;, &#x27;raise&#x27;, &#x27;return&#x27;, &#x27;try&#x27;, &#x27;while&#x27;, &#x27;with&#x27;, &#x27;yield&#x27;]  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(keyword.kwlist))  <span class=\"comment\"># 35  </span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>区分大小写</strong>  </li>\n<li><strong>不建议使用不符合规范的名字</strong></li>\n</ul>\n<h3 id=\"4-2-标识符命名建议\"><a href=\"#4-2-标识符命名建议\" class=\"headerlink\" title=\"4.2 标识符命名建议\"></a>4.2 标识符命名建议</h3><ul>\n<li><strong>见名知意</strong>：尽量使用英文单词（如姓名：name，年龄：age）  </li>\n<li><strong>小驼峰命名法</strong>：第一个单词首字母小写，后续单词首字母大写（如：myName）  </li>\n<li><strong>大驼峰命名法</strong>：每个单词首字母都大写（类名常用，如：FirstName）  </li>\n<li><strong>下划线命名法</strong>：单词间用下划线连接（如：user_name）</li>\n</ul>\n<p><strong>注意点：</strong>  </p>\n<ul>\n<li>所有标识符命名唯一可以使用的符号就是 <code>_</code> 下划线</li>\n</ul>\n<hr>\n<h2 id=\"5-格式化输出\"><a href=\"#5-格式化输出\" class=\"headerlink\" title=\"5. 格式化输出\"></a>5. 格式化输出</h2><p><strong>格式化输出的含义：</strong>  </p>\n<ul>\n<li>按照指定的方式，拼接字符串新的内容进行输出  </li>\n<li>当输出一个字符串的同时，结合变量一起输出</li>\n</ul>\n<h3 id=\"5-1-占位符格式化输出\"><a href=\"#5-1-占位符格式化输出\" class=\"headerlink\" title=\"5.1 占位符格式化输出\"></a>5.1 占位符格式化输出</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;蔡徐坤&quot;</span>  </span><br><span class=\"line\">age = <span class=\"number\">18</span>  </span><br><span class=\"line\">height = <span class=\"number\">1.78</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 占位符类型：  </span></span><br><span class=\"line\"><span class=\"comment\"># %s - 字符串  %d - 整数  %f - 浮点数  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;我的名字是：%s&#x27;</span> % name)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;我今年：%d岁&#x27;</span> % age)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 浮点数默认保留六位小数  </span></span><br><span class=\"line\"><span class=\"comment\"># %.2f 保留两位小数  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;我的身高是：%.2f米&#x27;</span> % height)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多个变量同时输出  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;我的名字是：%s，我今年：%d岁，我的身高是：%.2f米&#x27;</span> % (name, age, height))  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-format函数格式化输出\"><a href=\"#5-2-format函数格式化输出\" class=\"headerlink\" title=\"5.2 format函数格式化输出\"></a>5.2 format函数格式化输出</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;蔡徐坤&quot;</span>  </span><br><span class=\"line\">age = <span class=\"number\">18</span>  </span><br><span class=\"line\">height = <span class=\"number\">1.78</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认顺序  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;我的名字是：&#123;&#125;，我今年：&#123;&#125;岁，我的身高是：&#123;&#125;米&quot;</span>.<span class=\"built_in\">format</span>(name, age, height))  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定变量名  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;我的名字是：&#123;name&#125;，我今年：&#123;age&#125;岁，我的身高是：&#123;height&#125;米&quot;</span>.<span class=\"built_in\">format</span>(  </span><br><span class=\"line\">    name=name, age=age, height=height  </span><br><span class=\"line\">))  </span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"6-标准输入\"><a href=\"#6-标准输入\" class=\"headerlink\" title=\"6. 标准输入\"></a>6. 标准输入</h2><p>通过 <code>input()</code> 函数接收用户输入：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># input在没有收到数据之前，程序会挂起  </span></span><br><span class=\"line\">password = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入你的密码：&quot;</span>)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;您输入的密码是：&quot;</span>, password)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(password))  <span class=\"comment\"># &lt;class &#x27;str&#x27;&gt;  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意：input获取的所有内容都会转为字符串  </span></span><br><span class=\"line\">num1 = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入第一个数字：&quot;</span>)  </span><br><span class=\"line\">num2 = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入第二个数字：&quot;</span>)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;相加结果为：<span class=\"subst\">&#123;num1 + num2&#125;</span>&quot;</span>)  <span class=\"comment\"># 字符串拼接（如：输入12和13得到&quot;1213&quot;）  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换类型示例  </span></span><br><span class=\"line\">num1 = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入第一个数字：&quot;</span>))  </span><br><span class=\"line\">num2 = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入第二个数字：&quot;</span>))  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;相加结果为：<span class=\"subst\">&#123;num1 + num2&#125;</span>&quot;</span>)  <span class=\"comment\"># 数值相加  </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>  </p>\n<ul>\n<li>使用 <code>input()</code> 时程序会挂起，不按回车不会往下执行  </li>\n<li>输入的所有数据都会转为字符串类型  </li>\n<li>需要数值计算时需手动转换类型（如 <code>int()</code>）</li>\n</ul>\n","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","cover_type":"img","excerpt":"","more":"<p>安装-day1</p>\n<h1 id=\"Python基础语法及数据类型常用的方法（day2）\"><a href=\"#Python基础语法及数据类型常用的方法（day2）\" class=\"headerlink\" title=\"Python基础语法及数据类型常用的方法（day2）\"></a>Python基础语法及数据类型常用的方法（day2）</h1><h2 id=\"1-注释的基本使用\"><a href=\"#1-注释的基本使用\" class=\"headerlink\" title=\"1. 注释的基本使用\"></a>1. 注释的基本使用</h2><p><strong>注释的含义：</strong>  </p>\n<ul>\n<li>注释的作用是让代码更加具备可读性，对代码进行解释说明的文字  </li>\n<li>如果想让代码不参与程序的内存，那么可以将代码进行注释  </li>\n<li>被注释的代码和解释性说明的文字信息都不会参与程序的运行</li>\n</ul>\n<p><strong>注释的使用：</strong>  </p>\n<ul>\n<li><strong>单行注释</strong>  <ul>\n<li>使用符号：<code># 注释的相关描述文字信息</code>  </li>\n<li><strong>快捷键</strong>: <code>Ctrl + /</code></li>\n</ul>\n</li>\n<li><strong>多行注释</strong>  <ul>\n<li>使用符号：<code>&quot;&quot;&quot; 被多行注释的相关内容 &quot;&quot;&quot;</code>  </li>\n<li>没有快捷键  </li>\n<li>使用多行注释的引号，可以是单引号也可以是双引号，前后都是3个单&#x2F;双引号即可</li>\n</ul>\n</li>\n</ul>\n<p><strong>代码演示：</strong>  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行注释：输出666  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">666</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 单行注释：输出888  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">888</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不想让代码参与程序的执行，那么可以将代码注释掉  </span></span><br><span class=\"line\"><span class=\"comment\"># print(999)  # 快捷键: Ctrl + /  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用多行注释  </span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;  </span></span><br><span class=\"line\"><span class=\"string\">print(1)  </span></span><br><span class=\"line\"><span class=\"string\">print(1)  </span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用3个单引号  </span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;  </span></span><br><span class=\"line\"><span class=\"string\">print(2)  </span></span><br><span class=\"line\"><span class=\"string\">print(2)  </span></span><br><span class=\"line\"><span class=\"string\">print(2)  </span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一般多行注释比较少用，因为单行注释可以起到多行注释的效果  </span></span><br><span class=\"line\"><span class=\"comment\">#  </span></span><br><span class=\"line\"><span class=\"comment\"># print(3)  </span></span><br><span class=\"line\"><span class=\"comment\"># print(3)  </span></span><br><span class=\"line\"><span class=\"comment\"># print(3)  </span></span><br><span class=\"line\"><span class=\"comment\"># print(3)  </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意点：</strong>  </p>\n<ul>\n<li>多行注释的符号不管是单引号还是双引号，全部要使用英文状态下的符号  </li>\n<li>Python中所有需要使用的特殊符号都是英文状态下，不能使用中文符号</li>\n</ul>\n<hr>\n<h2 id=\"2-变量的定义和使用\"><a href=\"#2-变量的定义和使用\" class=\"headerlink\" title=\"2. 变量的定义和使用\"></a>2. 变量的定义和使用</h2><h3 id=\"变量的概念：\"><a href=\"#变量的概念：\" class=\"headerlink\" title=\"变量的概念：\"></a>变量的概念：</h3><ul>\n<li>变量就是用来存储数据的  </li>\n<li>变量的作用就是用来储存不同类型的数据  </li>\n<li>变量的值可以一直变化或者被覆盖</li>\n</ul>\n<h3 id=\"变量的基本定义和使用代码演示：\"><a href=\"#变量的基本定义和使用代码演示：\" class=\"headerlink\" title=\"变量的基本定义和使用代码演示：\"></a>变量的基本定义和使用代码演示：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 变量需要取名字：变量名  </span></span><br><span class=\"line\"><span class=\"comment\"># 变量是通过等于号进行赋值，把等号右边的实际值赋值给等号左边变量名  </span></span><br><span class=\"line\">num = <span class=\"number\">666</span>  </span><br><span class=\"line\">num2 = <span class=\"number\">888</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对变量进行输出，输出对应的变量名中储存的实际值  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(num)  <span class=\"comment\"># 666  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(num2) <span class=\"comment\"># 888  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 变量是可以重复赋值，以及覆盖  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-&quot;</span> * <span class=\"number\">100</span>)  </span><br><span class=\"line\">num = <span class=\"number\">777</span>  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(num)  <span class=\"comment\"># 777  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意点：在使用变量之前的最后一次赋值为变量的实际值  </span></span><br><span class=\"line\">num = <span class=\"number\">999</span>  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(num2) <span class=\"comment\"># 888  </span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量的数据类型：\"><a href=\"#变量的数据类型：\" class=\"headerlink\" title=\"变量的数据类型：\"></a>变量的数据类型：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如何查看变量的数据类型：使用type内建函数进行查看  </span></span><br><span class=\"line\"><span class=\"comment\"># 内建函数：实现某种特定功能就叫做函数，Python自带的函数叫做内建函数  </span></span><br><span class=\"line\"><span class=\"comment\"># print(), type()都是属于内建函数具有某种功能  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 整数类型  </span></span><br><span class=\"line\">num = <span class=\"number\">100</span>  </span><br><span class=\"line\"><span class=\"comment\"># 浮点数类型  </span></span><br><span class=\"line\">num2 = <span class=\"number\">3.14</span>  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(num))   <span class=\"comment\"># &lt;class &#x27;int&#x27;&gt; 代表整数类型  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(num2))  <span class=\"comment\"># &lt;class &#x27;float&#x27;&gt; 代表浮点数类型（小数类型）  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 布尔类型  </span></span><br><span class=\"line\"><span class=\"comment\"># 是两个关键字分别是：True默认代表数字：1,和False默认代表数字：0  </span></span><br><span class=\"line\"><span class=\"comment\"># 关键字：Python中已经取好的变量名，就叫做关键字，也具备某种特殊的含义  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span>)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span>)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">True</span>))   <span class=\"comment\"># &lt;class &#x27;bool&#x27;&gt;  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">False</span>))  <span class=\"comment\"># &lt;class &#x27;bool&#x27;&gt;  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span> + <span class=\"literal\">True</span>)   <span class=\"comment\"># 2  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span> + <span class=\"literal\">False</span>)  <span class=\"comment\"># 1  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span> + <span class=\"literal\">True</span>)  <span class=\"comment\"># 1  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span> + <span class=\"literal\">False</span>) <span class=\"comment\"># 0  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表：[]  </span></span><br><span class=\"line\"><span class=\"comment\"># 列表中可以存放任何的数据类型  </span></span><br><span class=\"line\">list1 = [<span class=\"number\">11</span>, <span class=\"number\">12.34</span>, <span class=\"literal\">False</span>, <span class=\"literal\">True</span>]  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(list1))  <span class=\"comment\"># 4  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list1)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(list1))  <span class=\"comment\"># &lt;class &#x27;list&#x27;&gt;  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 元组：()  </span></span><br><span class=\"line\">t1 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(t1))  <span class=\"comment\"># 4  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(t1)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(t1))  <span class=\"comment\"># &lt;class &#x27;tuple&#x27;&gt;  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 元组()默认可以不写，如果数据与数据之间隔开，那么就是元组  </span></span><br><span class=\"line\">t2 = <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(t2)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(t2))  <span class=\"comment\"># &lt;class &#x27;tuple&#x27;&gt;  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字典: &#123;键:值&#125;, 可以同时有多个键值对  </span></span><br><span class=\"line\">dict1 = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;胡歌&quot;</span>&#125;  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(dict1))  <span class=\"comment\"># &lt;class &#x27;dict&#x27;&gt;  </span></span><br><span class=\"line\"></span><br><span class=\"line\">dict2 = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;胡歌&quot;</span>, <span class=\"string\">&quot;name2&quot;</span>: <span class=\"string\">&quot;彭子晏&quot;</span>, <span class=\"string\">&quot;name3&quot;</span>: <span class=\"string\">&quot;阮经天&quot;</span>&#125;  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(dict2))  <span class=\"comment\"># 3:3组键值对  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict2)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(dict2))  <span class=\"comment\"># &lt;class &#x27;dict&#x27;&gt;  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 集合: &#123;数据1,数据2&#125;  </span></span><br><span class=\"line\"><span class=\"comment\"># 特性: 自动去重，集合中没有重复的数据  </span></span><br><span class=\"line\">set1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(set1))  <span class=\"comment\"># &lt;class &#x27;set&#x27;&gt;  </span></span><br><span class=\"line\"></span><br><span class=\"line\">set2 = &#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(set2)  <span class=\"comment\"># &#123;1, 2, 3, 4, 12&#125;  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(set1))  <span class=\"comment\"># 3  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(set2))  <span class=\"comment\"># 5  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串: &#x27;字符&#x27;,&quot;字符&quot;,&quot;&quot;&quot;字符&quot;&quot;&quot;  </span></span><br><span class=\"line\"><span class=\"comment\"># 字符串含义: 用引号引起来的任何一串字符就叫做字符串  </span></span><br><span class=\"line\">name = <span class=\"string\">&#x27;胡歌&#x27;</span>  </span><br><span class=\"line\">name2 = <span class=\"string\">&quot;彭子晏&quot;</span>  </span><br><span class=\"line\">name3 = <span class=\"string\">&quot;&quot;&quot;阮经天&quot;&quot;&quot;</span>  <span class=\"comment\"># 在定义变量的时候三个单/双引号表示字符串，不是多行注释  </span></span><br><span class=\"line\">num4 = <span class=\"string\">&quot;120&quot;</span>  </span><br><span class=\"line\">num5 = <span class=\"string\">&#x27;120&#x27;</span>  </span><br><span class=\"line\">num6 = <span class=\"string\">&#x27;&#x27;&#x27;120&#x27;&#x27;&#x27;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(name))    <span class=\"comment\"># 2  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(name2))   <span class=\"comment\"># 3  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(name3))   <span class=\"comment\"># 3  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(num4))    <span class=\"comment\"># 3  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(name))   <span class=\"comment\"># &lt;class &#x27;str&#x27;&gt;  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(name2))  <span class=\"comment\"># &lt;class &#x27;str&#x27;&gt;  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(name3))  <span class=\"comment\"># &lt;class &#x27;str&#x27;&gt;  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(num4))   <span class=\"comment\"># &lt;class &#x27;str&#x27;&gt;  </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>  </p>\n<ul>\n<li>Python中常见的数据类型包括:<br>○ 整数类型: int<br>○ 浮点数类型: float<br>○ 布尔类型: bool<br>○ 列表: list<br>○ 元组: tuple<br>○ 字典: dict<br>○ 字符串: str<br>○ 集合: set</li>\n</ul>\n<p><strong>分类：</strong>  </p>\n<ul>\n<li><strong>数字类型的数据</strong>：整数类型，浮点数类型，布尔类型  </li>\n<li><strong>非数字类型的数据</strong>：字符串，列表，元组，字典，集合  </li>\n<li><strong>容器类型数据</strong>：字符串，列表，元组，字典，集合（容器类型里面的数据每个值叫做元素）</li>\n</ul>\n<p><strong>内建函数：</strong>  </p>\n<ul>\n<li><code>print()</code>：输出功能  </li>\n<li><code>type()</code>：查看变量的数据类型功能  </li>\n<li><code>len()</code>：查看容器类型的数据个数</li>\n</ul>\n<hr>\n<h2 id=\"3-PyCharm中波浪线含义\"><a href=\"#3-PyCharm中波浪线含义\" class=\"headerlink\" title=\"3. PyCharm中波浪线含义\"></a>3. PyCharm中波浪线含义</h2><table>\n<thead>\n<tr>\n<th>波浪线颜色</th>\n<th>含义</th>\n<th>解决方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>黄色</strong></td>\n<td>代码不符合PEP8书写规范</td>\n<td>使用快捷键 <code>Ctrl + Alt + L</code></td>\n</tr>\n<tr>\n<td><strong>绿色</strong></td>\n<td>英文单词拼写错误</td>\n<td>修正拼写错误</td>\n</tr>\n<tr>\n<td><strong>红色</strong></td>\n<td>语法错误</td>\n<td>立即修正语法错误</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"4-标识符的定义\"><a href=\"#4-标识符的定义\" class=\"headerlink\" title=\"4. 标识符的定义\"></a>4. 标识符的定义</h2><p><strong>标识符的含义：</strong> Python中所有的命名都叫做标识符  </p>\n<ul>\n<li>变量名  </li>\n<li>函数名  </li>\n<li>类名  </li>\n<li>对象名  </li>\n<li>模块名  </li>\n<li>包名  </li>\n<li>…</li>\n</ul>\n<h3 id=\"4-1-标识符的命名规则\"><a href=\"#4-1-标识符的命名规则\" class=\"headerlink\" title=\"4.1 标识符的命名规则\"></a>4.1 标识符的命名规则</h3><ul>\n<li><strong>由数字、字母、下划线组成，不能以数字开头，不能是关键字</strong>  <ul>\n<li>关键字：Python中已经取好的名字就叫做关键字  </li>\n<li>每个关键字都会有独特的含义  </li>\n<li>在PyCharm中显示：橙色高亮</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> keyword  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看关键字列表  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(keyword.kwlist)  </span><br><span class=\"line\"><span class=\"comment\"># [&#x27;False&#x27;, &#x27;None&#x27;, &#x27;True&#x27;, &#x27;and&#x27;, &#x27;as&#x27;, &#x27;assert&#x27;, &#x27;async&#x27;, &#x27;await&#x27;, &#x27;break&#x27;, &#x27;class&#x27;, &#x27;continue&#x27;, &#x27;def&#x27;, &#x27;del&#x27;, &#x27;elif&#x27;, &#x27;else&#x27;, &#x27;except&#x27;, &#x27;finally&#x27;, &#x27;for&#x27;, &#x27;from&#x27;, &#x27;global&#x27;, &#x27;if&#x27;, &#x27;import&#x27;, &#x27;in&#x27;, &#x27;is&#x27;, &#x27;lambda&#x27;, &#x27;nonlocal&#x27;, &#x27;not&#x27;, &#x27;or&#x27;, &#x27;pass&#x27;, &#x27;raise&#x27;, &#x27;return&#x27;, &#x27;try&#x27;, &#x27;while&#x27;, &#x27;with&#x27;, &#x27;yield&#x27;]  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(keyword.kwlist))  <span class=\"comment\"># 35  </span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>区分大小写</strong>  </li>\n<li><strong>不建议使用不符合规范的名字</strong></li>\n</ul>\n<h3 id=\"4-2-标识符命名建议\"><a href=\"#4-2-标识符命名建议\" class=\"headerlink\" title=\"4.2 标识符命名建议\"></a>4.2 标识符命名建议</h3><ul>\n<li><strong>见名知意</strong>：尽量使用英文单词（如姓名：name，年龄：age）  </li>\n<li><strong>小驼峰命名法</strong>：第一个单词首字母小写，后续单词首字母大写（如：myName）  </li>\n<li><strong>大驼峰命名法</strong>：每个单词首字母都大写（类名常用，如：FirstName）  </li>\n<li><strong>下划线命名法</strong>：单词间用下划线连接（如：user_name）</li>\n</ul>\n<p><strong>注意点：</strong>  </p>\n<ul>\n<li>所有标识符命名唯一可以使用的符号就是 <code>_</code> 下划线</li>\n</ul>\n<hr>\n<h2 id=\"5-格式化输出\"><a href=\"#5-格式化输出\" class=\"headerlink\" title=\"5. 格式化输出\"></a>5. 格式化输出</h2><p><strong>格式化输出的含义：</strong>  </p>\n<ul>\n<li>按照指定的方式，拼接字符串新的内容进行输出  </li>\n<li>当输出一个字符串的同时，结合变量一起输出</li>\n</ul>\n<h3 id=\"5-1-占位符格式化输出\"><a href=\"#5-1-占位符格式化输出\" class=\"headerlink\" title=\"5.1 占位符格式化输出\"></a>5.1 占位符格式化输出</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;蔡徐坤&quot;</span>  </span><br><span class=\"line\">age = <span class=\"number\">18</span>  </span><br><span class=\"line\">height = <span class=\"number\">1.78</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 占位符类型：  </span></span><br><span class=\"line\"><span class=\"comment\"># %s - 字符串  %d - 整数  %f - 浮点数  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;我的名字是：%s&#x27;</span> % name)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;我今年：%d岁&#x27;</span> % age)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 浮点数默认保留六位小数  </span></span><br><span class=\"line\"><span class=\"comment\"># %.2f 保留两位小数  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;我的身高是：%.2f米&#x27;</span> % height)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多个变量同时输出  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;我的名字是：%s，我今年：%d岁，我的身高是：%.2f米&#x27;</span> % (name, age, height))  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-format函数格式化输出\"><a href=\"#5-2-format函数格式化输出\" class=\"headerlink\" title=\"5.2 format函数格式化输出\"></a>5.2 format函数格式化输出</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;蔡徐坤&quot;</span>  </span><br><span class=\"line\">age = <span class=\"number\">18</span>  </span><br><span class=\"line\">height = <span class=\"number\">1.78</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认顺序  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;我的名字是：&#123;&#125;，我今年：&#123;&#125;岁，我的身高是：&#123;&#125;米&quot;</span>.<span class=\"built_in\">format</span>(name, age, height))  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定变量名  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;我的名字是：&#123;name&#125;，我今年：&#123;age&#125;岁，我的身高是：&#123;height&#125;米&quot;</span>.<span class=\"built_in\">format</span>(  </span><br><span class=\"line\">    name=name, age=age, height=height  </span><br><span class=\"line\">))  </span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"6-标准输入\"><a href=\"#6-标准输入\" class=\"headerlink\" title=\"6. 标准输入\"></a>6. 标准输入</h2><p>通过 <code>input()</code> 函数接收用户输入：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># input在没有收到数据之前，程序会挂起  </span></span><br><span class=\"line\">password = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入你的密码：&quot;</span>)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;您输入的密码是：&quot;</span>, password)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(password))  <span class=\"comment\"># &lt;class &#x27;str&#x27;&gt;  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意：input获取的所有内容都会转为字符串  </span></span><br><span class=\"line\">num1 = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入第一个数字：&quot;</span>)  </span><br><span class=\"line\">num2 = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入第二个数字：&quot;</span>)  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;相加结果为：<span class=\"subst\">&#123;num1 + num2&#125;</span>&quot;</span>)  <span class=\"comment\"># 字符串拼接（如：输入12和13得到&quot;1213&quot;）  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换类型示例  </span></span><br><span class=\"line\">num1 = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入第一个数字：&quot;</span>))  </span><br><span class=\"line\">num2 = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入第二个数字：&quot;</span>))  </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;相加结果为：<span class=\"subst\">&#123;num1 + num2&#125;</span>&quot;</span>)  <span class=\"comment\"># 数值相加  </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>  </p>\n<ul>\n<li>使用 <code>input()</code> 时程序会挂起，不按回车不会往下执行  </li>\n<li>输入的所有数据都会转为字符串类型  </li>\n<li>需要数值计算时需手动转换类型（如 <code>int()</code>）</li>\n</ul>\n"},{"title":"web自动化基础","date":"2025-06-30T10:15:30.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":null,"_content":"\n\n\n# 一、Web自动化前端基础及Selenium原理和环境安装\n\n## 1. API自动化和Web自动化区别\n\n- **API自动化**：  \n  - 关注数据的流动  \n  - 对数据进行设计、传输、验证  \n\n- **Web自动化**：  \n  - 围绕浏览器页面  \n  - 功能包括：  \n    - 启动、关闭网页窗口  \n    - 获取、改变窗口大小  \n    - 获取、改变网址  \n    - 点击、输入、保存  \n\n---\n\n## 2. 浏览器和前端基础\n\n### 1. 元素\n\n网页内容由HTML元素决定，HTML是标记语言，通过标签和标签的属性标记内容。  \n\n**示例HTML代码：**  \n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>网页标题</title>\n</head>\n<body>\n    输入框：<input type=\"text\">\n    <br />\n    文本框：<textarea rows=\"20\" cols=\"40\">默认值</textarea>\n    <br />\n    按钮A: <button>登录</button>\n    <br />\n    按钮B: <input type=\"button\" value=\"注册\">\n    <br />\n    <ol>\n        <li>张三</li>\n        <li>李四</li>\n        <li>王五</li>\n    </ol>\n    <br />\n    <select>\n        <option>上海</option>\n        <option>深圳</option>\n        <option>广州</option>\n    </select>\n</body>\n</html>\n```\n\n**特点：**  \n1. 标签能被浏览器识别并展示特定效果。  \n2. 标签属性与标记同等重要。  \n3. 标签可嵌套、配合，实现不同效果。  \n4. 展示效果可动态更改，不可迷信静态效果。  \n\n### 2. JavaScript\n\n决定网页的动态效果，语法与Python相似。  \n\n**示例代码：**  \n```javascript\n// 条件判断\nif (a == b) {\n    console.log('a和b相等');\n} else {\n    console.log('a和b不相等');\n}\n\n// 函数封装\nfunction func(params) {\n    if (a == b) { \n        console.log('a和b相等');\n    } else { \n        console.log('a和b不相等');\n    }\n}\n```\n\n### 3. DOM（文档对象模型）\n\nD: 文档\nO：面向对象\nM：模型\n\n将浏览器和网页内容视为对象，通过面向对象方式访问、控制。  \n\n**示例：**  \n\nwindow：浏览器窗对象\ndocment：网页内容对象\n\n```javascript\nwindow.location.href = 'https://www.baidu.com';  // 跳转网址\ndocument.body.outerHTML = '<body>你好，你的网页被黑了</body>';  // 修改网页内容\n```\n\n---\n\n## 3. Selenium\n\nSelenium是一个开源的、跨平台的、支持多语言的Web自动化测试工具。  \n\n### 1. 安装Selenium\n\n```bash\npip install selenium -U  \n```\n\n第三方\n\n```\npip install webdriver-helper==1.*  \n```\n\n### 2. 安装浏览器驱动\n\n**方式1：官方自动下载（较慢）**  \n```python\nfrom selenium import webdriver  \ndriver = webdriver.Chrome()  # 使用Chrome浏览器驱动  \n```\n\n**方式2：第三方自动下载**  \n```python\nfrom webdriver_helper import get_webdriver  \ndriver = get_webdriver('chrome')  # 使用Chrome浏览器驱动  \n```\n\n**方式3：手动下载**  \n1. 确定平台（如Windows）和浏览器版本（如120.0.6099.225）。  \n2. 从[Chrome驱动官网](https://googlechromelabs.github.io/chrome-for-testing/)下载对应驱动。  \n\n```python\nfrom selenium import webdriver\ndriver = webdriver.Chrome() # 使用chrome的浏览器驱动\n```\n\n### 3. 简单示例\n\n**手动测试步骤：**  \n1. 启动浏览器  \n2. 访问百度  \n3. 输入关键字  \n4. 点击搜索按钮  \n5. 等待  \n6. 截图  \n\n**代码实现：**  \n```python\nfrom selenium import webdriver\nimport time\n\ndriver = webdriver.Chrome()  # 1. 启动浏览器\ndriver.get(\"https://www.baidu.com\")  # 2. 访问百度\ndriver.find_element('xpath', '//*[@id=\"kw\"]').send_keys(\"北凡老师\")  # 3. 输入关键字\ndriver.find_element('xpath', '//*[@id=\"su\"]').click()  # 4. 点击搜索按钮\ntime.sleep(5)  # 5. 等待\ndriver.get_screenshot_as_file(\"page.png\")  # 6. 截图\ndriver.quit()  # 7. 关闭浏览器\n```\n\n### 4. 底层原理\n\n1. 启动浏览器驱动。  \n2. 与驱动建立连接，要求驱动启动浏览器。  \n3. 发送HTTP请求（如命令`get`+参数`百度网址`）。  \n4. 发送HTTP请求：命令（findElement）+参数（{\"using\": xpath, \"value\": //*[@id=\"su\"]}）\n5. 发送HTTP请求：命令（sendKeysToElement）+参数（...）\n6. 发送HTTP请求：命令（...）+参数（...）\n\nselenium底层原理：\n1. 启动浏览器驱动\n2. 向浏览器驱动发送HTTP请求\n3. HTTP请求，使用webdriver协议标准  \n\n可以扩展出：appium\n\n向收集发送请求，实现APP自动化\n\n\n\n# 二、Web自动化Selenium浏览器控制及元素控制\n\n**项目地址：http://101.34.221.219:8010/**\n\n---\n\n## 1. 浏览器控制\n\n### WebDriver对象基础操作\n\n#### 启动与关闭浏览器\n```python\nfrom selenium import webdriver\nimport time\n\n# 启动Chrome浏览器\ndriver = webdriver.Chrome()  \n\n# 访问百度\ndriver.get('https://www.baidu.com')  \n\n# 定位搜索框并输入关键字\ndriver.find_element('xpath', '//*[@id=\"kw\"]').send_keys(\"北凡老师\")  \n\n# 点击搜索按钮\ndriver.find_element('xpath', '//*[@id=\"su\"]').click()  \ntime.sleep(5)  # 等待5秒\n\n# 截图保存\ndriver.get_screenshot_as_file(\"page.png\")  \n\n# 关闭浏览器\ndriver.quit()  \n```\n\n**启动方式：**\n\n- 实例化：`driver = webdriver.Chrome()`  \n\n**关闭**\n\n- 销毁： `del driver`\n\n- 方法： `driver.quit()`\n\n- 自动关闭（推荐使用上下文管理器）：  \n\n  ```python\n  with webdriver.Chrome() as driver:\n      print(driver) #输出 WebDriver 对象的内存地址和基本信息\n  ```\n\n\n\n#### 窗口控制\n\n- 最大化窗口：`driver.maximize_window()`  \n- 最小化窗口：`driver.minimize_window()`  \n- 全屏窗口：`driver.fullscreen_window()`  \n- 指定窗口大小：`driver.set_window_size(2000, 600)`  \n\n#### 导航操作\n- 跳转页面：`driver.get(\"https://www.baidu.com\")`  \n- 返回上一页：`driver.back()`  \n- 前进下一页：`driver.forward()`  \n- 刷新页面：`driver.refresh()`  \n\n#### 获取页面信息\n\n**获取元素**\n\n- find_element：返回元素对象\n- find_elements：返回列表，列表中可能有多个元素对象\n\n```python\nprint(driver.title)          # 网页标题\nprint(driver.current_url)    # 网页地址\nprint(driver.page_source)    # 网页HTML源码\n\n# 截图处理（三种方式获取、处理图片内容）\nprint(driver.get_screenshot_as_base64())  # Base64编码后的二进制\nprint(driver.get_screenshot_as_png())     # 还原后的二进制\ndriver.get_screenshot_as_file(\"page.png\") # 把二进制保存到文件\n\n# 获取Cookies\nfor cookie in driver.get_cookies():\n    print(cookie)\n\n# 执行JavaScript\nts = driver.execute_script('''console.log('1111'); \nreturn localStorage.getItem('CVStringTimestamp');''') #localStorage.getItem('CVStringTimestamp为js代码\n```\n\n---\n\n## 2. 元素控制\n\n### Element对象操作\n\n#### 点击元素\n\n所有的元素都可以点击，只是点击效果不同，没有直接反馈\n\n```python\na = driver.find_element('xpath', '//*[@id=\"su\"]')  # 定位元素\na.click()  # 点击元素\n```\n\n#### 输入文本\n\n只有输入框、文本框可以输入\n\n```python\na = driver.find_element('xpath', '//*[@id=\"kw\"]')  \na.send_keys(\"beifan\")  # 输入内容\na.clear()             # 清空输入框\na.send_keys(\"bai11111111\")  # 重新输入\n```\n\n#### 文件上传\n仅适用于 `<input type=\"file\">` 元素：  \n```python\nb = driver.find_element('xpath', '//*[@id=\"form\"]/div/div[2]/div[2]/input')  \nb.send_keys(r\"C:\\Users\\admin\\Desktop\\jmeter.png\")  # 输入文件绝对路径\n```\n\n#### 获取元素信息\n```python\na = driver.find_element('xpath', '//*[@id=\"kw\"]')  # 输入框\nb = driver.find_element('xpath', '//*[@id=\"su\"]')  # 按钮\n\n# 获取元素属性\nprint(a.text)                      # 文字内容\na.screenshot(\"a.png\")              # 元素截图\nprint(a.rect)                      # 元素位置和大小（字典格式）\nprint(a.tag_name)                  # 元素标签名（如：input）\nprint(a.get_attribute(\"type\"))     # 获取属性值（如：text）\n```\n\n# 三、Web自动化元素定位及定位等待解决定位失败\n\n## 1. 元素定位方法\n\n### 基础概念\n- **定位策略 + 定位表达式**：通过特定方式（如XPath、CSS）定位元素。  \n- **返回对象**：  \n  - `find_element`：返回单个元素对象。  \n  - `find_elements`：返回元素列表。  \n\n### 示例：登录页面操作\n```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\nwith webdriver.Chrome() as driver:\n    driver.maximize_window()\n    driver.get(\"http://116.62.63.211/shop/user/loginInfo.html\")\n    # 输入账号\n    driver.find_element(By.XPATH, '/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[1]/input').send_keys(\"lyreth\")\n    # 输入密码\n    driver.find_element(By.XPATH, '/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[2]/div/input').send_keys(\"123456\")\n    # 点击登录\n    driver.find_element(By.XPATH, '/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[3]/button').click()\n    input(\"暂停执行\")  # 等待用户输入\n```\n\n---\n\n## 2. 元素定位策略\n\n过去：8种\n现在：5种\n将来：4种 （推测）\n\n### 查看代码\n\n```python\n# selenium.webdriver.common.by.By\n\nclass By:\n    \"\"\"Set of supported locator strategies.\"\"\"\n    ID = \"id\"                   # 通过id属性\n    XPATH = \"xpath\"             # 通过XPath表达式\n    LINK_TEXT = \"link text\"     # 通过超链接文本（精确匹配）\n    PARTIAL_LINK_TEXT = \"partial link text\"  # 通过超链接文本（模糊匹配）\n    NAME = \"name\"               # 通过name属性\n    TAG_NAME = \"tag name\"       # 通过标签名\n    CLASS_NAME = \"class name\"   # 通过class属性\n    CSS_SELECTOR = \"css selector\"  # 通过CSS选择器\n```\n\n```python\n# selenium.webdriver.remote.webdriver.WebDriver.find_element\n    if by == By.ID:\n        by = By.CSS_SELECTOR\n        value = f'[id=\"{value}\"]'\n    elif by == By.CLASS_NAME:\n        by = By.CSS_SELECTOR\n        value = f\".{value}\"\n    elif by == By.NAME:\n        by = By.CSS_SELECTOR\n        value = f'[name=\"{value}\"]'\n```\n\n**以下策略：不可以被CSS取而代之**\n\n- XPATH\n- LINK_TEXT\n- PARTIAL_LINK_TEXT\n\n**CSS和XPATH：**\n\n1. 开发工具\n2. 选择元素\n3. 右键复制\n\n**LINK_TEXT和PARTIAL_LINK_TEXT**\n\n- 记录A标签中的显示文本\n- 调用find_element\n\n```python\ndriver.get('http://101.34.221.219:8010/?s=user/logininfo.html')\n# driver.find_element(By.LINK_TEXT, '注册').click() # 对A标签文本内容 精确匹配\ndriver.find_element(By.PARTIAL_LINK_TEXT, '注').click() # 对A标签文本内容 模糊匹配\n```\n\n**CSS or Xpath？**\n\n- 相同点：  \n  - 网页中用一个元素，既可以被CSS定位，也可以被XPATH定位\n  - \n    在Chrome底层，CSS选择器和XPATH都是通过JS实现\n- 不同点：\n  - CSS选择器在所有的浏览器中被支持，执行速度有保障  \n  - CSS无法完成复杂的元素定位（比如：实现LINK_TEXT、定位到父元素），往往需要JS配合\n\n**示例：文本匹配**  \n```python\ndriver.find_element(By.LINK_TEXT, '注册').click()       # 精确匹配\ndriver.find_element(By.PARTIAL_LINK_TEXT, '注').click()  # 模糊匹配\n```\n\n---\n\n## 3. XPath语法详解\n\nXPATH 是XML的查询语言，支持逻辑判断、函数调用\n\n### 基础语法\n\n- **路径符号**：  \n  - `/`：根路径或子节点。  \n  - `//`：任意层级。  \n  - `..`：父节点。  \n- **条件限定**：  \n  - `[@attr=\"value\"]`：按属性筛选。  \n  - `[n]`：按位置选择。  \n\n**示例**  \n```xpath\n/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[1]/input  # 绝对路径\n//input[@name=\"accounts\"]                                             # 相对路径\n//*[contains(text(), \"登\")]                                           # 文本包含\n```\n\n### 常用函数\n- `text()`：匹配元素文本。  \n\n  ```xpath\n  //a[text()=\"登录\"] 等同于 LINK_TEXT\n  ```\n\n  `contains()`：判断文本是否包含指定内容。  \n\n  ```xpath\n  //*[contains(text(),\"登\")] 等同于 PARTIAL_LINK_TEXT\n  ```\n\n- `starts-with()`：判断文本是否以指定内容开头。  \n\n  ```xpath\n  //*[starts-with(text(),\"登\")]\n  ```\n\n不是所有的XPATH函数都被浏览器支持\n\n---\n\n## 4. 元素定位失败原因及解决方案\n\n### 常见原因\n\n1. **元素不存在**：尚未加载或已经消失\n\n   ex：弹出的提示框\n\n   解决方案：添加等待（如`time.sleep`，`input(\"暂停执行\")`或`WebDriverWait`）。  \n\n   ```python\n   #码尚商城的登录成功提示框\n   with get_webdriver('chrome') as driver:\n       # 访问登录页面\n       driver.get('http://116.62.63.211/shop/user/loginInfo.html')\n       # 定位账号输入框\n       driver.find_element(By.XPATH, '/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[1]/input').send_keys(\n           \"lyreth\")\n       # 定位密码输入框\n       driver.find_element(By.XPATH, '/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[2]/div/input').send_keys(\n           \"123456\")\n       # 点击登录按钮                   /html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[3]/button\n       driver.find_element(By.XPATH, '/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[3]/button').click()\n       # / html / body / div[10] / div / p\n       time.sleep(1)\n       el = driver.find_element(By.XPATH, '/html/body/div[10]/div/p')\n       print(el.text)\n       input()\n   ```\n\n   \n\n2. **元素存在，定位不到**：\n\n   ex:id发生变化\n\n   解决方案：手动写Xpath路径\n\n   ```python\n   with get_webdriver() as driver:\n       # driver.maximize_window()\n       driver.get('https://element-plus.org/zh-CN/component/form.html#%E5%85%B8%E5%9E%8B%E8%A1%A8%E5%8D%95')\n       # input(\"暂停执行\")\n       # //*[@id=\"el-id-6164-140\"] //*[@id=\"el-id-6722-140\"]\n       el = driver.find_element(By.XPATH, '//*[@id=\"page-content\"]/div/div/div[1]/div/div[2]/div[1]/form/div[1]/div/div/div/input') # no such element:\n       el.send_keys(\"123\")\n       input(\"暂停执行\") # 等待输入\n   ```\n\n3. **定位成功，不能交互**：被遮挡\n\n   ```python\n   with get_webdriver() as driver:\n   \n       driver.get('http://116.62.63.211/shop/goods/index/id/5.html')\n       el = driver.find_element(By.XPATH,'/html/body/div[4]/div[2]/div[2]/div/div[3]/div[2]/button[1]') # no such element:\n       el.click() # 可以成功，但会产生遮挡\n       el = driver.find_element(By.LINK_TEXT, '注册')\n       # el.click() # 失败\n       driver.execute_script(\"arguments[0].click()\", el) # js模拟点击 arguments[0]表示传入参数的第一个，el表示传入的参数，此时el被注册覆盖，因此传入的是注册按钮\n       input(\"暂停执行\") # 等待输入\n   ```\n\n   \n\n4. **可以交互，没有效果**：元素内容、状态不对\n\n   ```python\n   with get_webdriver() as driver:\n       driver.maximize_window()\n       driver.get('https://element-plus.org/zh-CN/component/checkbox.html#%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95')\n       el_a = driver.find_element(By.XPATH,'//*[@id=\"page-content\"]/div/div/div[1]/div/div[1]/div[1]/div[4]/label[1]/span[1]/input') # no such element:\n       el_b = driver.find_element(By.XPATH,'//*[@id=\"page-content\"]/div/div/div[1]/div/div[1]/div[1]/div[4]/label[1]/span[2]')\n       el_b.click() # 不报错，但没效果\n       input(\"暂停执行\") # 等待输入\n       driver.execute_script('''arguments[0].removeAttribute(\"disabled\")''', el_a)\n       # 修改元素状态\n       el_b.click() # 不报错，有效果\n       input(\"暂停执行\") # 等待输入\n   ```\n\n   \n\n​\t\n\n\n\n\n\n1. **定位表达式错误**：  \n   - 解决方案：使用开发者工具验证XPath/CSS。  \n2. **元素被遮挡**：  \n   - 解决方案：通过JavaScript绕过遮挡（如`execute_script(\"arguments[0].click()\", element)`）。  \n3. **元素状态无效**：  \n   - 解决方案：修改元素属性（如移除`disabled`状态）。  \n\n**示例：处理遮挡和状态问题**  \n```python\n# 通过JS点击被遮挡元素\nel = driver.find_element(By.LINK_TEXT, '注册')\ndriver.execute_script(\"arguments[0].click()\", el)\n\n# 移除禁用状态并操作\nel_a = driver.find_element(By.XPATH, '//input[@disabled]')\ndriver.execute_script('arguments[0].removeAttribute(\"disabled\")', el_a)\nel_a.send_keys(\"123\")\n```\n\n---\n\n## 5. 最佳实践\n- **优先使用相对XPath**：避免因页面结构调整导致定位失败。  \n- **结合显式等待**：确保元素加载完成后再操作。  \n- **简化定位表达式**：如`//input[@name=\"accounts\"]`优于长绝对路径。  \n\n**总结**：合理选择定位策略，结合等待和JS处理复杂场景，可显著提升自动化脚本稳定性。  \n```\n```\n\n\n\n## 6. 定位等待策略\n\n元素尚未出现，或者已经消失\n\n### 1. 强制等待\n```python\ninput(\"暂停执行\") # 需要人工干预，才能恢复\ntime.sleep(5) # 暂停固定的时间，随后自动恢复执行\n```\n\n- **优点**：简单直接。\n- **缺点**：效率低，无法动态响应元素加载\n\n### 2. 隐式等待\n\n```python\ndriver.implicitly_wait(20)  # 全局等待最多20秒\n```\n\n- **优点**：提前出现，提前结束等待，全局生效。\n- **缺点**：仅判断元素是否存在，灵活性差。\n\n### 3. 显式等待（推荐）\n\n```python\ndef func(d):\n    print('显示等待，正在重试...')\n    el = driver.find_element(By.XPATH, '//p[@class=\"prompt-msg\"]')\n    if el.text:\n    \treturn el.text # 返回结果，提前结束等待\n    else:\n    \treturn False # 返回假值，继续重试\nfrom selenium.webdriver.support.wait import WebDriverWait\nmsg = WebDriverWait(driver, 10).until(func) # 函数不加括号\n# WebDriverWait，拿着 driver 不断的调用 func，把结果保存到 msg\n```\n\n简化版\n\n```python\nfrom selenium.webdriver.support.wait import WebDriverWait\nmsg = WebDriverWait(driver, 10).until(\nlambda d: driver.find_element(By.XPATH, '//p[@class=\"prompt-msg\"]').text)\n# 函数不加括号\n```\n\n- **优点**：灵活控制等待条件（如文本内容、元素属性等）。\n- **缺点**：需熟悉Python和Selenium。\n\n原理：\n- 创建一个函数，被selenium调用，如果没有满足结束条件就不断重试，如果满足了就提前结束\n\n函数额外要求：\n\n1. 必须有一个参数：driver\n2. 返回值：真 或者 假\n  - 如果为真，提前结束等待\n  - 如果为假，继续重试\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/web自动化基础.md","raw":"---\ntitle: web自动化基础\ndate: 2025-06-30 18:15:30\ntags:\ncategories:\ncover:\ndescription:\n---\n\n\n\n# 一、Web自动化前端基础及Selenium原理和环境安装\n\n## 1. API自动化和Web自动化区别\n\n- **API自动化**：  \n  - 关注数据的流动  \n  - 对数据进行设计、传输、验证  \n\n- **Web自动化**：  \n  - 围绕浏览器页面  \n  - 功能包括：  \n    - 启动、关闭网页窗口  \n    - 获取、改变窗口大小  \n    - 获取、改变网址  \n    - 点击、输入、保存  \n\n---\n\n## 2. 浏览器和前端基础\n\n### 1. 元素\n\n网页内容由HTML元素决定，HTML是标记语言，通过标签和标签的属性标记内容。  \n\n**示例HTML代码：**  \n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>网页标题</title>\n</head>\n<body>\n    输入框：<input type=\"text\">\n    <br />\n    文本框：<textarea rows=\"20\" cols=\"40\">默认值</textarea>\n    <br />\n    按钮A: <button>登录</button>\n    <br />\n    按钮B: <input type=\"button\" value=\"注册\">\n    <br />\n    <ol>\n        <li>张三</li>\n        <li>李四</li>\n        <li>王五</li>\n    </ol>\n    <br />\n    <select>\n        <option>上海</option>\n        <option>深圳</option>\n        <option>广州</option>\n    </select>\n</body>\n</html>\n```\n\n**特点：**  \n1. 标签能被浏览器识别并展示特定效果。  \n2. 标签属性与标记同等重要。  \n3. 标签可嵌套、配合，实现不同效果。  \n4. 展示效果可动态更改，不可迷信静态效果。  \n\n### 2. JavaScript\n\n决定网页的动态效果，语法与Python相似。  \n\n**示例代码：**  \n```javascript\n// 条件判断\nif (a == b) {\n    console.log('a和b相等');\n} else {\n    console.log('a和b不相等');\n}\n\n// 函数封装\nfunction func(params) {\n    if (a == b) { \n        console.log('a和b相等');\n    } else { \n        console.log('a和b不相等');\n    }\n}\n```\n\n### 3. DOM（文档对象模型）\n\nD: 文档\nO：面向对象\nM：模型\n\n将浏览器和网页内容视为对象，通过面向对象方式访问、控制。  \n\n**示例：**  \n\nwindow：浏览器窗对象\ndocment：网页内容对象\n\n```javascript\nwindow.location.href = 'https://www.baidu.com';  // 跳转网址\ndocument.body.outerHTML = '<body>你好，你的网页被黑了</body>';  // 修改网页内容\n```\n\n---\n\n## 3. Selenium\n\nSelenium是一个开源的、跨平台的、支持多语言的Web自动化测试工具。  \n\n### 1. 安装Selenium\n\n```bash\npip install selenium -U  \n```\n\n第三方\n\n```\npip install webdriver-helper==1.*  \n```\n\n### 2. 安装浏览器驱动\n\n**方式1：官方自动下载（较慢）**  \n```python\nfrom selenium import webdriver  \ndriver = webdriver.Chrome()  # 使用Chrome浏览器驱动  \n```\n\n**方式2：第三方自动下载**  \n```python\nfrom webdriver_helper import get_webdriver  \ndriver = get_webdriver('chrome')  # 使用Chrome浏览器驱动  \n```\n\n**方式3：手动下载**  \n1. 确定平台（如Windows）和浏览器版本（如120.0.6099.225）。  \n2. 从[Chrome驱动官网](https://googlechromelabs.github.io/chrome-for-testing/)下载对应驱动。  \n\n```python\nfrom selenium import webdriver\ndriver = webdriver.Chrome() # 使用chrome的浏览器驱动\n```\n\n### 3. 简单示例\n\n**手动测试步骤：**  \n1. 启动浏览器  \n2. 访问百度  \n3. 输入关键字  \n4. 点击搜索按钮  \n5. 等待  \n6. 截图  \n\n**代码实现：**  \n```python\nfrom selenium import webdriver\nimport time\n\ndriver = webdriver.Chrome()  # 1. 启动浏览器\ndriver.get(\"https://www.baidu.com\")  # 2. 访问百度\ndriver.find_element('xpath', '//*[@id=\"kw\"]').send_keys(\"北凡老师\")  # 3. 输入关键字\ndriver.find_element('xpath', '//*[@id=\"su\"]').click()  # 4. 点击搜索按钮\ntime.sleep(5)  # 5. 等待\ndriver.get_screenshot_as_file(\"page.png\")  # 6. 截图\ndriver.quit()  # 7. 关闭浏览器\n```\n\n### 4. 底层原理\n\n1. 启动浏览器驱动。  \n2. 与驱动建立连接，要求驱动启动浏览器。  \n3. 发送HTTP请求（如命令`get`+参数`百度网址`）。  \n4. 发送HTTP请求：命令（findElement）+参数（{\"using\": xpath, \"value\": //*[@id=\"su\"]}）\n5. 发送HTTP请求：命令（sendKeysToElement）+参数（...）\n6. 发送HTTP请求：命令（...）+参数（...）\n\nselenium底层原理：\n1. 启动浏览器驱动\n2. 向浏览器驱动发送HTTP请求\n3. HTTP请求，使用webdriver协议标准  \n\n可以扩展出：appium\n\n向收集发送请求，实现APP自动化\n\n\n\n# 二、Web自动化Selenium浏览器控制及元素控制\n\n**项目地址：http://101.34.221.219:8010/**\n\n---\n\n## 1. 浏览器控制\n\n### WebDriver对象基础操作\n\n#### 启动与关闭浏览器\n```python\nfrom selenium import webdriver\nimport time\n\n# 启动Chrome浏览器\ndriver = webdriver.Chrome()  \n\n# 访问百度\ndriver.get('https://www.baidu.com')  \n\n# 定位搜索框并输入关键字\ndriver.find_element('xpath', '//*[@id=\"kw\"]').send_keys(\"北凡老师\")  \n\n# 点击搜索按钮\ndriver.find_element('xpath', '//*[@id=\"su\"]').click()  \ntime.sleep(5)  # 等待5秒\n\n# 截图保存\ndriver.get_screenshot_as_file(\"page.png\")  \n\n# 关闭浏览器\ndriver.quit()  \n```\n\n**启动方式：**\n\n- 实例化：`driver = webdriver.Chrome()`  \n\n**关闭**\n\n- 销毁： `del driver`\n\n- 方法： `driver.quit()`\n\n- 自动关闭（推荐使用上下文管理器）：  \n\n  ```python\n  with webdriver.Chrome() as driver:\n      print(driver) #输出 WebDriver 对象的内存地址和基本信息\n  ```\n\n\n\n#### 窗口控制\n\n- 最大化窗口：`driver.maximize_window()`  \n- 最小化窗口：`driver.minimize_window()`  \n- 全屏窗口：`driver.fullscreen_window()`  \n- 指定窗口大小：`driver.set_window_size(2000, 600)`  \n\n#### 导航操作\n- 跳转页面：`driver.get(\"https://www.baidu.com\")`  \n- 返回上一页：`driver.back()`  \n- 前进下一页：`driver.forward()`  \n- 刷新页面：`driver.refresh()`  \n\n#### 获取页面信息\n\n**获取元素**\n\n- find_element：返回元素对象\n- find_elements：返回列表，列表中可能有多个元素对象\n\n```python\nprint(driver.title)          # 网页标题\nprint(driver.current_url)    # 网页地址\nprint(driver.page_source)    # 网页HTML源码\n\n# 截图处理（三种方式获取、处理图片内容）\nprint(driver.get_screenshot_as_base64())  # Base64编码后的二进制\nprint(driver.get_screenshot_as_png())     # 还原后的二进制\ndriver.get_screenshot_as_file(\"page.png\") # 把二进制保存到文件\n\n# 获取Cookies\nfor cookie in driver.get_cookies():\n    print(cookie)\n\n# 执行JavaScript\nts = driver.execute_script('''console.log('1111'); \nreturn localStorage.getItem('CVStringTimestamp');''') #localStorage.getItem('CVStringTimestamp为js代码\n```\n\n---\n\n## 2. 元素控制\n\n### Element对象操作\n\n#### 点击元素\n\n所有的元素都可以点击，只是点击效果不同，没有直接反馈\n\n```python\na = driver.find_element('xpath', '//*[@id=\"su\"]')  # 定位元素\na.click()  # 点击元素\n```\n\n#### 输入文本\n\n只有输入框、文本框可以输入\n\n```python\na = driver.find_element('xpath', '//*[@id=\"kw\"]')  \na.send_keys(\"beifan\")  # 输入内容\na.clear()             # 清空输入框\na.send_keys(\"bai11111111\")  # 重新输入\n```\n\n#### 文件上传\n仅适用于 `<input type=\"file\">` 元素：  \n```python\nb = driver.find_element('xpath', '//*[@id=\"form\"]/div/div[2]/div[2]/input')  \nb.send_keys(r\"C:\\Users\\admin\\Desktop\\jmeter.png\")  # 输入文件绝对路径\n```\n\n#### 获取元素信息\n```python\na = driver.find_element('xpath', '//*[@id=\"kw\"]')  # 输入框\nb = driver.find_element('xpath', '//*[@id=\"su\"]')  # 按钮\n\n# 获取元素属性\nprint(a.text)                      # 文字内容\na.screenshot(\"a.png\")              # 元素截图\nprint(a.rect)                      # 元素位置和大小（字典格式）\nprint(a.tag_name)                  # 元素标签名（如：input）\nprint(a.get_attribute(\"type\"))     # 获取属性值（如：text）\n```\n\n# 三、Web自动化元素定位及定位等待解决定位失败\n\n## 1. 元素定位方法\n\n### 基础概念\n- **定位策略 + 定位表达式**：通过特定方式（如XPath、CSS）定位元素。  \n- **返回对象**：  \n  - `find_element`：返回单个元素对象。  \n  - `find_elements`：返回元素列表。  \n\n### 示例：登录页面操作\n```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\nwith webdriver.Chrome() as driver:\n    driver.maximize_window()\n    driver.get(\"http://116.62.63.211/shop/user/loginInfo.html\")\n    # 输入账号\n    driver.find_element(By.XPATH, '/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[1]/input').send_keys(\"lyreth\")\n    # 输入密码\n    driver.find_element(By.XPATH, '/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[2]/div/input').send_keys(\"123456\")\n    # 点击登录\n    driver.find_element(By.XPATH, '/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[3]/button').click()\n    input(\"暂停执行\")  # 等待用户输入\n```\n\n---\n\n## 2. 元素定位策略\n\n过去：8种\n现在：5种\n将来：4种 （推测）\n\n### 查看代码\n\n```python\n# selenium.webdriver.common.by.By\n\nclass By:\n    \"\"\"Set of supported locator strategies.\"\"\"\n    ID = \"id\"                   # 通过id属性\n    XPATH = \"xpath\"             # 通过XPath表达式\n    LINK_TEXT = \"link text\"     # 通过超链接文本（精确匹配）\n    PARTIAL_LINK_TEXT = \"partial link text\"  # 通过超链接文本（模糊匹配）\n    NAME = \"name\"               # 通过name属性\n    TAG_NAME = \"tag name\"       # 通过标签名\n    CLASS_NAME = \"class name\"   # 通过class属性\n    CSS_SELECTOR = \"css selector\"  # 通过CSS选择器\n```\n\n```python\n# selenium.webdriver.remote.webdriver.WebDriver.find_element\n    if by == By.ID:\n        by = By.CSS_SELECTOR\n        value = f'[id=\"{value}\"]'\n    elif by == By.CLASS_NAME:\n        by = By.CSS_SELECTOR\n        value = f\".{value}\"\n    elif by == By.NAME:\n        by = By.CSS_SELECTOR\n        value = f'[name=\"{value}\"]'\n```\n\n**以下策略：不可以被CSS取而代之**\n\n- XPATH\n- LINK_TEXT\n- PARTIAL_LINK_TEXT\n\n**CSS和XPATH：**\n\n1. 开发工具\n2. 选择元素\n3. 右键复制\n\n**LINK_TEXT和PARTIAL_LINK_TEXT**\n\n- 记录A标签中的显示文本\n- 调用find_element\n\n```python\ndriver.get('http://101.34.221.219:8010/?s=user/logininfo.html')\n# driver.find_element(By.LINK_TEXT, '注册').click() # 对A标签文本内容 精确匹配\ndriver.find_element(By.PARTIAL_LINK_TEXT, '注').click() # 对A标签文本内容 模糊匹配\n```\n\n**CSS or Xpath？**\n\n- 相同点：  \n  - 网页中用一个元素，既可以被CSS定位，也可以被XPATH定位\n  - \n    在Chrome底层，CSS选择器和XPATH都是通过JS实现\n- 不同点：\n  - CSS选择器在所有的浏览器中被支持，执行速度有保障  \n  - CSS无法完成复杂的元素定位（比如：实现LINK_TEXT、定位到父元素），往往需要JS配合\n\n**示例：文本匹配**  \n```python\ndriver.find_element(By.LINK_TEXT, '注册').click()       # 精确匹配\ndriver.find_element(By.PARTIAL_LINK_TEXT, '注').click()  # 模糊匹配\n```\n\n---\n\n## 3. XPath语法详解\n\nXPATH 是XML的查询语言，支持逻辑判断、函数调用\n\n### 基础语法\n\n- **路径符号**：  \n  - `/`：根路径或子节点。  \n  - `//`：任意层级。  \n  - `..`：父节点。  \n- **条件限定**：  \n  - `[@attr=\"value\"]`：按属性筛选。  \n  - `[n]`：按位置选择。  \n\n**示例**  \n```xpath\n/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[1]/input  # 绝对路径\n//input[@name=\"accounts\"]                                             # 相对路径\n//*[contains(text(), \"登\")]                                           # 文本包含\n```\n\n### 常用函数\n- `text()`：匹配元素文本。  \n\n  ```xpath\n  //a[text()=\"登录\"] 等同于 LINK_TEXT\n  ```\n\n  `contains()`：判断文本是否包含指定内容。  \n\n  ```xpath\n  //*[contains(text(),\"登\")] 等同于 PARTIAL_LINK_TEXT\n  ```\n\n- `starts-with()`：判断文本是否以指定内容开头。  \n\n  ```xpath\n  //*[starts-with(text(),\"登\")]\n  ```\n\n不是所有的XPATH函数都被浏览器支持\n\n---\n\n## 4. 元素定位失败原因及解决方案\n\n### 常见原因\n\n1. **元素不存在**：尚未加载或已经消失\n\n   ex：弹出的提示框\n\n   解决方案：添加等待（如`time.sleep`，`input(\"暂停执行\")`或`WebDriverWait`）。  \n\n   ```python\n   #码尚商城的登录成功提示框\n   with get_webdriver('chrome') as driver:\n       # 访问登录页面\n       driver.get('http://116.62.63.211/shop/user/loginInfo.html')\n       # 定位账号输入框\n       driver.find_element(By.XPATH, '/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[1]/input').send_keys(\n           \"lyreth\")\n       # 定位密码输入框\n       driver.find_element(By.XPATH, '/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[2]/div/input').send_keys(\n           \"123456\")\n       # 点击登录按钮                   /html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[3]/button\n       driver.find_element(By.XPATH, '/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[3]/button').click()\n       # / html / body / div[10] / div / p\n       time.sleep(1)\n       el = driver.find_element(By.XPATH, '/html/body/div[10]/div/p')\n       print(el.text)\n       input()\n   ```\n\n   \n\n2. **元素存在，定位不到**：\n\n   ex:id发生变化\n\n   解决方案：手动写Xpath路径\n\n   ```python\n   with get_webdriver() as driver:\n       # driver.maximize_window()\n       driver.get('https://element-plus.org/zh-CN/component/form.html#%E5%85%B8%E5%9E%8B%E8%A1%A8%E5%8D%95')\n       # input(\"暂停执行\")\n       # //*[@id=\"el-id-6164-140\"] //*[@id=\"el-id-6722-140\"]\n       el = driver.find_element(By.XPATH, '//*[@id=\"page-content\"]/div/div/div[1]/div/div[2]/div[1]/form/div[1]/div/div/div/input') # no such element:\n       el.send_keys(\"123\")\n       input(\"暂停执行\") # 等待输入\n   ```\n\n3. **定位成功，不能交互**：被遮挡\n\n   ```python\n   with get_webdriver() as driver:\n   \n       driver.get('http://116.62.63.211/shop/goods/index/id/5.html')\n       el = driver.find_element(By.XPATH,'/html/body/div[4]/div[2]/div[2]/div/div[3]/div[2]/button[1]') # no such element:\n       el.click() # 可以成功，但会产生遮挡\n       el = driver.find_element(By.LINK_TEXT, '注册')\n       # el.click() # 失败\n       driver.execute_script(\"arguments[0].click()\", el) # js模拟点击 arguments[0]表示传入参数的第一个，el表示传入的参数，此时el被注册覆盖，因此传入的是注册按钮\n       input(\"暂停执行\") # 等待输入\n   ```\n\n   \n\n4. **可以交互，没有效果**：元素内容、状态不对\n\n   ```python\n   with get_webdriver() as driver:\n       driver.maximize_window()\n       driver.get('https://element-plus.org/zh-CN/component/checkbox.html#%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95')\n       el_a = driver.find_element(By.XPATH,'//*[@id=\"page-content\"]/div/div/div[1]/div/div[1]/div[1]/div[4]/label[1]/span[1]/input') # no such element:\n       el_b = driver.find_element(By.XPATH,'//*[@id=\"page-content\"]/div/div/div[1]/div/div[1]/div[1]/div[4]/label[1]/span[2]')\n       el_b.click() # 不报错，但没效果\n       input(\"暂停执行\") # 等待输入\n       driver.execute_script('''arguments[0].removeAttribute(\"disabled\")''', el_a)\n       # 修改元素状态\n       el_b.click() # 不报错，有效果\n       input(\"暂停执行\") # 等待输入\n   ```\n\n   \n\n​\t\n\n\n\n\n\n1. **定位表达式错误**：  \n   - 解决方案：使用开发者工具验证XPath/CSS。  \n2. **元素被遮挡**：  \n   - 解决方案：通过JavaScript绕过遮挡（如`execute_script(\"arguments[0].click()\", element)`）。  \n3. **元素状态无效**：  \n   - 解决方案：修改元素属性（如移除`disabled`状态）。  \n\n**示例：处理遮挡和状态问题**  \n```python\n# 通过JS点击被遮挡元素\nel = driver.find_element(By.LINK_TEXT, '注册')\ndriver.execute_script(\"arguments[0].click()\", el)\n\n# 移除禁用状态并操作\nel_a = driver.find_element(By.XPATH, '//input[@disabled]')\ndriver.execute_script('arguments[0].removeAttribute(\"disabled\")', el_a)\nel_a.send_keys(\"123\")\n```\n\n---\n\n## 5. 最佳实践\n- **优先使用相对XPath**：避免因页面结构调整导致定位失败。  \n- **结合显式等待**：确保元素加载完成后再操作。  \n- **简化定位表达式**：如`//input[@name=\"accounts\"]`优于长绝对路径。  \n\n**总结**：合理选择定位策略，结合等待和JS处理复杂场景，可显著提升自动化脚本稳定性。  \n```\n```\n\n\n\n## 6. 定位等待策略\n\n元素尚未出现，或者已经消失\n\n### 1. 强制等待\n```python\ninput(\"暂停执行\") # 需要人工干预，才能恢复\ntime.sleep(5) # 暂停固定的时间，随后自动恢复执行\n```\n\n- **优点**：简单直接。\n- **缺点**：效率低，无法动态响应元素加载\n\n### 2. 隐式等待\n\n```python\ndriver.implicitly_wait(20)  # 全局等待最多20秒\n```\n\n- **优点**：提前出现，提前结束等待，全局生效。\n- **缺点**：仅判断元素是否存在，灵活性差。\n\n### 3. 显式等待（推荐）\n\n```python\ndef func(d):\n    print('显示等待，正在重试...')\n    el = driver.find_element(By.XPATH, '//p[@class=\"prompt-msg\"]')\n    if el.text:\n    \treturn el.text # 返回结果，提前结束等待\n    else:\n    \treturn False # 返回假值，继续重试\nfrom selenium.webdriver.support.wait import WebDriverWait\nmsg = WebDriverWait(driver, 10).until(func) # 函数不加括号\n# WebDriverWait，拿着 driver 不断的调用 func，把结果保存到 msg\n```\n\n简化版\n\n```python\nfrom selenium.webdriver.support.wait import WebDriverWait\nmsg = WebDriverWait(driver, 10).until(\nlambda d: driver.find_element(By.XPATH, '//p[@class=\"prompt-msg\"]').text)\n# 函数不加括号\n```\n\n- **优点**：灵活控制等待条件（如文本内容、元素属性等）。\n- **缺点**：需熟悉Python和Selenium。\n\n原理：\n- 创建一个函数，被selenium调用，如果没有满足结束条件就不断重试，如果满足了就提前结束\n\n函数额外要求：\n\n1. 必须有一个参数：driver\n2. 返回值：真 或者 假\n  - 如果为真，提前结束等待\n  - 如果为假，继续重试\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"web自动化基础","published":1,"updated":"2025-07-03T11:53:08.024Z","comments":1,"layout":"post","photos":[],"_id":"cmcpwe25n000u9wnj75is2m2e","content":"<h1 id=\"一、Web自动化前端基础及Selenium原理和环境安装\"><a href=\"#一、Web自动化前端基础及Selenium原理和环境安装\" class=\"headerlink\" title=\"一、Web自动化前端基础及Selenium原理和环境安装\"></a>一、Web自动化前端基础及Selenium原理和环境安装</h1><h2 id=\"1-API自动化和Web自动化区别\"><a href=\"#1-API自动化和Web自动化区别\" class=\"headerlink\" title=\"1. API自动化和Web自动化区别\"></a>1. API自动化和Web自动化区别</h2><ul>\n<li><p><strong>API自动化</strong>：  </p>\n<ul>\n<li>关注数据的流动  </li>\n<li>对数据进行设计、传输、验证</li>\n</ul>\n</li>\n<li><p><strong>Web自动化</strong>：  </p>\n<ul>\n<li>围绕浏览器页面  </li>\n<li>功能包括：  <ul>\n<li>启动、关闭网页窗口  </li>\n<li>获取、改变窗口大小  </li>\n<li>获取、改变网址  </li>\n<li>点击、输入、保存</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"2-浏览器和前端基础\"><a href=\"#2-浏览器和前端基础\" class=\"headerlink\" title=\"2. 浏览器和前端基础\"></a>2. 浏览器和前端基础</h2><h3 id=\"1-元素\"><a href=\"#1-元素\" class=\"headerlink\" title=\"1. 元素\"></a>1. 元素</h3><p>网页内容由HTML元素决定，HTML是标记语言，通过标签和标签的属性标记内容。  </p>\n<p><strong>示例HTML代码：</strong>  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>网页标题<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    输入框：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    文本框：<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">rows</span>=<span class=\"string\">&quot;20&quot;</span> <span class=\"attr\">cols</span>=<span class=\"string\">&quot;40&quot;</span>&gt;</span>默认值<span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    按钮A: <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    按钮B: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;注册&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>李四<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>王五<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>上海<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>深圳<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>广州<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>特点：</strong>  </p>\n<ol>\n<li>标签能被浏览器识别并展示特定效果。  </li>\n<li>标签属性与标记同等重要。  </li>\n<li>标签可嵌套、配合，实现不同效果。  </li>\n<li>展示效果可动态更改，不可迷信静态效果。</li>\n</ol>\n<h3 id=\"2-JavaScript\"><a href=\"#2-JavaScript\" class=\"headerlink\" title=\"2. JavaScript\"></a>2. JavaScript</h3><p>决定网页的动态效果，语法与Python相似。  </p>\n<p><strong>示例代码：</strong>  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 条件判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == b) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a和b相等&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a和b不相等&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数封装</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == b) &#123; </span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a和b相等&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a和b不相等&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-DOM（文档对象模型）\"><a href=\"#3-DOM（文档对象模型）\" class=\"headerlink\" title=\"3. DOM（文档对象模型）\"></a>3. DOM（文档对象模型）</h3><p>D: 文档<br>O：面向对象<br>M：模型</p>\n<p>将浏览器和网页内容视为对象，通过面向对象方式访问、控制。  </p>\n<p><strong>示例：</strong>  </p>\n<p>window：浏览器窗对象<br>docment：网页内容对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span> = <span class=\"string\">&#x27;https://www.baidu.com&#x27;</span>;  <span class=\"comment\">// 跳转网址</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">outerHTML</span> = <span class=\"string\">&#x27;&lt;body&gt;你好，你的网页被黑了&lt;/body&gt;&#x27;</span>;  <span class=\"comment\">// 修改网页内容</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"3-Selenium\"><a href=\"#3-Selenium\" class=\"headerlink\" title=\"3. Selenium\"></a>3. Selenium</h2><p>Selenium是一个开源的、跨平台的、支持多语言的Web自动化测试工具。  </p>\n<h3 id=\"1-安装Selenium\"><a href=\"#1-安装Selenium\" class=\"headerlink\" title=\"1. 安装Selenium\"></a>1. 安装Selenium</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install selenium -U  </span><br></pre></td></tr></table></figure>\n\n<p>第三方</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install webdriver-helper==1.*  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-安装浏览器驱动\"><a href=\"#2-安装浏览器驱动\" class=\"headerlink\" title=\"2. 安装浏览器驱动\"></a>2. 安装浏览器驱动</h3><p><strong>方式1：官方自动下载（较慢）</strong>  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver  </span><br><span class=\"line\">driver = webdriver.Chrome()  <span class=\"comment\"># 使用Chrome浏览器驱动  </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>方式2：第三方自动下载</strong>  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> webdriver_helper <span class=\"keyword\">import</span> get_webdriver  </span><br><span class=\"line\">driver = get_webdriver(<span class=\"string\">&#x27;chrome&#x27;</span>)  <span class=\"comment\"># 使用Chrome浏览器驱动  </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>方式3：手动下载</strong>  </p>\n<ol>\n<li>确定平台（如Windows）和浏览器版本（如120.0.6099.225）。  </li>\n<li>从<a href=\"https://googlechromelabs.github.io/chrome-for-testing/\">Chrome驱动官网</a>下载对应驱动。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\">driver = webdriver.Chrome() <span class=\"comment\"># 使用chrome的浏览器驱动</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-简单示例\"><a href=\"#3-简单示例\" class=\"headerlink\" title=\"3. 简单示例\"></a>3. 简单示例</h3><p><strong>手动测试步骤：</strong>  </p>\n<ol>\n<li>启动浏览器  </li>\n<li>访问百度  </li>\n<li>输入关键字  </li>\n<li>点击搜索按钮  </li>\n<li>等待  </li>\n<li>截图</li>\n</ol>\n<p><strong>代码实现：</strong>  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">driver = webdriver.Chrome()  <span class=\"comment\"># 1. 启动浏览器</span></span><br><span class=\"line\">driver.get(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)  <span class=\"comment\"># 2. 访问百度</span></span><br><span class=\"line\">driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>).send_keys(<span class=\"string\">&quot;北凡老师&quot;</span>)  <span class=\"comment\"># 3. 输入关键字</span></span><br><span class=\"line\">driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;su&quot;]&#x27;</span>).click()  <span class=\"comment\"># 4. 点击搜索按钮</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">5</span>)  <span class=\"comment\"># 5. 等待</span></span><br><span class=\"line\">driver.get_screenshot_as_file(<span class=\"string\">&quot;page.png&quot;</span>)  <span class=\"comment\"># 6. 截图</span></span><br><span class=\"line\">driver.quit()  <span class=\"comment\"># 7. 关闭浏览器</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-底层原理\"><a href=\"#4-底层原理\" class=\"headerlink\" title=\"4. 底层原理\"></a>4. 底层原理</h3><ol>\n<li>启动浏览器驱动。  </li>\n<li>与驱动建立连接，要求驱动启动浏览器。  </li>\n<li>发送HTTP请求（如命令<code>get</code>+参数<code>百度网址</code>）。  </li>\n<li>发送HTTP请求：命令（findElement）+参数（{“using”: xpath, “value”: &#x2F;&#x2F;*[@id&#x3D;”su”]}）</li>\n<li>发送HTTP请求：命令（sendKeysToElement）+参数（…）</li>\n<li>发送HTTP请求：命令（…）+参数（…）</li>\n</ol>\n<p>selenium底层原理：</p>\n<ol>\n<li>启动浏览器驱动</li>\n<li>向浏览器驱动发送HTTP请求</li>\n<li>HTTP请求，使用webdriver协议标准</li>\n</ol>\n<p>可以扩展出：appium</p>\n<p>向收集发送请求，实现APP自动化</p>\n<h1 id=\"二、Web自动化Selenium浏览器控制及元素控制\"><a href=\"#二、Web自动化Selenium浏览器控制及元素控制\" class=\"headerlink\" title=\"二、Web自动化Selenium浏览器控制及元素控制\"></a>二、Web自动化Selenium浏览器控制及元素控制</h1><p><strong>项目地址：<a href=\"http://101.34.221.219:8010/\">http://101.34.221.219:8010/</a></strong></p>\n<hr>\n<h2 id=\"1-浏览器控制\"><a href=\"#1-浏览器控制\" class=\"headerlink\" title=\"1. 浏览器控制\"></a>1. 浏览器控制</h2><h3 id=\"WebDriver对象基础操作\"><a href=\"#WebDriver对象基础操作\" class=\"headerlink\" title=\"WebDriver对象基础操作\"></a>WebDriver对象基础操作</h3><h4 id=\"启动与关闭浏览器\"><a href=\"#启动与关闭浏览器\" class=\"headerlink\" title=\"启动与关闭浏览器\"></a>启动与关闭浏览器</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动Chrome浏览器</span></span><br><span class=\"line\">driver = webdriver.Chrome()  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问百度</span></span><br><span class=\"line\">driver.get(<span class=\"string\">&#x27;https://www.baidu.com&#x27;</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定位搜索框并输入关键字</span></span><br><span class=\"line\">driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>).send_keys(<span class=\"string\">&quot;北凡老师&quot;</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 点击搜索按钮</span></span><br><span class=\"line\">driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;su&quot;]&#x27;</span>).click()  </span><br><span class=\"line\">time.sleep(<span class=\"number\">5</span>)  <span class=\"comment\"># 等待5秒</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截图保存</span></span><br><span class=\"line\">driver.get_screenshot_as_file(<span class=\"string\">&quot;page.png&quot;</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭浏览器</span></span><br><span class=\"line\">driver.quit()  </span><br></pre></td></tr></table></figure>\n\n<p><strong>启动方式：</strong></p>\n<ul>\n<li>实例化：<code>driver = webdriver.Chrome()</code></li>\n</ul>\n<p><strong>关闭</strong></p>\n<ul>\n<li><p>销毁： <code>del driver</code></p>\n</li>\n<li><p>方法： <code>driver.quit()</code></p>\n</li>\n<li><p>自动关闭（推荐使用上下文管理器）：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> webdriver.Chrome() <span class=\"keyword\">as</span> driver:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(driver) <span class=\"comment\">#输出 WebDriver 对象的内存地址和基本信息</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"窗口控制\"><a href=\"#窗口控制\" class=\"headerlink\" title=\"窗口控制\"></a>窗口控制</h4><ul>\n<li>最大化窗口：<code>driver.maximize_window()</code>  </li>\n<li>最小化窗口：<code>driver.minimize_window()</code>  </li>\n<li>全屏窗口：<code>driver.fullscreen_window()</code>  </li>\n<li>指定窗口大小：<code>driver.set_window_size(2000, 600)</code></li>\n</ul>\n<h4 id=\"导航操作\"><a href=\"#导航操作\" class=\"headerlink\" title=\"导航操作\"></a>导航操作</h4><ul>\n<li>跳转页面：<code>driver.get(&quot;https://www.baidu.com&quot;)</code>  </li>\n<li>返回上一页：<code>driver.back()</code>  </li>\n<li>前进下一页：<code>driver.forward()</code>  </li>\n<li>刷新页面：<code>driver.refresh()</code></li>\n</ul>\n<h4 id=\"获取页面信息\"><a href=\"#获取页面信息\" class=\"headerlink\" title=\"获取页面信息\"></a>获取页面信息</h4><p><strong>获取元素</strong></p>\n<ul>\n<li>find_element：返回元素对象</li>\n<li>find_elements：返回列表，列表中可能有多个元素对象</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(driver.title)          <span class=\"comment\"># 网页标题</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(driver.current_url)    <span class=\"comment\"># 网页地址</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(driver.page_source)    <span class=\"comment\"># 网页HTML源码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截图处理（三种方式获取、处理图片内容）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(driver.get_screenshot_as_base64())  <span class=\"comment\"># Base64编码后的二进制</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(driver.get_screenshot_as_png())     <span class=\"comment\"># 还原后的二进制</span></span><br><span class=\"line\">driver.get_screenshot_as_file(<span class=\"string\">&quot;page.png&quot;</span>) <span class=\"comment\"># 把二进制保存到文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取Cookies</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> cookie <span class=\"keyword\">in</span> driver.get_cookies():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(cookie)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行JavaScript</span></span><br><span class=\"line\">ts = driver.execute_script(<span class=\"string\">&#x27;&#x27;&#x27;console.log(&#x27;1111&#x27;); </span></span><br><span class=\"line\"><span class=\"string\">return localStorage.getItem(&#x27;CVStringTimestamp&#x27;);&#x27;&#x27;&#x27;</span>) <span class=\"comment\">#localStorage.getItem(&#x27;CVStringTimestamp为js代码</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"2-元素控制\"><a href=\"#2-元素控制\" class=\"headerlink\" title=\"2. 元素控制\"></a>2. 元素控制</h2><h3 id=\"Element对象操作\"><a href=\"#Element对象操作\" class=\"headerlink\" title=\"Element对象操作\"></a>Element对象操作</h3><h4 id=\"点击元素\"><a href=\"#点击元素\" class=\"headerlink\" title=\"点击元素\"></a>点击元素</h4><p>所有的元素都可以点击，只是点击效果不同，没有直接反馈</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;su&quot;]&#x27;</span>)  <span class=\"comment\"># 定位元素</span></span><br><span class=\"line\">a.click()  <span class=\"comment\"># 点击元素</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输入文本\"><a href=\"#输入文本\" class=\"headerlink\" title=\"输入文本\"></a>输入文本</h4><p>只有输入框、文本框可以输入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>)  </span><br><span class=\"line\">a.send_keys(<span class=\"string\">&quot;beifan&quot;</span>)  <span class=\"comment\"># 输入内容</span></span><br><span class=\"line\">a.clear()             <span class=\"comment\"># 清空输入框</span></span><br><span class=\"line\">a.send_keys(<span class=\"string\">&quot;bai11111111&quot;</span>)  <span class=\"comment\"># 重新输入</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h4><p>仅适用于 <code>&lt;input type=&quot;file&quot;&gt;</code> 元素：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;form&quot;]/div/div[2]/div[2]/input&#x27;</span>)  </span><br><span class=\"line\">b.send_keys(<span class=\"string\">r&quot;C:\\Users\\admin\\Desktop\\jmeter.png&quot;</span>)  <span class=\"comment\"># 输入文件绝对路径</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取元素信息\"><a href=\"#获取元素信息\" class=\"headerlink\" title=\"获取元素信息\"></a>获取元素信息</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>)  <span class=\"comment\"># 输入框</span></span><br><span class=\"line\">b = driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;su&quot;]&#x27;</span>)  <span class=\"comment\"># 按钮</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取元素属性</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.text)                      <span class=\"comment\"># 文字内容</span></span><br><span class=\"line\">a.screenshot(<span class=\"string\">&quot;a.png&quot;</span>)              <span class=\"comment\"># 元素截图</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.rect)                      <span class=\"comment\"># 元素位置和大小（字典格式）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.tag_name)                  <span class=\"comment\"># 元素标签名（如：input）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.get_attribute(<span class=\"string\">&quot;type&quot;</span>))     <span class=\"comment\"># 获取属性值（如：text）</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、Web自动化元素定位及定位等待解决定位失败\"><a href=\"#三、Web自动化元素定位及定位等待解决定位失败\" class=\"headerlink\" title=\"三、Web自动化元素定位及定位等待解决定位失败\"></a>三、Web自动化元素定位及定位等待解决定位失败</h1><h2 id=\"1-元素定位方法\"><a href=\"#1-元素定位方法\" class=\"headerlink\" title=\"1. 元素定位方法\"></a>1. 元素定位方法</h2><h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><ul>\n<li><strong>定位策略 + 定位表达式</strong>：通过特定方式（如XPath、CSS）定位元素。  </li>\n<li><strong>返回对象</strong>：  <ul>\n<li><code>find_element</code>：返回单个元素对象。  </li>\n<li><code>find_elements</code>：返回元素列表。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"示例：登录页面操作\"><a href=\"#示例：登录页面操作\" class=\"headerlink\" title=\"示例：登录页面操作\"></a>示例：登录页面操作</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.by <span class=\"keyword\">import</span> By</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> webdriver.Chrome() <span class=\"keyword\">as</span> driver:</span><br><span class=\"line\">    driver.maximize_window()</span><br><span class=\"line\">    driver.get(<span class=\"string\">&quot;http://116.62.63.211/shop/user/loginInfo.html&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 输入账号</span></span><br><span class=\"line\">    driver.find_element(By.XPATH, <span class=\"string\">&#x27;/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[1]/input&#x27;</span>).send_keys(<span class=\"string\">&quot;lyreth&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 输入密码</span></span><br><span class=\"line\">    driver.find_element(By.XPATH, <span class=\"string\">&#x27;/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[2]/div/input&#x27;</span>).send_keys(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 点击登录</span></span><br><span class=\"line\">    driver.find_element(By.XPATH, <span class=\"string\">&#x27;/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[3]/button&#x27;</span>).click()</span><br><span class=\"line\">    <span class=\"built_in\">input</span>(<span class=\"string\">&quot;暂停执行&quot;</span>)  <span class=\"comment\"># 等待用户输入</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"2-元素定位策略\"><a href=\"#2-元素定位策略\" class=\"headerlink\" title=\"2. 元素定位策略\"></a>2. 元素定位策略</h2><p>过去：8种<br>现在：5种<br>将来：4种 （推测）</p>\n<h3 id=\"查看代码\"><a href=\"#查看代码\" class=\"headerlink\" title=\"查看代码\"></a>查看代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># selenium.webdriver.common.by.By</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">By</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Set of supported locator strategies.&quot;&quot;&quot;</span></span><br><span class=\"line\">    ID = <span class=\"string\">&quot;id&quot;</span>                   <span class=\"comment\"># 通过id属性</span></span><br><span class=\"line\">    XPATH = <span class=\"string\">&quot;xpath&quot;</span>             <span class=\"comment\"># 通过XPath表达式</span></span><br><span class=\"line\">    LINK_TEXT = <span class=\"string\">&quot;link text&quot;</span>     <span class=\"comment\"># 通过超链接文本（精确匹配）</span></span><br><span class=\"line\">    PARTIAL_LINK_TEXT = <span class=\"string\">&quot;partial link text&quot;</span>  <span class=\"comment\"># 通过超链接文本（模糊匹配）</span></span><br><span class=\"line\">    NAME = <span class=\"string\">&quot;name&quot;</span>               <span class=\"comment\"># 通过name属性</span></span><br><span class=\"line\">    TAG_NAME = <span class=\"string\">&quot;tag name&quot;</span>       <span class=\"comment\"># 通过标签名</span></span><br><span class=\"line\">    CLASS_NAME = <span class=\"string\">&quot;class name&quot;</span>   <span class=\"comment\"># 通过class属性</span></span><br><span class=\"line\">    CSS_SELECTOR = <span class=\"string\">&quot;css selector&quot;</span>  <span class=\"comment\"># 通过CSS选择器</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># selenium.webdriver.remote.webdriver.WebDriver.find_element</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> by == By.ID:</span><br><span class=\"line\">        by = By.CSS_SELECTOR</span><br><span class=\"line\">        value = <span class=\"string\">f&#x27;[id=&quot;<span class=\"subst\">&#123;value&#125;</span>&quot;]&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> by == By.CLASS_NAME:</span><br><span class=\"line\">        by = By.CSS_SELECTOR</span><br><span class=\"line\">        value = <span class=\"string\">f&quot;.<span class=\"subst\">&#123;value&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> by == By.NAME:</span><br><span class=\"line\">        by = By.CSS_SELECTOR</span><br><span class=\"line\">        value = <span class=\"string\">f&#x27;[name=&quot;<span class=\"subst\">&#123;value&#125;</span>&quot;]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>以下策略：不可以被CSS取而代之</strong></p>\n<ul>\n<li>XPATH</li>\n<li>LINK_TEXT</li>\n<li>PARTIAL_LINK_TEXT</li>\n</ul>\n<p><strong>CSS和XPATH：</strong></p>\n<ol>\n<li>开发工具</li>\n<li>选择元素</li>\n<li>右键复制</li>\n</ol>\n<p><strong>LINK_TEXT和PARTIAL_LINK_TEXT</strong></p>\n<ul>\n<li>记录A标签中的显示文本</li>\n<li>调用find_element</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver.get(<span class=\"string\">&#x27;http://101.34.221.219:8010/?s=user/logininfo.html&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># driver.find_element(By.LINK_TEXT, &#x27;注册&#x27;).click() # 对A标签文本内容 精确匹配</span></span><br><span class=\"line\">driver.find_element(By.PARTIAL_LINK_TEXT, <span class=\"string\">&#x27;注&#x27;</span>).click() <span class=\"comment\"># 对A标签文本内容 模糊匹配</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>CSS or Xpath？</strong></p>\n<ul>\n<li><h2 id=\"相同点：-网页中用一个元素，既可以被CSS定位，也可以被XPATH定位\"><a href=\"#相同点：-网页中用一个元素，既可以被CSS定位，也可以被XPATH定位\" class=\"headerlink\" title=\"相同点：- 网页中用一个元素，既可以被CSS定位，也可以被XPATH定位\"></a>相同点：<br>- 网页中用一个元素，既可以被CSS定位，也可以被XPATH定位</h2>  在Chrome底层，CSS选择器和XPATH都是通过JS实现</li>\n<li>不同点：<ul>\n<li>CSS选择器在所有的浏览器中被支持，执行速度有保障  </li>\n<li>CSS无法完成复杂的元素定位（比如：实现LINK_TEXT、定位到父元素），往往需要JS配合</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例：文本匹配</strong>  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver.find_element(By.LINK_TEXT, <span class=\"string\">&#x27;注册&#x27;</span>).click()       <span class=\"comment\"># 精确匹配</span></span><br><span class=\"line\">driver.find_element(By.PARTIAL_LINK_TEXT, <span class=\"string\">&#x27;注&#x27;</span>).click()  <span class=\"comment\"># 模糊匹配</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"3-XPath语法详解\"><a href=\"#3-XPath语法详解\" class=\"headerlink\" title=\"3. XPath语法详解\"></a>3. XPath语法详解</h2><p>XPATH 是XML的查询语言，支持逻辑判断、函数调用</p>\n<h3 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h3><ul>\n<li><strong>路径符号</strong>：  <ul>\n<li><code>/</code>：根路径或子节点。  </li>\n<li><code>//</code>：任意层级。  </li>\n<li><code>..</code>：父节点。</li>\n</ul>\n</li>\n<li><strong>条件限定</strong>：  <ul>\n<li><code>[@attr=&quot;value&quot;]</code>：按属性筛选。  </li>\n<li><code>[n]</code>：按位置选择。</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例</strong>  </p>\n<figure class=\"highlight xpath\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/html/body/div[<span class=\"number\">4</span>]/div/div[<span class=\"number\">2</span>]/div[<span class=\"number\">2</span>]/div/div/div[<span class=\"number\">1</span>]/form/div[<span class=\"number\">1</span>]/input  # 绝对路径</span><br><span class=\"line\">//input[<span class=\"built_in\">@name</span>=<span class=\"string\">&quot;accounts&quot;</span>]                                             # 相对路径</span><br><span class=\"line\">//*<span class=\"built_in\">[contains</span>(<span class=\"type\">text</span>(), <span class=\"string\">&quot;登&quot;</span>)]                                           # 文本包含</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><ul>\n<li><p><code>text()</code>：匹配元素文本。  </p>\n<figure class=\"highlight xpath\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//a[<span class=\"type\">text</span>()=<span class=\"string\">&quot;登录&quot;</span>] 等同于 LINK_TEXT</span><br></pre></td></tr></table></figure>\n\n<p><code>contains()</code>：判断文本是否包含指定内容。  </p>\n<figure class=\"highlight xpath\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//*<span class=\"built_in\">[contains</span>(<span class=\"type\">text</span>(),<span class=\"string\">&quot;登&quot;</span>)] 等同于 PARTIAL_LINK_TEXT</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>starts-with()</code>：判断文本是否以指定内容开头。  </p>\n<figure class=\"highlight xpath\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//*<span class=\"built_in\">[starts-with</span>(<span class=\"type\">text</span>(),<span class=\"string\">&quot;登&quot;</span>)]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>不是所有的XPATH函数都被浏览器支持</p>\n<hr>\n<h2 id=\"4-元素定位失败原因及解决方案\"><a href=\"#4-元素定位失败原因及解决方案\" class=\"headerlink\" title=\"4. 元素定位失败原因及解决方案\"></a>4. 元素定位失败原因及解决方案</h2><h3 id=\"常见原因\"><a href=\"#常见原因\" class=\"headerlink\" title=\"常见原因\"></a>常见原因</h3><ol>\n<li><p><strong>元素不存在</strong>：尚未加载或已经消失</p>\n<p>ex：弹出的提示框</p>\n<p>解决方案：添加等待（如<code>time.sleep</code>，<code>input(&quot;暂停执行&quot;)</code>或<code>WebDriverWait</code>）。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#码尚商城的登录成功提示框</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> get_webdriver(<span class=\"string\">&#x27;chrome&#x27;</span>) <span class=\"keyword\">as</span> driver:</span><br><span class=\"line\">    <span class=\"comment\"># 访问登录页面</span></span><br><span class=\"line\">    driver.get(<span class=\"string\">&#x27;http://116.62.63.211/shop/user/loginInfo.html&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 定位账号输入框</span></span><br><span class=\"line\">    driver.find_element(By.XPATH, <span class=\"string\">&#x27;/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[1]/input&#x27;</span>).send_keys(</span><br><span class=\"line\">        <span class=\"string\">&quot;lyreth&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 定位密码输入框</span></span><br><span class=\"line\">    driver.find_element(By.XPATH, <span class=\"string\">&#x27;/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[2]/div/input&#x27;</span>).send_keys(</span><br><span class=\"line\">        <span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 点击登录按钮                   /html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[3]/button</span></span><br><span class=\"line\">    driver.find_element(By.XPATH, <span class=\"string\">&#x27;/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[3]/button&#x27;</span>).click()</span><br><span class=\"line\">    <span class=\"comment\"># / html / body / div[10] / div / p</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    el = driver.find_element(By.XPATH, <span class=\"string\">&#x27;/html/body/div[10]/div/p&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(el.text)</span><br><span class=\"line\">    <span class=\"built_in\">input</span>()</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p><strong>元素存在，定位不到</strong>：</p>\n<p>ex:id发生变化</p>\n<p>解决方案：手动写Xpath路径</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> get_webdriver() <span class=\"keyword\">as</span> driver:</span><br><span class=\"line\">    <span class=\"comment\"># driver.maximize_window()</span></span><br><span class=\"line\">    driver.get(<span class=\"string\">&#x27;https://element-plus.org/zh-CN/component/form.html#%E5%85%B8%E5%9E%8B%E8%A1%A8%E5%8D%95&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># input(&quot;暂停执行&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\"># //*[@id=&quot;el-id-6164-140&quot;] //*[@id=&quot;el-id-6722-140&quot;]</span></span><br><span class=\"line\">    el = driver.find_element(By.XPATH, <span class=\"string\">&#x27;//*[@id=&quot;page-content&quot;]/div/div/div[1]/div/div[2]/div[1]/form/div[1]/div/div/div/input&#x27;</span>) <span class=\"comment\"># no such element:</span></span><br><span class=\"line\">    el.send_keys(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">input</span>(<span class=\"string\">&quot;暂停执行&quot;</span>) <span class=\"comment\"># 等待输入</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>定位成功，不能交互</strong>：被遮挡</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> get_webdriver() <span class=\"keyword\">as</span> driver:</span><br><span class=\"line\"></span><br><span class=\"line\">    driver.get(<span class=\"string\">&#x27;http://116.62.63.211/shop/goods/index/id/5.html&#x27;</span>)</span><br><span class=\"line\">    el = driver.find_element(By.XPATH,<span class=\"string\">&#x27;/html/body/div[4]/div[2]/div[2]/div/div[3]/div[2]/button[1]&#x27;</span>) <span class=\"comment\"># no such element:</span></span><br><span class=\"line\">    el.click() <span class=\"comment\"># 可以成功，但会产生遮挡</span></span><br><span class=\"line\">    el = driver.find_element(By.LINK_TEXT, <span class=\"string\">&#x27;注册&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># el.click() # 失败</span></span><br><span class=\"line\">    driver.execute_script(<span class=\"string\">&quot;arguments[0].click()&quot;</span>, el) <span class=\"comment\"># js模拟点击 arguments[0]表示传入参数的第一个，el表示传入的参数，此时el被注册覆盖，因此传入的是注册按钮</span></span><br><span class=\"line\">    <span class=\"built_in\">input</span>(<span class=\"string\">&quot;暂停执行&quot;</span>) <span class=\"comment\"># 等待输入</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p><strong>可以交互，没有效果</strong>：元素内容、状态不对</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> get_webdriver() <span class=\"keyword\">as</span> driver:</span><br><span class=\"line\">    driver.maximize_window()</span><br><span class=\"line\">    driver.get(<span class=\"string\">&#x27;https://element-plus.org/zh-CN/component/checkbox.html#%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95&#x27;</span>)</span><br><span class=\"line\">    el_a = driver.find_element(By.XPATH,<span class=\"string\">&#x27;//*[@id=&quot;page-content&quot;]/div/div/div[1]/div/div[1]/div[1]/div[4]/label[1]/span[1]/input&#x27;</span>) <span class=\"comment\"># no such element:</span></span><br><span class=\"line\">    el_b = driver.find_element(By.XPATH,<span class=\"string\">&#x27;//*[@id=&quot;page-content&quot;]/div/div/div[1]/div/div[1]/div[1]/div[4]/label[1]/span[2]&#x27;</span>)</span><br><span class=\"line\">    el_b.click() <span class=\"comment\"># 不报错，但没效果</span></span><br><span class=\"line\">    <span class=\"built_in\">input</span>(<span class=\"string\">&quot;暂停执行&quot;</span>) <span class=\"comment\"># 等待输入</span></span><br><span class=\"line\">    driver.execute_script(<span class=\"string\">&#x27;&#x27;&#x27;arguments[0].removeAttribute(&quot;disabled&quot;)&#x27;&#x27;&#x27;</span>, el_a)</span><br><span class=\"line\">    <span class=\"comment\"># 修改元素状态</span></span><br><span class=\"line\">    el_b.click() <span class=\"comment\"># 不报错，有效果</span></span><br><span class=\"line\">    <span class=\"built_in\">input</span>(<span class=\"string\">&quot;暂停执行&quot;</span>) <span class=\"comment\"># 等待输入</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>​\t</p>\n<ol>\n<li><strong>定位表达式错误</strong>：  <ul>\n<li>解决方案：使用开发者工具验证XPath&#x2F;CSS。</li>\n</ul>\n</li>\n<li><strong>元素被遮挡</strong>：  <ul>\n<li>解决方案：通过JavaScript绕过遮挡（如<code>execute_script(&quot;arguments[0].click()&quot;, element)</code>）。</li>\n</ul>\n</li>\n<li><strong>元素状态无效</strong>：  <ul>\n<li>解决方案：修改元素属性（如移除<code>disabled</code>状态）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>示例：处理遮挡和状态问题</strong>  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过JS点击被遮挡元素</span></span><br><span class=\"line\">el = driver.find_element(By.LINK_TEXT, <span class=\"string\">&#x27;注册&#x27;</span>)</span><br><span class=\"line\">driver.execute_script(<span class=\"string\">&quot;arguments[0].click()&quot;</span>, el)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移除禁用状态并操作</span></span><br><span class=\"line\">el_a = driver.find_element(By.XPATH, <span class=\"string\">&#x27;//input[@disabled]&#x27;</span>)</span><br><span class=\"line\">driver.execute_script(<span class=\"string\">&#x27;arguments[0].removeAttribute(&quot;disabled&quot;)&#x27;</span>, el_a)</span><br><span class=\"line\">el_a.send_keys(<span class=\"string\">&quot;123&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"5-最佳实践\"><a href=\"#5-最佳实践\" class=\"headerlink\" title=\"5. 最佳实践\"></a>5. 最佳实践</h2><ul>\n<li><strong>优先使用相对XPath</strong>：避免因页面结构调整导致定位失败。  </li>\n<li><strong>结合显式等待</strong>：确保元素加载完成后再操作。  </li>\n<li><strong>简化定位表达式</strong>：如<code>//input[@name=&quot;accounts&quot;]</code>优于长绝对路径。</li>\n</ul>\n<p><strong>总结</strong>：合理选择定位策略，结合等待和JS处理复杂场景，可显著提升自动化脚本稳定性。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 6. 定位等待策略</span><br><span class=\"line\"></span><br><span class=\"line\">元素尚未出现，或者已经消失</span><br><span class=\"line\"></span><br><span class=\"line\">### 1. 强制等待</span><br><span class=\"line\">```python</span><br><span class=\"line\">input(&quot;暂停执行&quot;) # 需要人工干预，才能恢复</span><br><span class=\"line\">time.sleep(5) # 暂停固定的时间，随后自动恢复执行</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>优点</strong>：简单直接。</li>\n<li><strong>缺点</strong>：效率低，无法动态响应元素加载</li>\n</ul>\n<h3 id=\"2-隐式等待\"><a href=\"#2-隐式等待\" class=\"headerlink\" title=\"2. 隐式等待\"></a>2. 隐式等待</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver.implicitly_wait(<span class=\"number\">20</span>)  <span class=\"comment\"># 全局等待最多20秒</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>优点</strong>：提前出现，提前结束等待，全局生效。</li>\n<li><strong>缺点</strong>：仅判断元素是否存在，灵活性差。</li>\n</ul>\n<h3 id=\"3-显式等待（推荐）\"><a href=\"#3-显式等待（推荐）\" class=\"headerlink\" title=\"3. 显式等待（推荐）\"></a>3. 显式等待（推荐）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func</span>(<span class=\"params\">d</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;显示等待，正在重试...&#x27;</span>)</span><br><span class=\"line\">    el = driver.find_element(By.XPATH, <span class=\"string\">&#x27;//p[@class=&quot;prompt-msg&quot;]&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> el.text:</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> el.text <span class=\"comment\"># 返回结果，提前结束等待</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"literal\">False</span> <span class=\"comment\"># 返回假值，继续重试</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.wait <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\">msg = WebDriverWait(driver, <span class=\"number\">10</span>).until(func) <span class=\"comment\"># 函数不加括号</span></span><br><span class=\"line\"><span class=\"comment\"># WebDriverWait，拿着 driver 不断的调用 func，把结果保存到 msg</span></span><br></pre></td></tr></table></figure>\n\n<p>简化版</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.wait <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\">msg = WebDriverWait(driver, <span class=\"number\">10</span>).until(</span><br><span class=\"line\"><span class=\"keyword\">lambda</span> d: driver.find_element(By.XPATH, <span class=\"string\">&#x27;//p[@class=&quot;prompt-msg&quot;]&#x27;</span>).text)</span><br><span class=\"line\"><span class=\"comment\"># 函数不加括号</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>优点</strong>：灵活控制等待条件（如文本内容、元素属性等）。</li>\n<li><strong>缺点</strong>：需熟悉Python和Selenium。</li>\n</ul>\n<p>原理：</p>\n<ul>\n<li>创建一个函数，被selenium调用，如果没有满足结束条件就不断重试，如果满足了就提前结束</li>\n</ul>\n<p>函数额外要求：</p>\n<ol>\n<li>必须有一个参数：driver</li>\n<li>返回值：真 或者 假</li>\n</ol>\n<ul>\n<li>如果为真，提前结束等待</li>\n<li>如果为假，继续重试</li>\n</ul>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"一、Web自动化前端基础及Selenium原理和环境安装\"><a href=\"#一、Web自动化前端基础及Selenium原理和环境安装\" class=\"headerlink\" title=\"一、Web自动化前端基础及Selenium原理和环境安装\"></a>一、Web自动化前端基础及Selenium原理和环境安装</h1><h2 id=\"1-API自动化和Web自动化区别\"><a href=\"#1-API自动化和Web自动化区别\" class=\"headerlink\" title=\"1. API自动化和Web自动化区别\"></a>1. API自动化和Web自动化区别</h2><ul>\n<li><p><strong>API自动化</strong>：  </p>\n<ul>\n<li>关注数据的流动  </li>\n<li>对数据进行设计、传输、验证</li>\n</ul>\n</li>\n<li><p><strong>Web自动化</strong>：  </p>\n<ul>\n<li>围绕浏览器页面  </li>\n<li>功能包括：  <ul>\n<li>启动、关闭网页窗口  </li>\n<li>获取、改变窗口大小  </li>\n<li>获取、改变网址  </li>\n<li>点击、输入、保存</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"2-浏览器和前端基础\"><a href=\"#2-浏览器和前端基础\" class=\"headerlink\" title=\"2. 浏览器和前端基础\"></a>2. 浏览器和前端基础</h2><h3 id=\"1-元素\"><a href=\"#1-元素\" class=\"headerlink\" title=\"1. 元素\"></a>1. 元素</h3><p>网页内容由HTML元素决定，HTML是标记语言，通过标签和标签的属性标记内容。  </p>\n<p><strong>示例HTML代码：</strong>  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>网页标题<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    输入框：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    文本框：<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">rows</span>=<span class=\"string\">&quot;20&quot;</span> <span class=\"attr\">cols</span>=<span class=\"string\">&quot;40&quot;</span>&gt;</span>默认值<span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    按钮A: <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    按钮B: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;注册&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>李四<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>王五<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>上海<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>深圳<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>广州<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>特点：</strong>  </p>\n<ol>\n<li>标签能被浏览器识别并展示特定效果。  </li>\n<li>标签属性与标记同等重要。  </li>\n<li>标签可嵌套、配合，实现不同效果。  </li>\n<li>展示效果可动态更改，不可迷信静态效果。</li>\n</ol>\n<h3 id=\"2-JavaScript\"><a href=\"#2-JavaScript\" class=\"headerlink\" title=\"2. JavaScript\"></a>2. JavaScript</h3><p>决定网页的动态效果，语法与Python相似。  </p>\n<p><strong>示例代码：</strong>  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 条件判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == b) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a和b相等&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a和b不相等&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数封装</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == b) &#123; </span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a和b相等&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a和b不相等&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-DOM（文档对象模型）\"><a href=\"#3-DOM（文档对象模型）\" class=\"headerlink\" title=\"3. DOM（文档对象模型）\"></a>3. DOM（文档对象模型）</h3><p>D: 文档<br>O：面向对象<br>M：模型</p>\n<p>将浏览器和网页内容视为对象，通过面向对象方式访问、控制。  </p>\n<p><strong>示例：</strong>  </p>\n<p>window：浏览器窗对象<br>docment：网页内容对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span> = <span class=\"string\">&#x27;https://www.baidu.com&#x27;</span>;  <span class=\"comment\">// 跳转网址</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">outerHTML</span> = <span class=\"string\">&#x27;&lt;body&gt;你好，你的网页被黑了&lt;/body&gt;&#x27;</span>;  <span class=\"comment\">// 修改网页内容</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"3-Selenium\"><a href=\"#3-Selenium\" class=\"headerlink\" title=\"3. Selenium\"></a>3. Selenium</h2><p>Selenium是一个开源的、跨平台的、支持多语言的Web自动化测试工具。  </p>\n<h3 id=\"1-安装Selenium\"><a href=\"#1-安装Selenium\" class=\"headerlink\" title=\"1. 安装Selenium\"></a>1. 安装Selenium</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install selenium -U  </span><br></pre></td></tr></table></figure>\n\n<p>第三方</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install webdriver-helper==1.*  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-安装浏览器驱动\"><a href=\"#2-安装浏览器驱动\" class=\"headerlink\" title=\"2. 安装浏览器驱动\"></a>2. 安装浏览器驱动</h3><p><strong>方式1：官方自动下载（较慢）</strong>  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver  </span><br><span class=\"line\">driver = webdriver.Chrome()  <span class=\"comment\"># 使用Chrome浏览器驱动  </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>方式2：第三方自动下载</strong>  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> webdriver_helper <span class=\"keyword\">import</span> get_webdriver  </span><br><span class=\"line\">driver = get_webdriver(<span class=\"string\">&#x27;chrome&#x27;</span>)  <span class=\"comment\"># 使用Chrome浏览器驱动  </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>方式3：手动下载</strong>  </p>\n<ol>\n<li>确定平台（如Windows）和浏览器版本（如120.0.6099.225）。  </li>\n<li>从<a href=\"https://googlechromelabs.github.io/chrome-for-testing/\">Chrome驱动官网</a>下载对应驱动。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\">driver = webdriver.Chrome() <span class=\"comment\"># 使用chrome的浏览器驱动</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-简单示例\"><a href=\"#3-简单示例\" class=\"headerlink\" title=\"3. 简单示例\"></a>3. 简单示例</h3><p><strong>手动测试步骤：</strong>  </p>\n<ol>\n<li>启动浏览器  </li>\n<li>访问百度  </li>\n<li>输入关键字  </li>\n<li>点击搜索按钮  </li>\n<li>等待  </li>\n<li>截图</li>\n</ol>\n<p><strong>代码实现：</strong>  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">driver = webdriver.Chrome()  <span class=\"comment\"># 1. 启动浏览器</span></span><br><span class=\"line\">driver.get(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)  <span class=\"comment\"># 2. 访问百度</span></span><br><span class=\"line\">driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>).send_keys(<span class=\"string\">&quot;北凡老师&quot;</span>)  <span class=\"comment\"># 3. 输入关键字</span></span><br><span class=\"line\">driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;su&quot;]&#x27;</span>).click()  <span class=\"comment\"># 4. 点击搜索按钮</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">5</span>)  <span class=\"comment\"># 5. 等待</span></span><br><span class=\"line\">driver.get_screenshot_as_file(<span class=\"string\">&quot;page.png&quot;</span>)  <span class=\"comment\"># 6. 截图</span></span><br><span class=\"line\">driver.quit()  <span class=\"comment\"># 7. 关闭浏览器</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-底层原理\"><a href=\"#4-底层原理\" class=\"headerlink\" title=\"4. 底层原理\"></a>4. 底层原理</h3><ol>\n<li>启动浏览器驱动。  </li>\n<li>与驱动建立连接，要求驱动启动浏览器。  </li>\n<li>发送HTTP请求（如命令<code>get</code>+参数<code>百度网址</code>）。  </li>\n<li>发送HTTP请求：命令（findElement）+参数（{“using”: xpath, “value”: &#x2F;&#x2F;*[@id&#x3D;”su”]}）</li>\n<li>发送HTTP请求：命令（sendKeysToElement）+参数（…）</li>\n<li>发送HTTP请求：命令（…）+参数（…）</li>\n</ol>\n<p>selenium底层原理：</p>\n<ol>\n<li>启动浏览器驱动</li>\n<li>向浏览器驱动发送HTTP请求</li>\n<li>HTTP请求，使用webdriver协议标准</li>\n</ol>\n<p>可以扩展出：appium</p>\n<p>向收集发送请求，实现APP自动化</p>\n<h1 id=\"二、Web自动化Selenium浏览器控制及元素控制\"><a href=\"#二、Web自动化Selenium浏览器控制及元素控制\" class=\"headerlink\" title=\"二、Web自动化Selenium浏览器控制及元素控制\"></a>二、Web自动化Selenium浏览器控制及元素控制</h1><p><strong>项目地址：<a href=\"http://101.34.221.219:8010/\">http://101.34.221.219:8010/</a></strong></p>\n<hr>\n<h2 id=\"1-浏览器控制\"><a href=\"#1-浏览器控制\" class=\"headerlink\" title=\"1. 浏览器控制\"></a>1. 浏览器控制</h2><h3 id=\"WebDriver对象基础操作\"><a href=\"#WebDriver对象基础操作\" class=\"headerlink\" title=\"WebDriver对象基础操作\"></a>WebDriver对象基础操作</h3><h4 id=\"启动与关闭浏览器\"><a href=\"#启动与关闭浏览器\" class=\"headerlink\" title=\"启动与关闭浏览器\"></a>启动与关闭浏览器</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动Chrome浏览器</span></span><br><span class=\"line\">driver = webdriver.Chrome()  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问百度</span></span><br><span class=\"line\">driver.get(<span class=\"string\">&#x27;https://www.baidu.com&#x27;</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定位搜索框并输入关键字</span></span><br><span class=\"line\">driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>).send_keys(<span class=\"string\">&quot;北凡老师&quot;</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 点击搜索按钮</span></span><br><span class=\"line\">driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;su&quot;]&#x27;</span>).click()  </span><br><span class=\"line\">time.sleep(<span class=\"number\">5</span>)  <span class=\"comment\"># 等待5秒</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截图保存</span></span><br><span class=\"line\">driver.get_screenshot_as_file(<span class=\"string\">&quot;page.png&quot;</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭浏览器</span></span><br><span class=\"line\">driver.quit()  </span><br></pre></td></tr></table></figure>\n\n<p><strong>启动方式：</strong></p>\n<ul>\n<li>实例化：<code>driver = webdriver.Chrome()</code></li>\n</ul>\n<p><strong>关闭</strong></p>\n<ul>\n<li><p>销毁： <code>del driver</code></p>\n</li>\n<li><p>方法： <code>driver.quit()</code></p>\n</li>\n<li><p>自动关闭（推荐使用上下文管理器）：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> webdriver.Chrome() <span class=\"keyword\">as</span> driver:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(driver) <span class=\"comment\">#输出 WebDriver 对象的内存地址和基本信息</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"窗口控制\"><a href=\"#窗口控制\" class=\"headerlink\" title=\"窗口控制\"></a>窗口控制</h4><ul>\n<li>最大化窗口：<code>driver.maximize_window()</code>  </li>\n<li>最小化窗口：<code>driver.minimize_window()</code>  </li>\n<li>全屏窗口：<code>driver.fullscreen_window()</code>  </li>\n<li>指定窗口大小：<code>driver.set_window_size(2000, 600)</code></li>\n</ul>\n<h4 id=\"导航操作\"><a href=\"#导航操作\" class=\"headerlink\" title=\"导航操作\"></a>导航操作</h4><ul>\n<li>跳转页面：<code>driver.get(&quot;https://www.baidu.com&quot;)</code>  </li>\n<li>返回上一页：<code>driver.back()</code>  </li>\n<li>前进下一页：<code>driver.forward()</code>  </li>\n<li>刷新页面：<code>driver.refresh()</code></li>\n</ul>\n<h4 id=\"获取页面信息\"><a href=\"#获取页面信息\" class=\"headerlink\" title=\"获取页面信息\"></a>获取页面信息</h4><p><strong>获取元素</strong></p>\n<ul>\n<li>find_element：返回元素对象</li>\n<li>find_elements：返回列表，列表中可能有多个元素对象</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(driver.title)          <span class=\"comment\"># 网页标题</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(driver.current_url)    <span class=\"comment\"># 网页地址</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(driver.page_source)    <span class=\"comment\"># 网页HTML源码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截图处理（三种方式获取、处理图片内容）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(driver.get_screenshot_as_base64())  <span class=\"comment\"># Base64编码后的二进制</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(driver.get_screenshot_as_png())     <span class=\"comment\"># 还原后的二进制</span></span><br><span class=\"line\">driver.get_screenshot_as_file(<span class=\"string\">&quot;page.png&quot;</span>) <span class=\"comment\"># 把二进制保存到文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取Cookies</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> cookie <span class=\"keyword\">in</span> driver.get_cookies():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(cookie)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行JavaScript</span></span><br><span class=\"line\">ts = driver.execute_script(<span class=\"string\">&#x27;&#x27;&#x27;console.log(&#x27;1111&#x27;); </span></span><br><span class=\"line\"><span class=\"string\">return localStorage.getItem(&#x27;CVStringTimestamp&#x27;);&#x27;&#x27;&#x27;</span>) <span class=\"comment\">#localStorage.getItem(&#x27;CVStringTimestamp为js代码</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"2-元素控制\"><a href=\"#2-元素控制\" class=\"headerlink\" title=\"2. 元素控制\"></a>2. 元素控制</h2><h3 id=\"Element对象操作\"><a href=\"#Element对象操作\" class=\"headerlink\" title=\"Element对象操作\"></a>Element对象操作</h3><h4 id=\"点击元素\"><a href=\"#点击元素\" class=\"headerlink\" title=\"点击元素\"></a>点击元素</h4><p>所有的元素都可以点击，只是点击效果不同，没有直接反馈</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;su&quot;]&#x27;</span>)  <span class=\"comment\"># 定位元素</span></span><br><span class=\"line\">a.click()  <span class=\"comment\"># 点击元素</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输入文本\"><a href=\"#输入文本\" class=\"headerlink\" title=\"输入文本\"></a>输入文本</h4><p>只有输入框、文本框可以输入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>)  </span><br><span class=\"line\">a.send_keys(<span class=\"string\">&quot;beifan&quot;</span>)  <span class=\"comment\"># 输入内容</span></span><br><span class=\"line\">a.clear()             <span class=\"comment\"># 清空输入框</span></span><br><span class=\"line\">a.send_keys(<span class=\"string\">&quot;bai11111111&quot;</span>)  <span class=\"comment\"># 重新输入</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h4><p>仅适用于 <code>&lt;input type=&quot;file&quot;&gt;</code> 元素：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;form&quot;]/div/div[2]/div[2]/input&#x27;</span>)  </span><br><span class=\"line\">b.send_keys(<span class=\"string\">r&quot;C:\\Users\\admin\\Desktop\\jmeter.png&quot;</span>)  <span class=\"comment\"># 输入文件绝对路径</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取元素信息\"><a href=\"#获取元素信息\" class=\"headerlink\" title=\"获取元素信息\"></a>获取元素信息</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>)  <span class=\"comment\"># 输入框</span></span><br><span class=\"line\">b = driver.find_element(<span class=\"string\">&#x27;xpath&#x27;</span>, <span class=\"string\">&#x27;//*[@id=&quot;su&quot;]&#x27;</span>)  <span class=\"comment\"># 按钮</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取元素属性</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.text)                      <span class=\"comment\"># 文字内容</span></span><br><span class=\"line\">a.screenshot(<span class=\"string\">&quot;a.png&quot;</span>)              <span class=\"comment\"># 元素截图</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.rect)                      <span class=\"comment\"># 元素位置和大小（字典格式）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.tag_name)                  <span class=\"comment\"># 元素标签名（如：input）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.get_attribute(<span class=\"string\">&quot;type&quot;</span>))     <span class=\"comment\"># 获取属性值（如：text）</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、Web自动化元素定位及定位等待解决定位失败\"><a href=\"#三、Web自动化元素定位及定位等待解决定位失败\" class=\"headerlink\" title=\"三、Web自动化元素定位及定位等待解决定位失败\"></a>三、Web自动化元素定位及定位等待解决定位失败</h1><h2 id=\"1-元素定位方法\"><a href=\"#1-元素定位方法\" class=\"headerlink\" title=\"1. 元素定位方法\"></a>1. 元素定位方法</h2><h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><ul>\n<li><strong>定位策略 + 定位表达式</strong>：通过特定方式（如XPath、CSS）定位元素。  </li>\n<li><strong>返回对象</strong>：  <ul>\n<li><code>find_element</code>：返回单个元素对象。  </li>\n<li><code>find_elements</code>：返回元素列表。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"示例：登录页面操作\"><a href=\"#示例：登录页面操作\" class=\"headerlink\" title=\"示例：登录页面操作\"></a>示例：登录页面操作</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.by <span class=\"keyword\">import</span> By</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> webdriver.Chrome() <span class=\"keyword\">as</span> driver:</span><br><span class=\"line\">    driver.maximize_window()</span><br><span class=\"line\">    driver.get(<span class=\"string\">&quot;http://116.62.63.211/shop/user/loginInfo.html&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 输入账号</span></span><br><span class=\"line\">    driver.find_element(By.XPATH, <span class=\"string\">&#x27;/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[1]/input&#x27;</span>).send_keys(<span class=\"string\">&quot;lyreth&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 输入密码</span></span><br><span class=\"line\">    driver.find_element(By.XPATH, <span class=\"string\">&#x27;/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[2]/div/input&#x27;</span>).send_keys(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 点击登录</span></span><br><span class=\"line\">    driver.find_element(By.XPATH, <span class=\"string\">&#x27;/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[3]/button&#x27;</span>).click()</span><br><span class=\"line\">    <span class=\"built_in\">input</span>(<span class=\"string\">&quot;暂停执行&quot;</span>)  <span class=\"comment\"># 等待用户输入</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"2-元素定位策略\"><a href=\"#2-元素定位策略\" class=\"headerlink\" title=\"2. 元素定位策略\"></a>2. 元素定位策略</h2><p>过去：8种<br>现在：5种<br>将来：4种 （推测）</p>\n<h3 id=\"查看代码\"><a href=\"#查看代码\" class=\"headerlink\" title=\"查看代码\"></a>查看代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># selenium.webdriver.common.by.By</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">By</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Set of supported locator strategies.&quot;&quot;&quot;</span></span><br><span class=\"line\">    ID = <span class=\"string\">&quot;id&quot;</span>                   <span class=\"comment\"># 通过id属性</span></span><br><span class=\"line\">    XPATH = <span class=\"string\">&quot;xpath&quot;</span>             <span class=\"comment\"># 通过XPath表达式</span></span><br><span class=\"line\">    LINK_TEXT = <span class=\"string\">&quot;link text&quot;</span>     <span class=\"comment\"># 通过超链接文本（精确匹配）</span></span><br><span class=\"line\">    PARTIAL_LINK_TEXT = <span class=\"string\">&quot;partial link text&quot;</span>  <span class=\"comment\"># 通过超链接文本（模糊匹配）</span></span><br><span class=\"line\">    NAME = <span class=\"string\">&quot;name&quot;</span>               <span class=\"comment\"># 通过name属性</span></span><br><span class=\"line\">    TAG_NAME = <span class=\"string\">&quot;tag name&quot;</span>       <span class=\"comment\"># 通过标签名</span></span><br><span class=\"line\">    CLASS_NAME = <span class=\"string\">&quot;class name&quot;</span>   <span class=\"comment\"># 通过class属性</span></span><br><span class=\"line\">    CSS_SELECTOR = <span class=\"string\">&quot;css selector&quot;</span>  <span class=\"comment\"># 通过CSS选择器</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># selenium.webdriver.remote.webdriver.WebDriver.find_element</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> by == By.ID:</span><br><span class=\"line\">        by = By.CSS_SELECTOR</span><br><span class=\"line\">        value = <span class=\"string\">f&#x27;[id=&quot;<span class=\"subst\">&#123;value&#125;</span>&quot;]&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> by == By.CLASS_NAME:</span><br><span class=\"line\">        by = By.CSS_SELECTOR</span><br><span class=\"line\">        value = <span class=\"string\">f&quot;.<span class=\"subst\">&#123;value&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> by == By.NAME:</span><br><span class=\"line\">        by = By.CSS_SELECTOR</span><br><span class=\"line\">        value = <span class=\"string\">f&#x27;[name=&quot;<span class=\"subst\">&#123;value&#125;</span>&quot;]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>以下策略：不可以被CSS取而代之</strong></p>\n<ul>\n<li>XPATH</li>\n<li>LINK_TEXT</li>\n<li>PARTIAL_LINK_TEXT</li>\n</ul>\n<p><strong>CSS和XPATH：</strong></p>\n<ol>\n<li>开发工具</li>\n<li>选择元素</li>\n<li>右键复制</li>\n</ol>\n<p><strong>LINK_TEXT和PARTIAL_LINK_TEXT</strong></p>\n<ul>\n<li>记录A标签中的显示文本</li>\n<li>调用find_element</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver.get(<span class=\"string\">&#x27;http://101.34.221.219:8010/?s=user/logininfo.html&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># driver.find_element(By.LINK_TEXT, &#x27;注册&#x27;).click() # 对A标签文本内容 精确匹配</span></span><br><span class=\"line\">driver.find_element(By.PARTIAL_LINK_TEXT, <span class=\"string\">&#x27;注&#x27;</span>).click() <span class=\"comment\"># 对A标签文本内容 模糊匹配</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>CSS or Xpath？</strong></p>\n<ul>\n<li><h2 id=\"相同点：-网页中用一个元素，既可以被CSS定位，也可以被XPATH定位\"><a href=\"#相同点：-网页中用一个元素，既可以被CSS定位，也可以被XPATH定位\" class=\"headerlink\" title=\"相同点：- 网页中用一个元素，既可以被CSS定位，也可以被XPATH定位\"></a>相同点：<br>- 网页中用一个元素，既可以被CSS定位，也可以被XPATH定位</h2>  在Chrome底层，CSS选择器和XPATH都是通过JS实现</li>\n<li>不同点：<ul>\n<li>CSS选择器在所有的浏览器中被支持，执行速度有保障  </li>\n<li>CSS无法完成复杂的元素定位（比如：实现LINK_TEXT、定位到父元素），往往需要JS配合</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例：文本匹配</strong>  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver.find_element(By.LINK_TEXT, <span class=\"string\">&#x27;注册&#x27;</span>).click()       <span class=\"comment\"># 精确匹配</span></span><br><span class=\"line\">driver.find_element(By.PARTIAL_LINK_TEXT, <span class=\"string\">&#x27;注&#x27;</span>).click()  <span class=\"comment\"># 模糊匹配</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"3-XPath语法详解\"><a href=\"#3-XPath语法详解\" class=\"headerlink\" title=\"3. XPath语法详解\"></a>3. XPath语法详解</h2><p>XPATH 是XML的查询语言，支持逻辑判断、函数调用</p>\n<h3 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h3><ul>\n<li><strong>路径符号</strong>：  <ul>\n<li><code>/</code>：根路径或子节点。  </li>\n<li><code>//</code>：任意层级。  </li>\n<li><code>..</code>：父节点。</li>\n</ul>\n</li>\n<li><strong>条件限定</strong>：  <ul>\n<li><code>[@attr=&quot;value&quot;]</code>：按属性筛选。  </li>\n<li><code>[n]</code>：按位置选择。</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例</strong>  </p>\n<figure class=\"highlight xpath\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/html/body/div[<span class=\"number\">4</span>]/div/div[<span class=\"number\">2</span>]/div[<span class=\"number\">2</span>]/div/div/div[<span class=\"number\">1</span>]/form/div[<span class=\"number\">1</span>]/input  # 绝对路径</span><br><span class=\"line\">//input[<span class=\"built_in\">@name</span>=<span class=\"string\">&quot;accounts&quot;</span>]                                             # 相对路径</span><br><span class=\"line\">//*<span class=\"built_in\">[contains</span>(<span class=\"type\">text</span>(), <span class=\"string\">&quot;登&quot;</span>)]                                           # 文本包含</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><ul>\n<li><p><code>text()</code>：匹配元素文本。  </p>\n<figure class=\"highlight xpath\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//a[<span class=\"type\">text</span>()=<span class=\"string\">&quot;登录&quot;</span>] 等同于 LINK_TEXT</span><br></pre></td></tr></table></figure>\n\n<p><code>contains()</code>：判断文本是否包含指定内容。  </p>\n<figure class=\"highlight xpath\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//*<span class=\"built_in\">[contains</span>(<span class=\"type\">text</span>(),<span class=\"string\">&quot;登&quot;</span>)] 等同于 PARTIAL_LINK_TEXT</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>starts-with()</code>：判断文本是否以指定内容开头。  </p>\n<figure class=\"highlight xpath\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//*<span class=\"built_in\">[starts-with</span>(<span class=\"type\">text</span>(),<span class=\"string\">&quot;登&quot;</span>)]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>不是所有的XPATH函数都被浏览器支持</p>\n<hr>\n<h2 id=\"4-元素定位失败原因及解决方案\"><a href=\"#4-元素定位失败原因及解决方案\" class=\"headerlink\" title=\"4. 元素定位失败原因及解决方案\"></a>4. 元素定位失败原因及解决方案</h2><h3 id=\"常见原因\"><a href=\"#常见原因\" class=\"headerlink\" title=\"常见原因\"></a>常见原因</h3><ol>\n<li><p><strong>元素不存在</strong>：尚未加载或已经消失</p>\n<p>ex：弹出的提示框</p>\n<p>解决方案：添加等待（如<code>time.sleep</code>，<code>input(&quot;暂停执行&quot;)</code>或<code>WebDriverWait</code>）。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#码尚商城的登录成功提示框</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> get_webdriver(<span class=\"string\">&#x27;chrome&#x27;</span>) <span class=\"keyword\">as</span> driver:</span><br><span class=\"line\">    <span class=\"comment\"># 访问登录页面</span></span><br><span class=\"line\">    driver.get(<span class=\"string\">&#x27;http://116.62.63.211/shop/user/loginInfo.html&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 定位账号输入框</span></span><br><span class=\"line\">    driver.find_element(By.XPATH, <span class=\"string\">&#x27;/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[1]/input&#x27;</span>).send_keys(</span><br><span class=\"line\">        <span class=\"string\">&quot;lyreth&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 定位密码输入框</span></span><br><span class=\"line\">    driver.find_element(By.XPATH, <span class=\"string\">&#x27;/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[2]/div/input&#x27;</span>).send_keys(</span><br><span class=\"line\">        <span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 点击登录按钮                   /html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[3]/button</span></span><br><span class=\"line\">    driver.find_element(By.XPATH, <span class=\"string\">&#x27;/html/body/div[4]/div/div[2]/div[2]/div/div/div[1]/form/div[3]/button&#x27;</span>).click()</span><br><span class=\"line\">    <span class=\"comment\"># / html / body / div[10] / div / p</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    el = driver.find_element(By.XPATH, <span class=\"string\">&#x27;/html/body/div[10]/div/p&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(el.text)</span><br><span class=\"line\">    <span class=\"built_in\">input</span>()</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p><strong>元素存在，定位不到</strong>：</p>\n<p>ex:id发生变化</p>\n<p>解决方案：手动写Xpath路径</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> get_webdriver() <span class=\"keyword\">as</span> driver:</span><br><span class=\"line\">    <span class=\"comment\"># driver.maximize_window()</span></span><br><span class=\"line\">    driver.get(<span class=\"string\">&#x27;https://element-plus.org/zh-CN/component/form.html#%E5%85%B8%E5%9E%8B%E8%A1%A8%E5%8D%95&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># input(&quot;暂停执行&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\"># //*[@id=&quot;el-id-6164-140&quot;] //*[@id=&quot;el-id-6722-140&quot;]</span></span><br><span class=\"line\">    el = driver.find_element(By.XPATH, <span class=\"string\">&#x27;//*[@id=&quot;page-content&quot;]/div/div/div[1]/div/div[2]/div[1]/form/div[1]/div/div/div/input&#x27;</span>) <span class=\"comment\"># no such element:</span></span><br><span class=\"line\">    el.send_keys(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">input</span>(<span class=\"string\">&quot;暂停执行&quot;</span>) <span class=\"comment\"># 等待输入</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>定位成功，不能交互</strong>：被遮挡</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> get_webdriver() <span class=\"keyword\">as</span> driver:</span><br><span class=\"line\"></span><br><span class=\"line\">    driver.get(<span class=\"string\">&#x27;http://116.62.63.211/shop/goods/index/id/5.html&#x27;</span>)</span><br><span class=\"line\">    el = driver.find_element(By.XPATH,<span class=\"string\">&#x27;/html/body/div[4]/div[2]/div[2]/div/div[3]/div[2]/button[1]&#x27;</span>) <span class=\"comment\"># no such element:</span></span><br><span class=\"line\">    el.click() <span class=\"comment\"># 可以成功，但会产生遮挡</span></span><br><span class=\"line\">    el = driver.find_element(By.LINK_TEXT, <span class=\"string\">&#x27;注册&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># el.click() # 失败</span></span><br><span class=\"line\">    driver.execute_script(<span class=\"string\">&quot;arguments[0].click()&quot;</span>, el) <span class=\"comment\"># js模拟点击 arguments[0]表示传入参数的第一个，el表示传入的参数，此时el被注册覆盖，因此传入的是注册按钮</span></span><br><span class=\"line\">    <span class=\"built_in\">input</span>(<span class=\"string\">&quot;暂停执行&quot;</span>) <span class=\"comment\"># 等待输入</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p><strong>可以交互，没有效果</strong>：元素内容、状态不对</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> get_webdriver() <span class=\"keyword\">as</span> driver:</span><br><span class=\"line\">    driver.maximize_window()</span><br><span class=\"line\">    driver.get(<span class=\"string\">&#x27;https://element-plus.org/zh-CN/component/checkbox.html#%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95&#x27;</span>)</span><br><span class=\"line\">    el_a = driver.find_element(By.XPATH,<span class=\"string\">&#x27;//*[@id=&quot;page-content&quot;]/div/div/div[1]/div/div[1]/div[1]/div[4]/label[1]/span[1]/input&#x27;</span>) <span class=\"comment\"># no such element:</span></span><br><span class=\"line\">    el_b = driver.find_element(By.XPATH,<span class=\"string\">&#x27;//*[@id=&quot;page-content&quot;]/div/div/div[1]/div/div[1]/div[1]/div[4]/label[1]/span[2]&#x27;</span>)</span><br><span class=\"line\">    el_b.click() <span class=\"comment\"># 不报错，但没效果</span></span><br><span class=\"line\">    <span class=\"built_in\">input</span>(<span class=\"string\">&quot;暂停执行&quot;</span>) <span class=\"comment\"># 等待输入</span></span><br><span class=\"line\">    driver.execute_script(<span class=\"string\">&#x27;&#x27;&#x27;arguments[0].removeAttribute(&quot;disabled&quot;)&#x27;&#x27;&#x27;</span>, el_a)</span><br><span class=\"line\">    <span class=\"comment\"># 修改元素状态</span></span><br><span class=\"line\">    el_b.click() <span class=\"comment\"># 不报错，有效果</span></span><br><span class=\"line\">    <span class=\"built_in\">input</span>(<span class=\"string\">&quot;暂停执行&quot;</span>) <span class=\"comment\"># 等待输入</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>​\t</p>\n<ol>\n<li><strong>定位表达式错误</strong>：  <ul>\n<li>解决方案：使用开发者工具验证XPath&#x2F;CSS。</li>\n</ul>\n</li>\n<li><strong>元素被遮挡</strong>：  <ul>\n<li>解决方案：通过JavaScript绕过遮挡（如<code>execute_script(&quot;arguments[0].click()&quot;, element)</code>）。</li>\n</ul>\n</li>\n<li><strong>元素状态无效</strong>：  <ul>\n<li>解决方案：修改元素属性（如移除<code>disabled</code>状态）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>示例：处理遮挡和状态问题</strong>  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过JS点击被遮挡元素</span></span><br><span class=\"line\">el = driver.find_element(By.LINK_TEXT, <span class=\"string\">&#x27;注册&#x27;</span>)</span><br><span class=\"line\">driver.execute_script(<span class=\"string\">&quot;arguments[0].click()&quot;</span>, el)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移除禁用状态并操作</span></span><br><span class=\"line\">el_a = driver.find_element(By.XPATH, <span class=\"string\">&#x27;//input[@disabled]&#x27;</span>)</span><br><span class=\"line\">driver.execute_script(<span class=\"string\">&#x27;arguments[0].removeAttribute(&quot;disabled&quot;)&#x27;</span>, el_a)</span><br><span class=\"line\">el_a.send_keys(<span class=\"string\">&quot;123&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"5-最佳实践\"><a href=\"#5-最佳实践\" class=\"headerlink\" title=\"5. 最佳实践\"></a>5. 最佳实践</h2><ul>\n<li><strong>优先使用相对XPath</strong>：避免因页面结构调整导致定位失败。  </li>\n<li><strong>结合显式等待</strong>：确保元素加载完成后再操作。  </li>\n<li><strong>简化定位表达式</strong>：如<code>//input[@name=&quot;accounts&quot;]</code>优于长绝对路径。</li>\n</ul>\n<p><strong>总结</strong>：合理选择定位策略，结合等待和JS处理复杂场景，可显著提升自动化脚本稳定性。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 6. 定位等待策略</span><br><span class=\"line\"></span><br><span class=\"line\">元素尚未出现，或者已经消失</span><br><span class=\"line\"></span><br><span class=\"line\">### 1. 强制等待</span><br><span class=\"line\">```python</span><br><span class=\"line\">input(&quot;暂停执行&quot;) # 需要人工干预，才能恢复</span><br><span class=\"line\">time.sleep(5) # 暂停固定的时间，随后自动恢复执行</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>优点</strong>：简单直接。</li>\n<li><strong>缺点</strong>：效率低，无法动态响应元素加载</li>\n</ul>\n<h3 id=\"2-隐式等待\"><a href=\"#2-隐式等待\" class=\"headerlink\" title=\"2. 隐式等待\"></a>2. 隐式等待</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver.implicitly_wait(<span class=\"number\">20</span>)  <span class=\"comment\"># 全局等待最多20秒</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>优点</strong>：提前出现，提前结束等待，全局生效。</li>\n<li><strong>缺点</strong>：仅判断元素是否存在，灵活性差。</li>\n</ul>\n<h3 id=\"3-显式等待（推荐）\"><a href=\"#3-显式等待（推荐）\" class=\"headerlink\" title=\"3. 显式等待（推荐）\"></a>3. 显式等待（推荐）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func</span>(<span class=\"params\">d</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;显示等待，正在重试...&#x27;</span>)</span><br><span class=\"line\">    el = driver.find_element(By.XPATH, <span class=\"string\">&#x27;//p[@class=&quot;prompt-msg&quot;]&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> el.text:</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> el.text <span class=\"comment\"># 返回结果，提前结束等待</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"literal\">False</span> <span class=\"comment\"># 返回假值，继续重试</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.wait <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\">msg = WebDriverWait(driver, <span class=\"number\">10</span>).until(func) <span class=\"comment\"># 函数不加括号</span></span><br><span class=\"line\"><span class=\"comment\"># WebDriverWait，拿着 driver 不断的调用 func，把结果保存到 msg</span></span><br></pre></td></tr></table></figure>\n\n<p>简化版</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.wait <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\">msg = WebDriverWait(driver, <span class=\"number\">10</span>).until(</span><br><span class=\"line\"><span class=\"keyword\">lambda</span> d: driver.find_element(By.XPATH, <span class=\"string\">&#x27;//p[@class=&quot;prompt-msg&quot;]&#x27;</span>).text)</span><br><span class=\"line\"><span class=\"comment\"># 函数不加括号</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>优点</strong>：灵活控制等待条件（如文本内容、元素属性等）。</li>\n<li><strong>缺点</strong>：需熟悉Python和Selenium。</li>\n</ul>\n<p>原理：</p>\n<ul>\n<li>创建一个函数，被selenium调用，如果没有满足结束条件就不断重试，如果满足了就提前结束</li>\n</ul>\n<p>函数额外要求：</p>\n<ol>\n<li>必须有一个参数：driver</li>\n<li>返回值：真 或者 假</li>\n</ol>\n<ul>\n<li>如果为真，提前结束等待</li>\n<li>如果为假，继续重试</li>\n</ul>\n"},{"title":"接口测试工具笔记","date":"2025-06-11T06:01:57.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":null,"_content":"\n\n\n\n\n精确断言：\n1.在请求之前自定义随机时间，并设置为全局变量\n\n```\nvar today_time = Date.now();\npm.globals.set(\"today_time\",today_time);\n```\n\n\n\n\n\n```\nconst sleep = (milliseconds) => {\n    const start = Date.now();\n    while (Date.now() <= start + milliseconds) {}\n};\nsleep(3000);\n```\n\n\n\n```\nvar md5_username = CryptoJS.MD5(\"admin\").toString();\npm.globals.set(\"md5_username\",md5_username);\n```\n\n\n\n\n\n```\n//base64位加密\nvar a = CryptoJS.enc.Utf8.parse(\"admin\")\nvar base64_username = CryptoJS.enc.Base64.stringify(a)\nvar b = CryptoJS.enc.Utf8.parse(\"123\")\nvar base64_password = CryptoJS.enc.Base64.stringify(b)\npm.globals.set(\"base64_username\",base64_username);\npm.globals.set(\"base64_password\",base64_password);\n\n//base64位解密\nvar yuanen = CryptoJS.enc.Base64.parse(\"YWRtaW4=\");\nvar admin_string=yuanen.toString(CryptoJS.enc.Utf8);\nconsole.log(admin_string)\n```\n\n\n\n","source":"_posts/接口测试工具.md","raw":"---\ntitle: 接口测试工具笔记\ndate: 2025-06-11 14:01:57\ntags:\ncategories:\ncover:\ndescription:\n---\n\n\n\n\n\n精确断言：\n1.在请求之前自定义随机时间，并设置为全局变量\n\n```\nvar today_time = Date.now();\npm.globals.set(\"today_time\",today_time);\n```\n\n\n\n\n\n```\nconst sleep = (milliseconds) => {\n    const start = Date.now();\n    while (Date.now() <= start + milliseconds) {}\n};\nsleep(3000);\n```\n\n\n\n```\nvar md5_username = CryptoJS.MD5(\"admin\").toString();\npm.globals.set(\"md5_username\",md5_username);\n```\n\n\n\n\n\n```\n//base64位加密\nvar a = CryptoJS.enc.Utf8.parse(\"admin\")\nvar base64_username = CryptoJS.enc.Base64.stringify(a)\nvar b = CryptoJS.enc.Utf8.parse(\"123\")\nvar base64_password = CryptoJS.enc.Base64.stringify(b)\npm.globals.set(\"base64_username\",base64_username);\npm.globals.set(\"base64_password\",base64_password);\n\n//base64位解密\nvar yuanen = CryptoJS.enc.Base64.parse(\"YWRtaW4=\");\nvar admin_string=yuanen.toString(CryptoJS.enc.Utf8);\nconsole.log(admin_string)\n```\n\n\n\n","slug":"接口测试工具","published":1,"updated":"2025-06-29T03:47:16.462Z","comments":1,"layout":"post","photos":[],"_id":"cmcpwe25p000y9wnj01651mkd","content":"<p>精确断言：<br>1.在请求之前自定义随机时间，并设置为全局变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var today_time = Date.now();</span><br><span class=\"line\">pm.globals.set(&quot;today_time&quot;,today_time);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const sleep = (milliseconds) =&gt; &#123;</span><br><span class=\"line\">    const start = Date.now();</span><br><span class=\"line\">    while (Date.now() &lt;= start + milliseconds) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">sleep(3000);</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var md5_username = CryptoJS.MD5(&quot;admin&quot;).toString();</span><br><span class=\"line\">pm.globals.set(&quot;md5_username&quot;,md5_username);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//base64位加密</span><br><span class=\"line\">var a = CryptoJS.enc.Utf8.parse(&quot;admin&quot;)</span><br><span class=\"line\">var base64_username = CryptoJS.enc.Base64.stringify(a)</span><br><span class=\"line\">var b = CryptoJS.enc.Utf8.parse(&quot;123&quot;)</span><br><span class=\"line\">var base64_password = CryptoJS.enc.Base64.stringify(b)</span><br><span class=\"line\">pm.globals.set(&quot;base64_username&quot;,base64_username);</span><br><span class=\"line\">pm.globals.set(&quot;base64_password&quot;,base64_password);</span><br><span class=\"line\"></span><br><span class=\"line\">//base64位解密</span><br><span class=\"line\">var yuanen = CryptoJS.enc.Base64.parse(&quot;YWRtaW4=&quot;);</span><br><span class=\"line\">var admin_string=yuanen.toString(CryptoJS.enc.Utf8);</span><br><span class=\"line\">console.log(admin_string)</span><br></pre></td></tr></table></figure>\n\n\n\n","cover_type":"img","excerpt":"","more":"<p>精确断言：<br>1.在请求之前自定义随机时间，并设置为全局变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var today_time = Date.now();</span><br><span class=\"line\">pm.globals.set(&quot;today_time&quot;,today_time);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const sleep = (milliseconds) =&gt; &#123;</span><br><span class=\"line\">    const start = Date.now();</span><br><span class=\"line\">    while (Date.now() &lt;= start + milliseconds) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">sleep(3000);</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var md5_username = CryptoJS.MD5(&quot;admin&quot;).toString();</span><br><span class=\"line\">pm.globals.set(&quot;md5_username&quot;,md5_username);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//base64位加密</span><br><span class=\"line\">var a = CryptoJS.enc.Utf8.parse(&quot;admin&quot;)</span><br><span class=\"line\">var base64_username = CryptoJS.enc.Base64.stringify(a)</span><br><span class=\"line\">var b = CryptoJS.enc.Utf8.parse(&quot;123&quot;)</span><br><span class=\"line\">var base64_password = CryptoJS.enc.Base64.stringify(b)</span><br><span class=\"line\">pm.globals.set(&quot;base64_username&quot;,base64_username);</span><br><span class=\"line\">pm.globals.set(&quot;base64_password&quot;,base64_password);</span><br><span class=\"line\"></span><br><span class=\"line\">//base64位解密</span><br><span class=\"line\">var yuanen = CryptoJS.enc.Base64.parse(&quot;YWRtaW4=&quot;);</span><br><span class=\"line\">var admin_string=yuanen.toString(CryptoJS.enc.Utf8);</span><br><span class=\"line\">console.log(admin_string)</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"接口自动化基础之pytest","date":"2025-06-29T03:47:00.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":null,"_content":"\n# 一、接口自动化基础之pytest框架用法、规则、配置、标记(day13)\n\n创建新的项目：api_framwrok_241\n\n## 1. 什么是测试框架\n\n测试框架：抽象出来一个工具集合，提供大量组件或功能：\n\n- 用例发现：自动化的从各目录、各文件种收集测试用例  \n- 用例管理：根据需求对用例进行筛选、忽略、跳过等操作  \n- 环境管理：在用例执行前后，自动完成某些操作，构造合适的执行条件  \n- 用例执行：执行用例的测试步骤  \n- 断言：执行用例时，判定执行结果是否符合预期  \n\n大部分的编程语言都有对应测试框架：\n\n- Java: JUnit, TestNG  \n- php: phpunit  \n- Python: unittest, pytest  \n- 更多...... \n\nunittest:  \n- python内置、无需安装  \n- 用浓郁Java风格  \n- 无法升级、扩展  \n\npytest:  \n- 手动安装、自由切换版本  \n- 有浓郁Python风格  \n- 有丰富第三方生态进行扩展  \n- 完全兼容unittest  \n\n---\n\n## 2. pytest测试框架\n\n### 1. 安装pytest\n\n```bash\npip install pytest    # 安装pytest  \npip install pytest -U # 安装、升级pytest 到最新版  \npip install pytest==7.0   # 安装pytest 7.0版本  \n```\n\n- `pip install` 安装第三方库的命令  \n- `pytest` 第三方库的名字  \n- `-U` 升级，保持最新版  \n- `==7.0` 指定版本号  \n\n```bash\npip show pytest  # 查看pytest信息  \npytest  # 启动测试框架  \n```\n\n***\n\n### 2. 编写测试用例\n\n1. 创建：`test_`开头的py文件  \n2. 创建：`test_`开头的函数  \n3. 创建：`assert`断言  \n\n示例文件 `test_abc.py`：\n```python\ndef test_ok():\n    assert 1 == 1  # 测试通过\n\ndef test_fail():\n    assert 1 == 2  # 测试失败\n```\n\n***\n\n### 3. 执行测试用例\n\n1. 命令行  \n    ```bash\n    pytest\n    ```\n\n2. 代码  \n    ```python\n    import pytest\n    pytest.main()  # 启动测试框架\n    ```\n\n***\n\n### 4. 看懂执行结果\n\n1. 执行环境  \n    ```\n    platform win32 -- Python 3.12.0, pytest-8.1.1, pluggy-1.4.0\n    rootdir: E:\\PyProject\\api_framework_241\n    ```\n\n2. 用例收集情况  \n    ```\n    collected 2 items\n    ```\n\n3. 用例执行过程  \n    ```\n    test_abc.py .F\n    [100%]\n    ```\n\n| 缩写 | 单词    | 含义                       |\n| ---- | ------- | -------------------------- |\n| .    | passed  | 通过                       |\n| F    | failed  | 失败（用例执行时报错）     |\n| E    | error   | 出错（fixture执行报错）    |\n| s    | skipped | 跳过                       |\n| X    | xpassed | 预期外的通过（不符合预期） |\n| x    | xfailed | 预期内的失败（符合预期）   |\n\n4. 用例失败原因  \n    ```\n    ================================== FAILURES\n    ===================================\n    __________________________________ test_fail\n    __________________________________\n    def test_fail():\n    > assert 1 == 2 # 测试失败\n    E assert 1 == 2\n    test_abc.py:6: AssertionError\n    ```\n    \n5. 测试框架总结信息  \n    ```\n    =========================== short test summary info\n    ===========================\n    FAILED test_abc.py::test_fail - assert 1 == 2\n    ========================= 1 failed, 1 passed in 0.03s\n    =========================\n    ```\n\n***\n\n### 5. 用例发现规则\n\npytest识别、加载测试用例过程称之为用例发现，规则：\n\n1. 遍历所有的目录（venv除外）  \n2. 遍历所有 `test_`开头 或者 `_test`结尾的python文件  \n3. 遍历所有 `test` 开头的类  \n   - 类不能拥有`__init__`方法  \n4. 收集 `test_`开头的函数或者方法，作为测试用例  \n\n**重点**：pytest，只有函数和方法，才被视为测试用例，目录、文件、类，作为用例的容器  \n\n## 3. pytest高级用法\n\n### 1. 配置\n\npytest 有2种配置方式：\n\n- 命令行参数  \n- ini配置文件  \n\n查看所有的配置项  \n```bash\npytest -h  \n```\n\n可以分成三大部分\n1. 参数\n2. 配置项\n3. 环境变量\n\n常用的命令行参数：  \n\n- `-v`：增加详细程度  \n- `-q`：减少详细程度  \n- `-s`：不进行内容捕获，才能正常的输入输出  \n- `-x`：快速退出（冒烟测试）  \n\n常用的ini配置项：  \n1. 在根目录中的创建 `pytest.ini` 文件  \n2. 创建 pytest 选择器  \n3. 按行，添加配置项  \n\n示例 `pytest.ini`：  \n```ini\n[pytest]\naddopts = -s -x\n```\n\nadd options\n\n配置是用来改变pytest\n\n**约定大于配置**：对于成熟的工具来说，默认配置往往是比较好的配置，可以适用于大部分场景。如非必要，请勿更改。  \n\n***\n\n### 2. 标记mark\n\nmark主要用途是让用例和用例之间变得不同，实现用例的筛选。  \n\n#### 1. 用户自定义标记\n\n1. 注册（在 `pytest.ini` 中）：  \n    ```ini\n    [pytest]\n    markers =\n        api\n        ui\n        ut\n        e2e\n    ```\n\n2. 标记用例：  \n    ```python\n    import pytest\n    \n    @pytest.mark.ut\n    def test_ok():\n        assert 1 == 1  # 测试通过\n    \n    @pytest.mark.e2e\n    def test_fail():\n        assert 1 == 2  # 测试失败\n    \n    @pytest.mark.api\n    def test_baili():\n        pass\n    \n    @pytest.mark.ui\n    def test_beifan():\n        pass\n    ```\n\n3. 筛选用例：  \n    ```bash\n    pytest -m api  # 只执行拥有api标记的用例\n    pytest -m \"ut or api\"  # 只执行拥有ut或api标记的用例\n    pytest -m \"ui and api\"  # 只执行同时拥有ui和api标记的用例\n    ```\n\n#### 2. 框架内置标记\n\n1. 不需要注册，直接使用  \n2. 不仅用于筛选，还有特殊效果  \n3. 不同的标记，拥有不同的效果  \n\n示例：  \n```python\nimport pytest\n\n@pytest.mark.skip\ndef test_skip():\n    assert 1 == 2  # 失败\n\n@pytest.mark.skipif(1 == 1)  # 跳过\ndef test_skipif():\n    assert 1 == 2  # 失败\n\n@pytest.mark.skipif(1 == 2)  # 不会跳过\ndef test_skipif():\n    assert 1 == 2  # 失败\n\n@pytest.mark.xfail  # 预期失败\ndef test_passed():\n    assert 1 == 2  # 结果失败\n\n@pytest.mark.xfail  # 预期失败\ndef test_fail():\n    assert 1 == 1  # 结果成功\n```\n\n#### 3. 参数化测试\n\n参数化测试：通过数据修改参数，从而改变测试用例。  \n数据驱动测试 = 参数化测试 + 数据文件  \n\n**参数化之前**：  \n```python\ndef add(a, b):\n    return a + b\n\ndef test_add_1_10():\n    a = 1\n    b = 1\n    assert 2 == add(a, b)\n\ndef test_add_2_20():\n    a = 2\n    b = 2\n    assert 4 == add(a, b)\n\ndef test_add_2_30():\n    a = 2\n    b = 3\n    assert 5 == add(a, b)\n\ndef test_add_3_3():\n    a = 3\n    b = 3\n    assert 6 == add(a, b)\n```\n\n**参数化之后**：  \n```python\n@pytest.mark.parametrize(\n    \"a, b, c\",  # 1. 列出参数\n    [           # 2. 准备参数的值\n        [1, 1, 2],\n        [2, 2, 4],\n        [2, 3, 5],\n        [3, 3, 6],  # 3. 根据需求修改数据\n    ]\n)\ndef test_add_1_1(a, b, c):\n    assert c == add(a, b)\n```\n\n# 二、接口自动化基础之pytest框架fixture、常用插件、Allure报告、企业级定制(day14)\n\n## 1. pytest夹具fixture\n\n**夹具**: 在用例执行之前，执行之后，自动的运行自定义代码\n\n**场景**:  \n- 执行之前：创建测试账号，执行之后：删除测试账号  \n- 执行之前：启动浏览器，执行之后：关闭浏览器  \n- 执行之前：创建测试场景，执行之后，销毁测试场景  \n\n### 1. 创建fixture\n\n1. 创建函数  \n2. 添加装饰器  \n3. `yield`  \n\n```python\n@pytest.fixture  \ndef f():  \n    print('启动浏览器') # 前置操作，用例执行之前，自动执行  \n\n    yield '浏览器类型: chrome' # 返回值，使用例使用  \n\n    print('关闭浏览器') # 后置操作，用例执行之后，自动执行  \n```\n\n简便的方式创建fixture  \n\n```python\n@pytest.fixture  \ndef f(): # 使用fixture  \n    print('启动浏览器')  \n\n    return None  \n```\n\n### 2. 使用fixtures\n\n```python\ndef test_abc(f): # 使用fixture，得到它的返回值\n    print('我是用例内容，正在执行')\n\n    print('收到fixture的返回值:', f)\n```\n\n#### 执行结果\n\n```\ntest_abc.py::test_abc 启动浏览器  \n我是用例内容，正在执行  \n收到fixture的返回值：浏览器类型：chrome  \nPASSED关闭浏览器  \n```\n\n#### 简便的方式使用fixture\n\n```python\n@pytest.mark.usefixtures('f') # 使用fixture  \ndef test_abc():  \n    print('我是用例内容，正在执行')\n```\n\n### 3. fixture的作用范围\n\nfixture启动比较慢，能否共享（复用）fixture？\n\n- 每个用例执行fixture：5s * 3(fixture执行次数) = 15s  \n- 每个用例复用fixture：5s * 1(fixture执行次数) = 5s  \n\npytest中，用一个作用范围内fixture会自动的共享（复用）\n\npytest中，支持5级作用域：\n\n1. function：默认，不共享  \n2. class：同一个类中用例，自动共享  \n3. module：同一个模块（文件）中用例，自动共享  \n4. package：同一个包（目录）中用例，自动共享  \n5. session：所有用例，自动共享  \n\n```python\nimport pytest\n\n@pytest.fixture(scope='class')\ndef f():\n    print('启动浏览器') # 前置操作，用例执行之前，自动执行\n    yield '浏览器类型：chrome' # 返回值，供用例使用\n    print('关闭浏览器') # 后置操作，用例执行之后，自动执行\n\nclass Test_A:\n    def test_1(self, f):\n    pass\n    def test_2(self, f):\n    pass\n    class Test_B:\n    def test_3(self, f):\n    pass\n```\n\n### 4. conftest.py\n\n从名字上看：测试配置\n\n从内容上看：python代码\n\n从效果上看：被pytest自动导入，实现跨文件的fixture\n\n每个目录都可以创建一个conftest.py\n\n子目录的conftest.py可以屏蔽父目录的conftest.py\n\n哪个文件里用例更近，它的优先级就越高\n\n### 5. fixture的其他写法\n\n对于模块级夹具有 3 几种写法：\n\n1. setup / teardown  \n2. setUpModule / tearDownModule  \n3. setup_module / teardown_module  \n\n第一种是测试框架 nose 的写法，**pytest 从 7.2.0 开始不再兼容 nose 框架**，这种写法无了\n\n第二种是测试框架 unittest 的写法，这是 python 的标准库，应该会一直兼容下去\n第三种是测试框架 pytest 的写法，是仿 xunit 风格，使用非面向对象的方式来创建夹具在实际的运行过程中，所有的写法都会统一处理成 fixture，**建议一步到位直接写 fixture**\n\n***\n\n## 2. pytest常用插件\n\nhttps://pypi.org/\n\n### 1. pytest-html\n\n用途：生成HTML测试报告  \n文档：https://pytest-html.readthedocs.io/en/latest/installing.html  \n安装：  \n\n```\npip install pytest-html\n```\n\n配置：命令行参数  \n\n```\n--html=report.html --self-contained-html\n```\n\n### 2. pytest-xdist\n\n用途：并发执行用例  \n文档：https://pytest-xdist.readthedocs.io/en/stable/  \n\n安装：  \n\n```\npip install pytest-xdist\n```\n\n配置：命令行参数  \n\n```\n-n {0,1,2,3,...,n, auto}\n```\n\n注意：  \n1. 多进程额外增加资源  \n2. 多进程乱序  \n3. 多进程竞争资源（-s失效）  \n4. auto 自动判断进程数（CPU内核数）  \n\n### 3. pytest-order\n\n用途：定义用例的执行顺序  \n文档：https://pytest-order.readthedocs.io/en/latest/  \n\n安装：  \n\n```\npip install pytest-order\n```\n\n配置：标记  \n```python\n@pytest.mark.order(5) # 后执行  \ndef test_abc():  \n    pass  \n@pytest.mark.order(1) # 先执行  \ndef test_bbc():  \n    pass  \n```\n\n顺序规则：  \n● 先执行有order的用例，再执行没有order的用例  \n● 先执行order较小的用例，再执行order较大的用例  \n\n- order全局生效，可以跨文件、跨目录\n\n### 4. pytest-rerunfailures\n\n用途：用例失败时自动重试\n\n文档：https://github.com/pytest-dev/pytest-rerunfailures\n\n安装：\n\n```\npip install pytest-rerunfailures\n```\n\n配置：命令行参数\n\n```\n--reruns 5 --reruns-delay 1\n```\n\n### 5. pytest-result-log\n\n用途：把用例的执行结果保存到日志文件\n\n文档：https://mp.weixin.qq.com/s/f90fcj54pKvebnBahlllog\n\n安装：\n\n```\npip install pytest-result-log\n```\n\n配置：pytest.ini\n\n```\nlog_file = ./pytest.log\nlog_file_level = info\nlog_file_format = %(levelname)-8s %(asctime)s [%(name)s:%(lineno)s] : % (message)s\nlog_file_date_format = %Y-%m-%d %H:%M:%S\n\n；记录用例执行结果\nresult_log_enable = 1\n；记录用例分割线\nresult_log_separator = 1\n；分割线等级\nresult_log_level_separator = warning\n；异常信息等级\nresult_log_level_verbose = info\n```\n\npycharm插件：Ideolog（日志颜色）\n\n### 6. allure-pytest\n\n用途：生成allure数据文件\n\n文档：https://docs.gameta.io/allure-report/# pytest\n\n安装：\n\n```\npip install allure-pytest\n```\n\n配置：命令行参数\n\n```\n--alluredir=temps --clean-alluredir\n```\n\n本插件只生成数据，不生成报告：\n1. 创建目录 temps\n2. 清空目录内容\n3. 在目录中创建数据文件\n\n***\n\n## 3. 定制企业级的测试报告\n\nallure 是一个专业测试报告框架，是一个Java程序\nallure-pytest 是一个pytest插件，是一个python程序\n\nallure-pytest > 数据文件 > allure > 测试报告\n\n### 1. 搭建allure环境\n\n1. JDK\n\n​\t下载地址：https://www.oracle.com/java/technologies/downloads/#jdk17-windows\n\n​\t安装：双击运行、安装、重启\n​\t版本：建议 JDK 17+\n\n​\t验证：\n\n```\njava --version\n```\n\n2. allure源程序\n\n​\t下载地址：https://github.com/allure-framework/allure2/releases\n\n​\t解压：E:\\abc\\allure-2.24.1\\allure-2.24.1\\bin\n\n​\t修改环境变量：PATH\n\n​\t验证：allure\n​\tE:\\abc\\allure-2.24.1\\allure-2.24.1\\bin\\allure\n\n### 2. 生成企业级测试报告\n\ngenerate  根据数据生成HTML报告\nopen  打开生成的HTML报告\nserve  生成并打开HTML报告\n\nserve = generate + open\n\n```\nE:\\abc\\allure-2.24.1\\allure-2.24.1\\bin\\allure generate -o report temps # 根据数据生成HTML报告\nE:\\abc\\allure-2.24.1\\allure-2.24.1\\bin\\allure open report # 打开生成的HTML报告\n```\n\n```\nallure generate -o report temps # 根据数据生成HTML报告\nallure open report # 打开生成的HTML报告\n```\n\n### 3. 定制报告内容\n\n#### 1. 功能分组\n\n通过装饰器，对用例进行分组\n\n```python\n@allure.epic\n@allure.feature\n@allure.story\n@allure.title\n```\n\n敏捷开发的水语：\n\n- epic 史诗\n- feature 主题\n- story 故事\n- title 标题\n\nallure仅建立行为层次结构（另一种是基于套件）\n\n```python\n@allure.epic('码前自动化测试项目')\n@allure.feature('模块A')\n@allure.story('文件上传功能')\n@allure.title('上传失败')\ndef test_abc():\n    logger.info('11111')\n\n@allure.epic('码前自动化测试项目')\n@allure.feature('模块A')\n@allure.story('文件上传功能')\n@allure.title('上传成功')\ndef test_baa():\n    logger.info('22222')\n\n@allure.epic('码前自动化测试项目')\n@allure.feature('模块B')\n@allure.story('充值体现功能')\n@allure.title('充值成功')\ndef test_bbc():\n    logger.info('444444')\n```\n\n#### 2. 自定义logo\n\n1. 确定插件的名称 `custom-logo-plugin`\n\n2. 修改配置文件: \"E:\\abc\\allure-2.24.l\\allure-2.24.l\\config\\allure.yml\"\n\n3. 加入新的插件名称，启用插件\n\n4. 在插件中修改logo:\n    \"E:\\abc\\allure-2.24.l\\allure-2.24.l\\plugins\\custom-logo-plugin\\static\\styles.css\"\n\n```css\n.side-nav__brand{\n    background: url('logo.png') no-repeat left center !important;\n    margin-left: 22px;\n    height: 90px;\n    background-size: contain !important;\n}\n\n.side-nav__brand-text{\n    display: none;\n}\n```\n\n### 总结：配置文件\n\nrun.py\n\n```python\nimport pytest\nimport os\npytest.main()  # 启动测试框架, 自动生成allure数据\nos.system('allure generate -c -o report  temps')  # 手动生成allure报告\n```\n\npytest.ini\n\n```ini\n[pytest]\n\naddopts = --alluredir=temps  --clean-alluredir  tests/homework/test_2_1.py\n\nmarkers =\n  api\n  ui\n  ut\n  e2e\n\nlog_file = ./logs/pytest.log\nlog_file_level = info\nlog_file_format = %(levelname)-8s %(asctime)s [%(name)s:%(lineno)s]  : %(message)s\nlog_file_date_format  = %Y-%m-%d %H:%M:%S\n\n\n; 记录用例执行结果\nresult_log_enable = 1\n; 记录用例分割线\nresult_log_separator = 1\n;分割线等级\nresult_log_level_separator  = warning\n;异常信息等级\nresult_log_level_verbose = info\n\ndisable_test_id_escaping_and_forfeit_all_rights_to_community_support = 1\n```\n\n### 将常用包打包成 requirements.txt\n\n如果你希望保持每个项目独立，但又不想手动一个个安装依赖，可以：\n\n在原项目中导出依赖：\n\n```bash\npip freeze > requirements.txt\n```\n\n新建项目后，在终端运行：\n\n```bash\npip install -r requirements.txt\n```\n\n这样就能快速恢复所有依赖。\n\n# 三、接口自动化基础之Pytest框架之YAML详解以及Parametrize数据驱动(day15)\n\n## 1. YAML语法详解\n\nYAML是一个完全兼容JSON的数据格式。\n\n**重点：**  \n1. **YAML完全兼容JSON**  \n2. YAML和JSON一样，是数据，不是语句  \n3. 序列化：将编程语言中的数据转为文件  \n4. 反序列化：将文件中的内容转为编程语言中的数据  \n5. **文本文件：** 可以使用记事本之类的工具进行创建、编辑  \n\n**YAML优点：**  \n1. 结构更加清晰  \n2. 语法更加简洁，支持注释  \n3. 和Python风格相似  \n\n### 1. 序列化：Python转YAML\n\n**将Python数据转为JSON文件：**  \n\nhttps://tw.unicodery.com/5b57.html\n\n```python\ndata = {\n    \"数字\": [1, -1, 1.2],\n    \"字符串\": [\"1\", '-1', \"\"\"1.2\"\"\"],\n    \"布尔值\": [True, False],\n    \"空值\": None,\n    '列表': [[1, 2, 3], [-1, -2, -3]],\n    \"字典\": [{\"a\": 1}, {\"b\": 2}],\n}\n\nimport json\n\ns = json.dumps(data, ensure_ascii=False)  # Python转JSON字符串,且不将非 ASCII 字符转义为 Unicode 转义序列\n#dumps是从字符串中加载数据，dump是从文件中加载数据\nwith open(\"data.json\", \"w\", encoding=\"utf-8\") as f:\n    f.write(s)  # 创建JSON文件\n```\n\n**将Python数据转为YAML文件：**  \n```bash\npip install pyyaml\n```\n\n```python\ndata = {\n    \"数字\": [1, -1, 1.2],\n    \"字符串\": [\"1\", '-1', \"\"\"1.2\"\"\"],\n    \"布尔值\": [True, False],\n    \"空值\": None,\n    '列表': [[1, 2, 3], [-1, -2, -3]],\n    \"字典\": [{\"a\": 1}, {\"b\": 2}],\n}\n\nimport yaml\n\ns = yaml.safe_dump(data, allow_unicode=True, sort_keys=False)  # Python转YAML字符串\n\nwith open(\"data.yaml\", \"w\", encoding=\"utf-8\") as f:\n    f.write(s)  # 创建YAML文件\n```\n\n### 2. 反序列化：YAML转Python\n\n**将JSON转为Python：**  \n```python\nimport json\n\nwith open(\"data.json\", encoding=\"utf-8\") as f:\n    s = f.read()  # 得到字符串\n    data_json = json.loads(s)  # 得到数据\n#loads是从字符串中加载数据，load是从文件中加载数据\nprint(data_json)  # Python数据\n```\n\n**将YAML转为Python：**  \n```python\nimport yaml\n\nwith open(\"data.yaml\", encoding=\"utf-8\") as f:\n    s = f.read()  # 得到字符串\n    data_yaml = yaml.safe_load(s)  # 得到数据（安全加载）\n\nprint(data_yaml)  # Python数据\n```\n\n### 3. YAML特色\n\n1. 完全兼容JSON  \n2. 支持注释（使用`#`）  \n3. 成员通过符号表示：  \n   - `-`：表示列表（数组）成员  \n   - `:`：表示字典（对象）成员  \n4. 通过缩进（2个空格）表示层级（Python使用4个空格）  \n5. 自动处理类型  \n6. 支持强制指定类型  \n\n---\n\n## 2. pytest + YAML实现数据驱动测试\n\n数据驱动测试（Data Driver Test）= 参数化测试（pytest内置标记）+ 数据文件（YAML、JSON）\n\n### 1. 参数化测试用例\n\n```python\nimport pytest\n\ndef add(a, b):\n    return a + b\n\n@pytest.mark.parametrize(\n    \"a, b, c\",\n    [\n        (1, 1, 2),\n        (2, 2, 4),\n        (3, 3, 6),\n    ]\n)\ndef test_add(a, b, c):\n    assert add(a, b) == c\n```\n\n### 2. 数据内容委托到独立文件\n\n```python\nimport pytest\nimport yaml\n\ndef add(a, b):\n    return a + b\n\nwith open(\"ddt_data.yaml\", encoding=\"utf-8\") as f:\n    s = f.read()  # 字符串\n    data_yaml = yaml.safe_load(s)  # 数据\n\n@pytest.mark.parametrize(\n    \"a, b, c\",\n    data_yaml\n)\ndef test_add(a, b, c):\n    assert add(a, b) == c\n#同样的代码，同样的变量名，不会互相影响    \nwith open(\"data.yaml\", encoding=\"utf-8\") as f:\n    s = f.read() # 字符串\n\tdata_yaml = yaml.safe_load(s) # 数据\n@pytest.mark.parametrize(\n\t\"s\",\n\tdata_yaml\n)\ndef test_add_str(s):\n\tpass\n```\n\n**YAML文件内容（ddt_data.yaml）：**  \n\n```yaml\n- [1, 1, 2]\n- [2, 2, 4]\n- [3, 3, 6]\n- [a, b, c]\n- [a, 1, 2]\n```\n\n---\n\n### 3. 自动化测试框架结构\n\npytest是通用的测试框架，适用于：  \n- 白盒测试  \n- 单元测试  \n- 集成测试  \n- 黑盒测试（API、Web、App）  \n\n**文件路径获取：**  \n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2025-06-30/20250630121339-ddcff7.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2025-06-30/20250630121506-795a4e.png)\n\n**通用的黑盒测试框架：**  \n\n```\ncommons/      # 常用代码目录\ndata/         # 数据目录\nlogs/         # 日志目录\nreport/       # 测试报告目录\ntemps/        # allure临时数据目录\ntests/        # 测试用例目录\nconftest.py   # pytest动态配置、共享fixture\npytest.ini    # 配置文件\nrun.py        # 框架启动文件\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/接口自动化基础之pytest.md","raw":"---\ntitle: 接口自动化基础之pytest\ndate: 2025-06-29 11:47:00\ntags:\ncategories:\ncover:\ndescription:\n---\n\n# 一、接口自动化基础之pytest框架用法、规则、配置、标记(day13)\n\n创建新的项目：api_framwrok_241\n\n## 1. 什么是测试框架\n\n测试框架：抽象出来一个工具集合，提供大量组件或功能：\n\n- 用例发现：自动化的从各目录、各文件种收集测试用例  \n- 用例管理：根据需求对用例进行筛选、忽略、跳过等操作  \n- 环境管理：在用例执行前后，自动完成某些操作，构造合适的执行条件  \n- 用例执行：执行用例的测试步骤  \n- 断言：执行用例时，判定执行结果是否符合预期  \n\n大部分的编程语言都有对应测试框架：\n\n- Java: JUnit, TestNG  \n- php: phpunit  \n- Python: unittest, pytest  \n- 更多...... \n\nunittest:  \n- python内置、无需安装  \n- 用浓郁Java风格  \n- 无法升级、扩展  \n\npytest:  \n- 手动安装、自由切换版本  \n- 有浓郁Python风格  \n- 有丰富第三方生态进行扩展  \n- 完全兼容unittest  \n\n---\n\n## 2. pytest测试框架\n\n### 1. 安装pytest\n\n```bash\npip install pytest    # 安装pytest  \npip install pytest -U # 安装、升级pytest 到最新版  \npip install pytest==7.0   # 安装pytest 7.0版本  \n```\n\n- `pip install` 安装第三方库的命令  \n- `pytest` 第三方库的名字  \n- `-U` 升级，保持最新版  \n- `==7.0` 指定版本号  \n\n```bash\npip show pytest  # 查看pytest信息  \npytest  # 启动测试框架  \n```\n\n***\n\n### 2. 编写测试用例\n\n1. 创建：`test_`开头的py文件  \n2. 创建：`test_`开头的函数  \n3. 创建：`assert`断言  \n\n示例文件 `test_abc.py`：\n```python\ndef test_ok():\n    assert 1 == 1  # 测试通过\n\ndef test_fail():\n    assert 1 == 2  # 测试失败\n```\n\n***\n\n### 3. 执行测试用例\n\n1. 命令行  \n    ```bash\n    pytest\n    ```\n\n2. 代码  \n    ```python\n    import pytest\n    pytest.main()  # 启动测试框架\n    ```\n\n***\n\n### 4. 看懂执行结果\n\n1. 执行环境  \n    ```\n    platform win32 -- Python 3.12.0, pytest-8.1.1, pluggy-1.4.0\n    rootdir: E:\\PyProject\\api_framework_241\n    ```\n\n2. 用例收集情况  \n    ```\n    collected 2 items\n    ```\n\n3. 用例执行过程  \n    ```\n    test_abc.py .F\n    [100%]\n    ```\n\n| 缩写 | 单词    | 含义                       |\n| ---- | ------- | -------------------------- |\n| .    | passed  | 通过                       |\n| F    | failed  | 失败（用例执行时报错）     |\n| E    | error   | 出错（fixture执行报错）    |\n| s    | skipped | 跳过                       |\n| X    | xpassed | 预期外的通过（不符合预期） |\n| x    | xfailed | 预期内的失败（符合预期）   |\n\n4. 用例失败原因  \n    ```\n    ================================== FAILURES\n    ===================================\n    __________________________________ test_fail\n    __________________________________\n    def test_fail():\n    > assert 1 == 2 # 测试失败\n    E assert 1 == 2\n    test_abc.py:6: AssertionError\n    ```\n    \n5. 测试框架总结信息  \n    ```\n    =========================== short test summary info\n    ===========================\n    FAILED test_abc.py::test_fail - assert 1 == 2\n    ========================= 1 failed, 1 passed in 0.03s\n    =========================\n    ```\n\n***\n\n### 5. 用例发现规则\n\npytest识别、加载测试用例过程称之为用例发现，规则：\n\n1. 遍历所有的目录（venv除外）  \n2. 遍历所有 `test_`开头 或者 `_test`结尾的python文件  \n3. 遍历所有 `test` 开头的类  \n   - 类不能拥有`__init__`方法  \n4. 收集 `test_`开头的函数或者方法，作为测试用例  \n\n**重点**：pytest，只有函数和方法，才被视为测试用例，目录、文件、类，作为用例的容器  \n\n## 3. pytest高级用法\n\n### 1. 配置\n\npytest 有2种配置方式：\n\n- 命令行参数  \n- ini配置文件  \n\n查看所有的配置项  \n```bash\npytest -h  \n```\n\n可以分成三大部分\n1. 参数\n2. 配置项\n3. 环境变量\n\n常用的命令行参数：  \n\n- `-v`：增加详细程度  \n- `-q`：减少详细程度  \n- `-s`：不进行内容捕获，才能正常的输入输出  \n- `-x`：快速退出（冒烟测试）  \n\n常用的ini配置项：  \n1. 在根目录中的创建 `pytest.ini` 文件  \n2. 创建 pytest 选择器  \n3. 按行，添加配置项  \n\n示例 `pytest.ini`：  \n```ini\n[pytest]\naddopts = -s -x\n```\n\nadd options\n\n配置是用来改变pytest\n\n**约定大于配置**：对于成熟的工具来说，默认配置往往是比较好的配置，可以适用于大部分场景。如非必要，请勿更改。  \n\n***\n\n### 2. 标记mark\n\nmark主要用途是让用例和用例之间变得不同，实现用例的筛选。  \n\n#### 1. 用户自定义标记\n\n1. 注册（在 `pytest.ini` 中）：  \n    ```ini\n    [pytest]\n    markers =\n        api\n        ui\n        ut\n        e2e\n    ```\n\n2. 标记用例：  \n    ```python\n    import pytest\n    \n    @pytest.mark.ut\n    def test_ok():\n        assert 1 == 1  # 测试通过\n    \n    @pytest.mark.e2e\n    def test_fail():\n        assert 1 == 2  # 测试失败\n    \n    @pytest.mark.api\n    def test_baili():\n        pass\n    \n    @pytest.mark.ui\n    def test_beifan():\n        pass\n    ```\n\n3. 筛选用例：  \n    ```bash\n    pytest -m api  # 只执行拥有api标记的用例\n    pytest -m \"ut or api\"  # 只执行拥有ut或api标记的用例\n    pytest -m \"ui and api\"  # 只执行同时拥有ui和api标记的用例\n    ```\n\n#### 2. 框架内置标记\n\n1. 不需要注册，直接使用  \n2. 不仅用于筛选，还有特殊效果  \n3. 不同的标记，拥有不同的效果  \n\n示例：  \n```python\nimport pytest\n\n@pytest.mark.skip\ndef test_skip():\n    assert 1 == 2  # 失败\n\n@pytest.mark.skipif(1 == 1)  # 跳过\ndef test_skipif():\n    assert 1 == 2  # 失败\n\n@pytest.mark.skipif(1 == 2)  # 不会跳过\ndef test_skipif():\n    assert 1 == 2  # 失败\n\n@pytest.mark.xfail  # 预期失败\ndef test_passed():\n    assert 1 == 2  # 结果失败\n\n@pytest.mark.xfail  # 预期失败\ndef test_fail():\n    assert 1 == 1  # 结果成功\n```\n\n#### 3. 参数化测试\n\n参数化测试：通过数据修改参数，从而改变测试用例。  \n数据驱动测试 = 参数化测试 + 数据文件  \n\n**参数化之前**：  \n```python\ndef add(a, b):\n    return a + b\n\ndef test_add_1_10():\n    a = 1\n    b = 1\n    assert 2 == add(a, b)\n\ndef test_add_2_20():\n    a = 2\n    b = 2\n    assert 4 == add(a, b)\n\ndef test_add_2_30():\n    a = 2\n    b = 3\n    assert 5 == add(a, b)\n\ndef test_add_3_3():\n    a = 3\n    b = 3\n    assert 6 == add(a, b)\n```\n\n**参数化之后**：  \n```python\n@pytest.mark.parametrize(\n    \"a, b, c\",  # 1. 列出参数\n    [           # 2. 准备参数的值\n        [1, 1, 2],\n        [2, 2, 4],\n        [2, 3, 5],\n        [3, 3, 6],  # 3. 根据需求修改数据\n    ]\n)\ndef test_add_1_1(a, b, c):\n    assert c == add(a, b)\n```\n\n# 二、接口自动化基础之pytest框架fixture、常用插件、Allure报告、企业级定制(day14)\n\n## 1. pytest夹具fixture\n\n**夹具**: 在用例执行之前，执行之后，自动的运行自定义代码\n\n**场景**:  \n- 执行之前：创建测试账号，执行之后：删除测试账号  \n- 执行之前：启动浏览器，执行之后：关闭浏览器  \n- 执行之前：创建测试场景，执行之后，销毁测试场景  \n\n### 1. 创建fixture\n\n1. 创建函数  \n2. 添加装饰器  \n3. `yield`  \n\n```python\n@pytest.fixture  \ndef f():  \n    print('启动浏览器') # 前置操作，用例执行之前，自动执行  \n\n    yield '浏览器类型: chrome' # 返回值，使用例使用  \n\n    print('关闭浏览器') # 后置操作，用例执行之后，自动执行  \n```\n\n简便的方式创建fixture  \n\n```python\n@pytest.fixture  \ndef f(): # 使用fixture  \n    print('启动浏览器')  \n\n    return None  \n```\n\n### 2. 使用fixtures\n\n```python\ndef test_abc(f): # 使用fixture，得到它的返回值\n    print('我是用例内容，正在执行')\n\n    print('收到fixture的返回值:', f)\n```\n\n#### 执行结果\n\n```\ntest_abc.py::test_abc 启动浏览器  \n我是用例内容，正在执行  \n收到fixture的返回值：浏览器类型：chrome  \nPASSED关闭浏览器  \n```\n\n#### 简便的方式使用fixture\n\n```python\n@pytest.mark.usefixtures('f') # 使用fixture  \ndef test_abc():  \n    print('我是用例内容，正在执行')\n```\n\n### 3. fixture的作用范围\n\nfixture启动比较慢，能否共享（复用）fixture？\n\n- 每个用例执行fixture：5s * 3(fixture执行次数) = 15s  \n- 每个用例复用fixture：5s * 1(fixture执行次数) = 5s  \n\npytest中，用一个作用范围内fixture会自动的共享（复用）\n\npytest中，支持5级作用域：\n\n1. function：默认，不共享  \n2. class：同一个类中用例，自动共享  \n3. module：同一个模块（文件）中用例，自动共享  \n4. package：同一个包（目录）中用例，自动共享  \n5. session：所有用例，自动共享  \n\n```python\nimport pytest\n\n@pytest.fixture(scope='class')\ndef f():\n    print('启动浏览器') # 前置操作，用例执行之前，自动执行\n    yield '浏览器类型：chrome' # 返回值，供用例使用\n    print('关闭浏览器') # 后置操作，用例执行之后，自动执行\n\nclass Test_A:\n    def test_1(self, f):\n    pass\n    def test_2(self, f):\n    pass\n    class Test_B:\n    def test_3(self, f):\n    pass\n```\n\n### 4. conftest.py\n\n从名字上看：测试配置\n\n从内容上看：python代码\n\n从效果上看：被pytest自动导入，实现跨文件的fixture\n\n每个目录都可以创建一个conftest.py\n\n子目录的conftest.py可以屏蔽父目录的conftest.py\n\n哪个文件里用例更近，它的优先级就越高\n\n### 5. fixture的其他写法\n\n对于模块级夹具有 3 几种写法：\n\n1. setup / teardown  \n2. setUpModule / tearDownModule  \n3. setup_module / teardown_module  \n\n第一种是测试框架 nose 的写法，**pytest 从 7.2.0 开始不再兼容 nose 框架**，这种写法无了\n\n第二种是测试框架 unittest 的写法，这是 python 的标准库，应该会一直兼容下去\n第三种是测试框架 pytest 的写法，是仿 xunit 风格，使用非面向对象的方式来创建夹具在实际的运行过程中，所有的写法都会统一处理成 fixture，**建议一步到位直接写 fixture**\n\n***\n\n## 2. pytest常用插件\n\nhttps://pypi.org/\n\n### 1. pytest-html\n\n用途：生成HTML测试报告  \n文档：https://pytest-html.readthedocs.io/en/latest/installing.html  \n安装：  \n\n```\npip install pytest-html\n```\n\n配置：命令行参数  \n\n```\n--html=report.html --self-contained-html\n```\n\n### 2. pytest-xdist\n\n用途：并发执行用例  \n文档：https://pytest-xdist.readthedocs.io/en/stable/  \n\n安装：  \n\n```\npip install pytest-xdist\n```\n\n配置：命令行参数  \n\n```\n-n {0,1,2,3,...,n, auto}\n```\n\n注意：  \n1. 多进程额外增加资源  \n2. 多进程乱序  \n3. 多进程竞争资源（-s失效）  \n4. auto 自动判断进程数（CPU内核数）  \n\n### 3. pytest-order\n\n用途：定义用例的执行顺序  \n文档：https://pytest-order.readthedocs.io/en/latest/  \n\n安装：  \n\n```\npip install pytest-order\n```\n\n配置：标记  \n```python\n@pytest.mark.order(5) # 后执行  \ndef test_abc():  \n    pass  \n@pytest.mark.order(1) # 先执行  \ndef test_bbc():  \n    pass  \n```\n\n顺序规则：  \n● 先执行有order的用例，再执行没有order的用例  \n● 先执行order较小的用例，再执行order较大的用例  \n\n- order全局生效，可以跨文件、跨目录\n\n### 4. pytest-rerunfailures\n\n用途：用例失败时自动重试\n\n文档：https://github.com/pytest-dev/pytest-rerunfailures\n\n安装：\n\n```\npip install pytest-rerunfailures\n```\n\n配置：命令行参数\n\n```\n--reruns 5 --reruns-delay 1\n```\n\n### 5. pytest-result-log\n\n用途：把用例的执行结果保存到日志文件\n\n文档：https://mp.weixin.qq.com/s/f90fcj54pKvebnBahlllog\n\n安装：\n\n```\npip install pytest-result-log\n```\n\n配置：pytest.ini\n\n```\nlog_file = ./pytest.log\nlog_file_level = info\nlog_file_format = %(levelname)-8s %(asctime)s [%(name)s:%(lineno)s] : % (message)s\nlog_file_date_format = %Y-%m-%d %H:%M:%S\n\n；记录用例执行结果\nresult_log_enable = 1\n；记录用例分割线\nresult_log_separator = 1\n；分割线等级\nresult_log_level_separator = warning\n；异常信息等级\nresult_log_level_verbose = info\n```\n\npycharm插件：Ideolog（日志颜色）\n\n### 6. allure-pytest\n\n用途：生成allure数据文件\n\n文档：https://docs.gameta.io/allure-report/# pytest\n\n安装：\n\n```\npip install allure-pytest\n```\n\n配置：命令行参数\n\n```\n--alluredir=temps --clean-alluredir\n```\n\n本插件只生成数据，不生成报告：\n1. 创建目录 temps\n2. 清空目录内容\n3. 在目录中创建数据文件\n\n***\n\n## 3. 定制企业级的测试报告\n\nallure 是一个专业测试报告框架，是一个Java程序\nallure-pytest 是一个pytest插件，是一个python程序\n\nallure-pytest > 数据文件 > allure > 测试报告\n\n### 1. 搭建allure环境\n\n1. JDK\n\n​\t下载地址：https://www.oracle.com/java/technologies/downloads/#jdk17-windows\n\n​\t安装：双击运行、安装、重启\n​\t版本：建议 JDK 17+\n\n​\t验证：\n\n```\njava --version\n```\n\n2. allure源程序\n\n​\t下载地址：https://github.com/allure-framework/allure2/releases\n\n​\t解压：E:\\abc\\allure-2.24.1\\allure-2.24.1\\bin\n\n​\t修改环境变量：PATH\n\n​\t验证：allure\n​\tE:\\abc\\allure-2.24.1\\allure-2.24.1\\bin\\allure\n\n### 2. 生成企业级测试报告\n\ngenerate  根据数据生成HTML报告\nopen  打开生成的HTML报告\nserve  生成并打开HTML报告\n\nserve = generate + open\n\n```\nE:\\abc\\allure-2.24.1\\allure-2.24.1\\bin\\allure generate -o report temps # 根据数据生成HTML报告\nE:\\abc\\allure-2.24.1\\allure-2.24.1\\bin\\allure open report # 打开生成的HTML报告\n```\n\n```\nallure generate -o report temps # 根据数据生成HTML报告\nallure open report # 打开生成的HTML报告\n```\n\n### 3. 定制报告内容\n\n#### 1. 功能分组\n\n通过装饰器，对用例进行分组\n\n```python\n@allure.epic\n@allure.feature\n@allure.story\n@allure.title\n```\n\n敏捷开发的水语：\n\n- epic 史诗\n- feature 主题\n- story 故事\n- title 标题\n\nallure仅建立行为层次结构（另一种是基于套件）\n\n```python\n@allure.epic('码前自动化测试项目')\n@allure.feature('模块A')\n@allure.story('文件上传功能')\n@allure.title('上传失败')\ndef test_abc():\n    logger.info('11111')\n\n@allure.epic('码前自动化测试项目')\n@allure.feature('模块A')\n@allure.story('文件上传功能')\n@allure.title('上传成功')\ndef test_baa():\n    logger.info('22222')\n\n@allure.epic('码前自动化测试项目')\n@allure.feature('模块B')\n@allure.story('充值体现功能')\n@allure.title('充值成功')\ndef test_bbc():\n    logger.info('444444')\n```\n\n#### 2. 自定义logo\n\n1. 确定插件的名称 `custom-logo-plugin`\n\n2. 修改配置文件: \"E:\\abc\\allure-2.24.l\\allure-2.24.l\\config\\allure.yml\"\n\n3. 加入新的插件名称，启用插件\n\n4. 在插件中修改logo:\n    \"E:\\abc\\allure-2.24.l\\allure-2.24.l\\plugins\\custom-logo-plugin\\static\\styles.css\"\n\n```css\n.side-nav__brand{\n    background: url('logo.png') no-repeat left center !important;\n    margin-left: 22px;\n    height: 90px;\n    background-size: contain !important;\n}\n\n.side-nav__brand-text{\n    display: none;\n}\n```\n\n### 总结：配置文件\n\nrun.py\n\n```python\nimport pytest\nimport os\npytest.main()  # 启动测试框架, 自动生成allure数据\nos.system('allure generate -c -o report  temps')  # 手动生成allure报告\n```\n\npytest.ini\n\n```ini\n[pytest]\n\naddopts = --alluredir=temps  --clean-alluredir  tests/homework/test_2_1.py\n\nmarkers =\n  api\n  ui\n  ut\n  e2e\n\nlog_file = ./logs/pytest.log\nlog_file_level = info\nlog_file_format = %(levelname)-8s %(asctime)s [%(name)s:%(lineno)s]  : %(message)s\nlog_file_date_format  = %Y-%m-%d %H:%M:%S\n\n\n; 记录用例执行结果\nresult_log_enable = 1\n; 记录用例分割线\nresult_log_separator = 1\n;分割线等级\nresult_log_level_separator  = warning\n;异常信息等级\nresult_log_level_verbose = info\n\ndisable_test_id_escaping_and_forfeit_all_rights_to_community_support = 1\n```\n\n### 将常用包打包成 requirements.txt\n\n如果你希望保持每个项目独立，但又不想手动一个个安装依赖，可以：\n\n在原项目中导出依赖：\n\n```bash\npip freeze > requirements.txt\n```\n\n新建项目后，在终端运行：\n\n```bash\npip install -r requirements.txt\n```\n\n这样就能快速恢复所有依赖。\n\n# 三、接口自动化基础之Pytest框架之YAML详解以及Parametrize数据驱动(day15)\n\n## 1. YAML语法详解\n\nYAML是一个完全兼容JSON的数据格式。\n\n**重点：**  \n1. **YAML完全兼容JSON**  \n2. YAML和JSON一样，是数据，不是语句  \n3. 序列化：将编程语言中的数据转为文件  \n4. 反序列化：将文件中的内容转为编程语言中的数据  \n5. **文本文件：** 可以使用记事本之类的工具进行创建、编辑  \n\n**YAML优点：**  \n1. 结构更加清晰  \n2. 语法更加简洁，支持注释  \n3. 和Python风格相似  \n\n### 1. 序列化：Python转YAML\n\n**将Python数据转为JSON文件：**  \n\nhttps://tw.unicodery.com/5b57.html\n\n```python\ndata = {\n    \"数字\": [1, -1, 1.2],\n    \"字符串\": [\"1\", '-1', \"\"\"1.2\"\"\"],\n    \"布尔值\": [True, False],\n    \"空值\": None,\n    '列表': [[1, 2, 3], [-1, -2, -3]],\n    \"字典\": [{\"a\": 1}, {\"b\": 2}],\n}\n\nimport json\n\ns = json.dumps(data, ensure_ascii=False)  # Python转JSON字符串,且不将非 ASCII 字符转义为 Unicode 转义序列\n#dumps是从字符串中加载数据，dump是从文件中加载数据\nwith open(\"data.json\", \"w\", encoding=\"utf-8\") as f:\n    f.write(s)  # 创建JSON文件\n```\n\n**将Python数据转为YAML文件：**  \n```bash\npip install pyyaml\n```\n\n```python\ndata = {\n    \"数字\": [1, -1, 1.2],\n    \"字符串\": [\"1\", '-1', \"\"\"1.2\"\"\"],\n    \"布尔值\": [True, False],\n    \"空值\": None,\n    '列表': [[1, 2, 3], [-1, -2, -3]],\n    \"字典\": [{\"a\": 1}, {\"b\": 2}],\n}\n\nimport yaml\n\ns = yaml.safe_dump(data, allow_unicode=True, sort_keys=False)  # Python转YAML字符串\n\nwith open(\"data.yaml\", \"w\", encoding=\"utf-8\") as f:\n    f.write(s)  # 创建YAML文件\n```\n\n### 2. 反序列化：YAML转Python\n\n**将JSON转为Python：**  \n```python\nimport json\n\nwith open(\"data.json\", encoding=\"utf-8\") as f:\n    s = f.read()  # 得到字符串\n    data_json = json.loads(s)  # 得到数据\n#loads是从字符串中加载数据，load是从文件中加载数据\nprint(data_json)  # Python数据\n```\n\n**将YAML转为Python：**  \n```python\nimport yaml\n\nwith open(\"data.yaml\", encoding=\"utf-8\") as f:\n    s = f.read()  # 得到字符串\n    data_yaml = yaml.safe_load(s)  # 得到数据（安全加载）\n\nprint(data_yaml)  # Python数据\n```\n\n### 3. YAML特色\n\n1. 完全兼容JSON  \n2. 支持注释（使用`#`）  \n3. 成员通过符号表示：  \n   - `-`：表示列表（数组）成员  \n   - `:`：表示字典（对象）成员  \n4. 通过缩进（2个空格）表示层级（Python使用4个空格）  \n5. 自动处理类型  \n6. 支持强制指定类型  \n\n---\n\n## 2. pytest + YAML实现数据驱动测试\n\n数据驱动测试（Data Driver Test）= 参数化测试（pytest内置标记）+ 数据文件（YAML、JSON）\n\n### 1. 参数化测试用例\n\n```python\nimport pytest\n\ndef add(a, b):\n    return a + b\n\n@pytest.mark.parametrize(\n    \"a, b, c\",\n    [\n        (1, 1, 2),\n        (2, 2, 4),\n        (3, 3, 6),\n    ]\n)\ndef test_add(a, b, c):\n    assert add(a, b) == c\n```\n\n### 2. 数据内容委托到独立文件\n\n```python\nimport pytest\nimport yaml\n\ndef add(a, b):\n    return a + b\n\nwith open(\"ddt_data.yaml\", encoding=\"utf-8\") as f:\n    s = f.read()  # 字符串\n    data_yaml = yaml.safe_load(s)  # 数据\n\n@pytest.mark.parametrize(\n    \"a, b, c\",\n    data_yaml\n)\ndef test_add(a, b, c):\n    assert add(a, b) == c\n#同样的代码，同样的变量名，不会互相影响    \nwith open(\"data.yaml\", encoding=\"utf-8\") as f:\n    s = f.read() # 字符串\n\tdata_yaml = yaml.safe_load(s) # 数据\n@pytest.mark.parametrize(\n\t\"s\",\n\tdata_yaml\n)\ndef test_add_str(s):\n\tpass\n```\n\n**YAML文件内容（ddt_data.yaml）：**  \n\n```yaml\n- [1, 1, 2]\n- [2, 2, 4]\n- [3, 3, 6]\n- [a, b, c]\n- [a, 1, 2]\n```\n\n---\n\n### 3. 自动化测试框架结构\n\npytest是通用的测试框架，适用于：  \n- 白盒测试  \n- 单元测试  \n- 集成测试  \n- 黑盒测试（API、Web、App）  \n\n**文件路径获取：**  \n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2025-06-30/20250630121339-ddcff7.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2025-06-30/20250630121506-795a4e.png)\n\n**通用的黑盒测试框架：**  \n\n```\ncommons/      # 常用代码目录\ndata/         # 数据目录\nlogs/         # 日志目录\nreport/       # 测试报告目录\ntemps/        # allure临时数据目录\ntests/        # 测试用例目录\nconftest.py   # pytest动态配置、共享fixture\npytest.ini    # 配置文件\nrun.py        # 框架启动文件\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"接口自动化基础之pytest","published":1,"updated":"2025-06-30T07:51:21.893Z","comments":1,"layout":"post","photos":[],"_id":"cmcpwe25v001b9wnjc1ghhsbc","content":"<h1 id=\"一、接口自动化基础之pytest框架用法、规则、配置、标记-day13\"><a href=\"#一、接口自动化基础之pytest框架用法、规则、配置、标记-day13\" class=\"headerlink\" title=\"一、接口自动化基础之pytest框架用法、规则、配置、标记(day13)\"></a>一、接口自动化基础之pytest框架用法、规则、配置、标记(day13)</h1><p>创建新的项目：api_framwrok_241</p>\n<h2 id=\"1-什么是测试框架\"><a href=\"#1-什么是测试框架\" class=\"headerlink\" title=\"1. 什么是测试框架\"></a>1. 什么是测试框架</h2><p>测试框架：抽象出来一个工具集合，提供大量组件或功能：</p>\n<ul>\n<li>用例发现：自动化的从各目录、各文件种收集测试用例  </li>\n<li>用例管理：根据需求对用例进行筛选、忽略、跳过等操作  </li>\n<li>环境管理：在用例执行前后，自动完成某些操作，构造合适的执行条件  </li>\n<li>用例执行：执行用例的测试步骤  </li>\n<li>断言：执行用例时，判定执行结果是否符合预期</li>\n</ul>\n<p>大部分的编程语言都有对应测试框架：</p>\n<ul>\n<li>Java: JUnit, TestNG  </li>\n<li>php: phpunit  </li>\n<li>Python: unittest, pytest  </li>\n<li>更多……</li>\n</ul>\n<p>unittest:  </p>\n<ul>\n<li>python内置、无需安装  </li>\n<li>用浓郁Java风格  </li>\n<li>无法升级、扩展</li>\n</ul>\n<p>pytest:  </p>\n<ul>\n<li>手动安装、自由切换版本  </li>\n<li>有浓郁Python风格  </li>\n<li>有丰富第三方生态进行扩展  </li>\n<li>完全兼容unittest</li>\n</ul>\n<hr>\n<h2 id=\"2-pytest测试框架\"><a href=\"#2-pytest测试框架\" class=\"headerlink\" title=\"2. pytest测试框架\"></a>2. pytest测试框架</h2><h3 id=\"1-安装pytest\"><a href=\"#1-安装pytest\" class=\"headerlink\" title=\"1. 安装pytest\"></a>1. 安装pytest</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pytest    <span class=\"comment\"># 安装pytest  </span></span><br><span class=\"line\">pip install pytest -U <span class=\"comment\"># 安装、升级pytest 到最新版  </span></span><br><span class=\"line\">pip install pytest==7.0   <span class=\"comment\"># 安装pytest 7.0版本  </span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>pip install</code> 安装第三方库的命令  </li>\n<li><code>pytest</code> 第三方库的名字  </li>\n<li><code>-U</code> 升级，保持最新版  </li>\n<li><code>==7.0</code> 指定版本号</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip show pytest  <span class=\"comment\"># 查看pytest信息  </span></span><br><span class=\"line\">pytest  <span class=\"comment\"># 启动测试框架  </span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"2-编写测试用例\"><a href=\"#2-编写测试用例\" class=\"headerlink\" title=\"2. 编写测试用例\"></a>2. 编写测试用例</h3><ol>\n<li>创建：<code>test_</code>开头的py文件  </li>\n<li>创建：<code>test_</code>开头的函数  </li>\n<li>创建：<code>assert</code>断言</li>\n</ol>\n<p>示例文件 <code>test_abc.py</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_ok</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">1</span>  <span class=\"comment\"># 测试通过</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fail</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">2</span>  <span class=\"comment\"># 测试失败</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-执行测试用例\"><a href=\"#3-执行测试用例\" class=\"headerlink\" title=\"3. 执行测试用例\"></a>3. 执行测试用例</h3><ol>\n<li><p>命令行  </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pytest</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>代码  </p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\">pytest.main()  <span class=\"comment\"># 启动测试框架</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h3 id=\"4-看懂执行结果\"><a href=\"#4-看懂执行结果\" class=\"headerlink\" title=\"4. 看懂执行结果\"></a>4. 看懂执行结果</h3><ol>\n<li><p>执行环境  </p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">platform win32 -- Python 3.12.0, pytest-8.1.1, pluggy-1.4.0</span><br><span class=\"line\">rootdir: E:\\PyProject\\api_framework_241</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用例收集情况  </p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">collected 2 items</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用例执行过程  </p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test_abc.py .F</span><br><span class=\"line\">[100%]</span><br></pre></td></tr></table></figure></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>缩写</th>\n<th>单词</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.</td>\n<td>passed</td>\n<td>通过</td>\n</tr>\n<tr>\n<td>F</td>\n<td>failed</td>\n<td>失败（用例执行时报错）</td>\n</tr>\n<tr>\n<td>E</td>\n<td>error</td>\n<td>出错（fixture执行报错）</td>\n</tr>\n<tr>\n<td>s</td>\n<td>skipped</td>\n<td>跳过</td>\n</tr>\n<tr>\n<td>X</td>\n<td>xpassed</td>\n<td>预期外的通过（不符合预期）</td>\n</tr>\n<tr>\n<td>x</td>\n<td>xfailed</td>\n<td>预期内的失败（符合预期）</td>\n</tr>\n</tbody></table>\n<ol start=\"4\">\n<li><p>用例失败原因  </p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">================================== FAILURES</span><br><span class=\"line\">===================================</span><br><span class=\"line\">__________________________________ test_fail</span><br><span class=\"line\">__________________________________</span><br><span class=\"line\">def test_fail():</span><br><span class=\"line\">&gt; assert 1 == 2 # 测试失败</span><br><span class=\"line\">E assert 1 == 2</span><br><span class=\"line\">test_abc.py:6: AssertionError</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试框架总结信息  </p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=========================== short test summary info</span><br><span class=\"line\">===========================</span><br><span class=\"line\">FAILED test_abc.py::test_fail - assert 1 == 2</span><br><span class=\"line\">========================= 1 failed, 1 passed in 0.03s</span><br><span class=\"line\">=========================</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h3 id=\"5-用例发现规则\"><a href=\"#5-用例发现规则\" class=\"headerlink\" title=\"5. 用例发现规则\"></a>5. 用例发现规则</h3><p>pytest识别、加载测试用例过程称之为用例发现，规则：</p>\n<ol>\n<li>遍历所有的目录（venv除外）  </li>\n<li>遍历所有 <code>test_</code>开头 或者 <code>_test</code>结尾的python文件  </li>\n<li>遍历所有 <code>test</code> 开头的类  <ul>\n<li>类不能拥有<code>__init__</code>方法</li>\n</ul>\n</li>\n<li>收集 <code>test_</code>开头的函数或者方法，作为测试用例</li>\n</ol>\n<p><strong>重点</strong>：pytest，只有函数和方法，才被视为测试用例，目录、文件、类，作为用例的容器  </p>\n<h2 id=\"3-pytest高级用法\"><a href=\"#3-pytest高级用法\" class=\"headerlink\" title=\"3. pytest高级用法\"></a>3. pytest高级用法</h2><h3 id=\"1-配置\"><a href=\"#1-配置\" class=\"headerlink\" title=\"1. 配置\"></a>1. 配置</h3><p>pytest 有2种配置方式：</p>\n<ul>\n<li>命令行参数  </li>\n<li>ini配置文件</li>\n</ul>\n<p>查看所有的配置项  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pytest -h  </span><br></pre></td></tr></table></figure>\n\n<p>可以分成三大部分</p>\n<ol>\n<li>参数</li>\n<li>配置项</li>\n<li>环境变量</li>\n</ol>\n<p>常用的命令行参数：  </p>\n<ul>\n<li><code>-v</code>：增加详细程度  </li>\n<li><code>-q</code>：减少详细程度  </li>\n<li><code>-s</code>：不进行内容捕获，才能正常的输入输出  </li>\n<li><code>-x</code>：快速退出（冒烟测试）</li>\n</ul>\n<p>常用的ini配置项：  </p>\n<ol>\n<li>在根目录中的创建 <code>pytest.ini</code> 文件  </li>\n<li>创建 pytest 选择器  </li>\n<li>按行，添加配置项</li>\n</ol>\n<p>示例 <code>pytest.ini</code>：  </p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[pytest]</span></span><br><span class=\"line\"><span class=\"attr\">addopts</span> = -s -x</span><br></pre></td></tr></table></figure>\n\n<p>add options</p>\n<p>配置是用来改变pytest</p>\n<p><strong>约定大于配置</strong>：对于成熟的工具来说，默认配置往往是比较好的配置，可以适用于大部分场景。如非必要，请勿更改。  </p>\n<hr>\n<h3 id=\"2-标记mark\"><a href=\"#2-标记mark\" class=\"headerlink\" title=\"2. 标记mark\"></a>2. 标记mark</h3><p>mark主要用途是让用例和用例之间变得不同，实现用例的筛选。  </p>\n<h4 id=\"1-用户自定义标记\"><a href=\"#1-用户自定义标记\" class=\"headerlink\" title=\"1. 用户自定义标记\"></a>1. 用户自定义标记</h4><ol>\n<li><p>注册（在 <code>pytest.ini</code> 中）：  </p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[pytest]</span></span><br><span class=\"line\"><span class=\"attr\">markers</span> =</span><br><span class=\"line\">    api</span><br><span class=\"line\">    ui</span><br><span class=\"line\">    ut</span><br><span class=\"line\">    e2e</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>标记用例：  </p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.ut</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_ok</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">1</span>  <span class=\"comment\"># 测试通过</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.e2e</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fail</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">2</span>  <span class=\"comment\"># 测试失败</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.api</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_baili</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.ui</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_beifan</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>筛选用例：  </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pytest -m api  <span class=\"comment\"># 只执行拥有api标记的用例</span></span><br><span class=\"line\">pytest -m <span class=\"string\">&quot;ut or api&quot;</span>  <span class=\"comment\"># 只执行拥有ut或api标记的用例</span></span><br><span class=\"line\">pytest -m <span class=\"string\">&quot;ui and api&quot;</span>  <span class=\"comment\"># 只执行同时拥有ui和api标记的用例</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"2-框架内置标记\"><a href=\"#2-框架内置标记\" class=\"headerlink\" title=\"2. 框架内置标记\"></a>2. 框架内置标记</h4><ol>\n<li>不需要注册，直接使用  </li>\n<li>不仅用于筛选，还有特殊效果  </li>\n<li>不同的标记，拥有不同的效果</li>\n</ol>\n<p>示例：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skip</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_skip</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">2</span>  <span class=\"comment\"># 失败</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"><span class=\"number\">1</span> == <span class=\"number\">1</span></span>)  </span><span class=\"comment\"># 跳过</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_skipif</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">2</span>  <span class=\"comment\"># 失败</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"><span class=\"number\">1</span> == <span class=\"number\">2</span></span>)  </span><span class=\"comment\"># 不会跳过</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_skipif</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">2</span>  <span class=\"comment\"># 失败</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.xfail  </span><span class=\"comment\"># 预期失败</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_passed</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">2</span>  <span class=\"comment\"># 结果失败</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.xfail  </span><span class=\"comment\"># 预期失败</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fail</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">1</span>  <span class=\"comment\"># 结果成功</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-参数化测试\"><a href=\"#3-参数化测试\" class=\"headerlink\" title=\"3. 参数化测试\"></a>3. 参数化测试</h4><p>参数化测试：通过数据修改参数，从而改变测试用例。<br>数据驱动测试 &#x3D; 参数化测试 + 数据文件  </p>\n<p><strong>参数化之前</strong>：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_1_10</span>():</span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\">    b = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">2</span> == add(a, b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_2_20</span>():</span><br><span class=\"line\">    a = <span class=\"number\">2</span></span><br><span class=\"line\">    b = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">4</span> == add(a, b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_2_30</span>():</span><br><span class=\"line\">    a = <span class=\"number\">2</span></span><br><span class=\"line\">    b = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">5</span> == add(a, b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_3_3</span>():</span><br><span class=\"line\">    a = <span class=\"number\">3</span></span><br><span class=\"line\">    b = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">6</span> == add(a, b)</span><br></pre></td></tr></table></figure>\n\n<p><strong>参数化之后</strong>：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;a, b, c&quot;</span>,  <span class=\"comment\"># 1. 列出参数</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [           <span class=\"comment\"># 2. 准备参数的值</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        [<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        [<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>],  <span class=\"comment\"># 3. 根据需求修改数据</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ]</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_1_1</span>(<span class=\"params\">a, b, c</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> c == add(a, b)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二、接口自动化基础之pytest框架fixture、常用插件、Allure报告、企业级定制-day14\"><a href=\"#二、接口自动化基础之pytest框架fixture、常用插件、Allure报告、企业级定制-day14\" class=\"headerlink\" title=\"二、接口自动化基础之pytest框架fixture、常用插件、Allure报告、企业级定制(day14)\"></a>二、接口自动化基础之pytest框架fixture、常用插件、Allure报告、企业级定制(day14)</h1><h2 id=\"1-pytest夹具fixture\"><a href=\"#1-pytest夹具fixture\" class=\"headerlink\" title=\"1. pytest夹具fixture\"></a>1. pytest夹具fixture</h2><p><strong>夹具</strong>: 在用例执行之前，执行之后，自动的运行自定义代码</p>\n<p><strong>场景</strong>:  </p>\n<ul>\n<li>执行之前：创建测试账号，执行之后：删除测试账号  </li>\n<li>执行之前：启动浏览器，执行之后：关闭浏览器  </li>\n<li>执行之前：创建测试场景，执行之后，销毁测试场景</li>\n</ul>\n<h3 id=\"1-创建fixture\"><a href=\"#1-创建fixture\" class=\"headerlink\" title=\"1. 创建fixture\"></a>1. 创建fixture</h3><ol>\n<li>创建函数  </li>\n<li>添加装饰器  </li>\n<li><code>yield</code></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@pytest.fixture  </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>():  </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;启动浏览器&#x27;</span>) <span class=\"comment\"># 前置操作，用例执行之前，自动执行  </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;浏览器类型: chrome&#x27;</span> <span class=\"comment\"># 返回值，使用例使用  </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;关闭浏览器&#x27;</span>) <span class=\"comment\"># 后置操作，用例执行之后，自动执行  </span></span><br></pre></td></tr></table></figure>\n\n<p>简便的方式创建fixture  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@pytest.fixture  </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>(): <span class=\"comment\"># 使用fixture  </span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;启动浏览器&#x27;</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">None</span>  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用fixtures\"><a href=\"#2-使用fixtures\" class=\"headerlink\" title=\"2. 使用fixtures\"></a>2. 使用fixtures</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abc</span>(<span class=\"params\">f</span>): <span class=\"comment\"># 使用fixture，得到它的返回值</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;我是用例内容，正在执行&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;收到fixture的返回值:&#x27;</span>, f)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test_abc.py::test_abc 启动浏览器  </span><br><span class=\"line\">我是用例内容，正在执行  </span><br><span class=\"line\">收到fixture的返回值：浏览器类型：chrome  </span><br><span class=\"line\">PASSED关闭浏览器  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"简便的方式使用fixture\"><a href=\"#简便的方式使用fixture\" class=\"headerlink\" title=\"简便的方式使用fixture\"></a>简便的方式使用fixture</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@pytest.mark.usefixtures(<span class=\"params\"><span class=\"string\">&#x27;f&#x27;</span></span>) </span><span class=\"comment\"># 使用fixture  </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abc</span>():  </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;我是用例内容，正在执行&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-fixture的作用范围\"><a href=\"#3-fixture的作用范围\" class=\"headerlink\" title=\"3. fixture的作用范围\"></a>3. fixture的作用范围</h3><p>fixture启动比较慢，能否共享（复用）fixture？</p>\n<ul>\n<li>每个用例执行fixture：5s * 3(fixture执行次数) &#x3D; 15s  </li>\n<li>每个用例复用fixture：5s * 1(fixture执行次数) &#x3D; 5s</li>\n</ul>\n<p>pytest中，用一个作用范围内fixture会自动的共享（复用）</p>\n<p>pytest中，支持5级作用域：</p>\n<ol>\n<li>function：默认，不共享  </li>\n<li>class：同一个类中用例，自动共享  </li>\n<li>module：同一个模块（文件）中用例，自动共享  </li>\n<li>package：同一个包（目录）中用例，自动共享  </li>\n<li>session：所有用例，自动共享</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.fixture(<span class=\"params\">scope=<span class=\"string\">&#x27;class&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;启动浏览器&#x27;</span>) <span class=\"comment\"># 前置操作，用例执行之前，自动执行</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;浏览器类型：chrome&#x27;</span> <span class=\"comment\"># 返回值，供用例使用</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;关闭浏览器&#x27;</span>) <span class=\"comment\"># 后置操作，用例执行之后，自动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test_A</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_1</span>(<span class=\"params\">self, f</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_2</span>(<span class=\"params\">self, f</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Test_B</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_3</span>(<span class=\"params\">self, f</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-conftest-py\"><a href=\"#4-conftest-py\" class=\"headerlink\" title=\"4. conftest.py\"></a>4. conftest.py</h3><p>从名字上看：测试配置</p>\n<p>从内容上看：python代码</p>\n<p>从效果上看：被pytest自动导入，实现跨文件的fixture</p>\n<p>每个目录都可以创建一个conftest.py</p>\n<p>子目录的conftest.py可以屏蔽父目录的conftest.py</p>\n<p>哪个文件里用例更近，它的优先级就越高</p>\n<h3 id=\"5-fixture的其他写法\"><a href=\"#5-fixture的其他写法\" class=\"headerlink\" title=\"5. fixture的其他写法\"></a>5. fixture的其他写法</h3><p>对于模块级夹具有 3 几种写法：</p>\n<ol>\n<li>setup &#x2F; teardown  </li>\n<li>setUpModule &#x2F; tearDownModule  </li>\n<li>setup_module &#x2F; teardown_module</li>\n</ol>\n<p>第一种是测试框架 nose 的写法，<strong>pytest 从 7.2.0 开始不再兼容 nose 框架</strong>，这种写法无了</p>\n<p>第二种是测试框架 unittest 的写法，这是 python 的标准库，应该会一直兼容下去<br>第三种是测试框架 pytest 的写法，是仿 xunit 风格，使用非面向对象的方式来创建夹具在实际的运行过程中，所有的写法都会统一处理成 fixture，<strong>建议一步到位直接写 fixture</strong></p>\n<hr>\n<h2 id=\"2-pytest常用插件\"><a href=\"#2-pytest常用插件\" class=\"headerlink\" title=\"2. pytest常用插件\"></a>2. pytest常用插件</h2><p><a href=\"https://pypi.org/\">https://pypi.org/</a></p>\n<h3 id=\"1-pytest-html\"><a href=\"#1-pytest-html\" class=\"headerlink\" title=\"1. pytest-html\"></a>1. pytest-html</h3><p>用途：生成HTML测试报告<br>文档：<a href=\"https://pytest-html.readthedocs.io/en/latest/installing.html\">https://pytest-html.readthedocs.io/en/latest/installing.html</a><br>安装：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pytest-html</span><br></pre></td></tr></table></figure>\n\n<p>配置：命令行参数  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--html=report.html --self-contained-html</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-pytest-xdist\"><a href=\"#2-pytest-xdist\" class=\"headerlink\" title=\"2. pytest-xdist\"></a>2. pytest-xdist</h3><p>用途：并发执行用例<br>文档：<a href=\"https://pytest-xdist.readthedocs.io/en/stable/\">https://pytest-xdist.readthedocs.io/en/stable/</a>  </p>\n<p>安装：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pytest-xdist</span><br></pre></td></tr></table></figure>\n\n<p>配置：命令行参数  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-n &#123;0,1,2,3,...,n, auto&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：  </p>\n<ol>\n<li>多进程额外增加资源  </li>\n<li>多进程乱序  </li>\n<li>多进程竞争资源（-s失效）  </li>\n<li>auto 自动判断进程数（CPU内核数）</li>\n</ol>\n<h3 id=\"3-pytest-order\"><a href=\"#3-pytest-order\" class=\"headerlink\" title=\"3. pytest-order\"></a>3. pytest-order</h3><p>用途：定义用例的执行顺序<br>文档：<a href=\"https://pytest-order.readthedocs.io/en/latest/\">https://pytest-order.readthedocs.io/en/latest/</a>  </p>\n<p>安装：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pytest-order</span><br></pre></td></tr></table></figure>\n\n<p>配置：标记  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@pytest.mark.order(<span class=\"params\"><span class=\"number\">5</span></span>) </span><span class=\"comment\"># 后执行  </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abc</span>():  </span><br><span class=\"line\">    <span class=\"keyword\">pass</span>  </span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.order(<span class=\"params\"><span class=\"number\">1</span></span>) </span><span class=\"comment\"># 先执行  </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_bbc</span>():  </span><br><span class=\"line\">    <span class=\"keyword\">pass</span>  </span><br></pre></td></tr></table></figure>\n\n<p>顺序规则：<br>● 先执行有order的用例，再执行没有order的用例<br>● 先执行order较小的用例，再执行order较大的用例  </p>\n<ul>\n<li>order全局生效，可以跨文件、跨目录</li>\n</ul>\n<h3 id=\"4-pytest-rerunfailures\"><a href=\"#4-pytest-rerunfailures\" class=\"headerlink\" title=\"4. pytest-rerunfailures\"></a>4. pytest-rerunfailures</h3><p>用途：用例失败时自动重试</p>\n<p>文档：<a href=\"https://github.com/pytest-dev/pytest-rerunfailures\">https://github.com/pytest-dev/pytest-rerunfailures</a></p>\n<p>安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pytest-rerunfailures</span><br></pre></td></tr></table></figure>\n\n<p>配置：命令行参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--reruns 5 --reruns-delay 1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-pytest-result-log\"><a href=\"#5-pytest-result-log\" class=\"headerlink\" title=\"5. pytest-result-log\"></a>5. pytest-result-log</h3><p>用途：把用例的执行结果保存到日志文件</p>\n<p>文档：<a href=\"https://mp.weixin.qq.com/s/f90fcj54pKvebnBahlllog\">https://mp.weixin.qq.com/s/f90fcj54pKvebnBahlllog</a></p>\n<p>安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pytest-result-log</span><br></pre></td></tr></table></figure>\n\n<p>配置：pytest.ini</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_file = ./pytest.log</span><br><span class=\"line\">log_file_level = info</span><br><span class=\"line\">log_file_format = %(levelname)-8s %(asctime)s [%(name)s:%(lineno)s] : % (message)s</span><br><span class=\"line\">log_file_date_format = %Y-%m-%d %H:%M:%S</span><br><span class=\"line\"></span><br><span class=\"line\">；记录用例执行结果</span><br><span class=\"line\">result_log_enable = 1</span><br><span class=\"line\">；记录用例分割线</span><br><span class=\"line\">result_log_separator = 1</span><br><span class=\"line\">；分割线等级</span><br><span class=\"line\">result_log_level_separator = warning</span><br><span class=\"line\">；异常信息等级</span><br><span class=\"line\">result_log_level_verbose = info</span><br></pre></td></tr></table></figure>\n\n<p>pycharm插件：Ideolog（日志颜色）</p>\n<h3 id=\"6-allure-pytest\"><a href=\"#6-allure-pytest\" class=\"headerlink\" title=\"6. allure-pytest\"></a>6. allure-pytest</h3><p>用途：生成allure数据文件</p>\n<p>文档：<a href=\"https://docs.gameta.io/allure-report/#\">https://docs.gameta.io/allure-report/#</a> pytest</p>\n<p>安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install allure-pytest</span><br></pre></td></tr></table></figure>\n\n<p>配置：命令行参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--alluredir=temps --clean-alluredir</span><br></pre></td></tr></table></figure>\n\n<p>本插件只生成数据，不生成报告：</p>\n<ol>\n<li>创建目录 temps</li>\n<li>清空目录内容</li>\n<li>在目录中创建数据文件</li>\n</ol>\n<hr>\n<h2 id=\"3-定制企业级的测试报告\"><a href=\"#3-定制企业级的测试报告\" class=\"headerlink\" title=\"3. 定制企业级的测试报告\"></a>3. 定制企业级的测试报告</h2><p>allure 是一个专业测试报告框架，是一个Java程序<br>allure-pytest 是一个pytest插件，是一个python程序</p>\n<p>allure-pytest &gt; 数据文件 &gt; allure &gt; 测试报告</p>\n<h3 id=\"1-搭建allure环境\"><a href=\"#1-搭建allure环境\" class=\"headerlink\" title=\"1. 搭建allure环境\"></a>1. 搭建allure环境</h3><ol>\n<li>JDK</li>\n</ol>\n<p>​\t下载地址：<a href=\"https://www.oracle.com/java/technologies/downloads/#jdk17-windows\">https://www.oracle.com/java/technologies/downloads/#jdk17-windows</a></p>\n<p>​\t安装：双击运行、安装、重启<br>​\t版本：建议 JDK 17+</p>\n<p>​\t验证：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java --version</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>allure源程序</li>\n</ol>\n<p>​\t下载地址：<a href=\"https://github.com/allure-framework/allure2/releases\">https://github.com/allure-framework/allure2/releases</a></p>\n<p>​\t解压：E:\\abc\\allure-2.24.1\\allure-2.24.1\\bin</p>\n<p>​\t修改环境变量：PATH</p>\n<p>​\t验证：allure<br>​\tE:\\abc\\allure-2.24.1\\allure-2.24.1\\bin\\allure</p>\n<h3 id=\"2-生成企业级测试报告\"><a href=\"#2-生成企业级测试报告\" class=\"headerlink\" title=\"2. 生成企业级测试报告\"></a>2. 生成企业级测试报告</h3><p>generate  根据数据生成HTML报告<br>open  打开生成的HTML报告<br>serve  生成并打开HTML报告</p>\n<p>serve &#x3D; generate + open</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\abc\\allure-2.24.1\\allure-2.24.1\\bin\\allure generate -o report temps # 根据数据生成HTML报告</span><br><span class=\"line\">E:\\abc\\allure-2.24.1\\allure-2.24.1\\bin\\allure open report # 打开生成的HTML报告</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allure generate -o report temps # 根据数据生成HTML报告</span><br><span class=\"line\">allure open report # 打开生成的HTML报告</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-定制报告内容\"><a href=\"#3-定制报告内容\" class=\"headerlink\" title=\"3. 定制报告内容\"></a>3. 定制报告内容</h3><h4 id=\"1-功能分组\"><a href=\"#1-功能分组\" class=\"headerlink\" title=\"1. 功能分组\"></a>1. 功能分组</h4><p>通过装饰器，对用例进行分组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.epic</span></span><br><span class=\"line\"><span class=\"meta\">@allure.feature</span></span><br><span class=\"line\"><span class=\"meta\">@allure.story</span></span><br><span class=\"line\"><span class=\"meta\">@allure.title</span></span><br></pre></td></tr></table></figure>\n\n<p>敏捷开发的水语：</p>\n<ul>\n<li>epic 史诗</li>\n<li>feature 主题</li>\n<li>story 故事</li>\n<li>title 标题</li>\n</ul>\n<p>allure仅建立行为层次结构（另一种是基于套件）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.epic(<span class=\"params\"><span class=\"string\">&#x27;码前自动化测试项目&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.feature(<span class=\"params\"><span class=\"string\">&#x27;模块A&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.story(<span class=\"params\"><span class=\"string\">&#x27;文件上传功能&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.title(<span class=\"params\"><span class=\"string\">&#x27;上传失败&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abc</span>():</span><br><span class=\"line\">    logger.info(<span class=\"string\">&#x27;11111&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@allure.epic(<span class=\"params\"><span class=\"string\">&#x27;码前自动化测试项目&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.feature(<span class=\"params\"><span class=\"string\">&#x27;模块A&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.story(<span class=\"params\"><span class=\"string\">&#x27;文件上传功能&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.title(<span class=\"params\"><span class=\"string\">&#x27;上传成功&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_baa</span>():</span><br><span class=\"line\">    logger.info(<span class=\"string\">&#x27;22222&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@allure.epic(<span class=\"params\"><span class=\"string\">&#x27;码前自动化测试项目&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.feature(<span class=\"params\"><span class=\"string\">&#x27;模块B&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.story(<span class=\"params\"><span class=\"string\">&#x27;充值体现功能&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.title(<span class=\"params\"><span class=\"string\">&#x27;充值成功&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_bbc</span>():</span><br><span class=\"line\">    logger.info(<span class=\"string\">&#x27;444444&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-自定义logo\"><a href=\"#2-自定义logo\" class=\"headerlink\" title=\"2. 自定义logo\"></a>2. 自定义logo</h4><ol>\n<li><p>确定插件的名称 <code>custom-logo-plugin</code></p>\n</li>\n<li><p>修改配置文件: “E:\\abc\\allure-2.24.l\\allure-2.24.l\\config\\allure.yml”</p>\n</li>\n<li><p>加入新的插件名称，启用插件</p>\n</li>\n<li><p>在插件中修改logo:<br> “E:\\abc\\allure-2.24.l\\allure-2.24.l\\plugins\\custom-logo-plugin\\static\\styles.css”</p>\n</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.side-nav__brand</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;logo.png&#x27;</span>) no-repeat left center <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">22px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: contain <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.side-nav__brand-text</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结：配置文件\"><a href=\"#总结：配置文件\" class=\"headerlink\" title=\"总结：配置文件\"></a>总结：配置文件</h3><p>run.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">pytest.main()  <span class=\"comment\"># 启动测试框架, 自动生成allure数据</span></span><br><span class=\"line\">os.system(<span class=\"string\">&#x27;allure generate -c -o report  temps&#x27;</span>)  <span class=\"comment\"># 手动生成allure报告</span></span><br></pre></td></tr></table></figure>\n\n<p>pytest.ini</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[pytest]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">addopts</span> = --alluredir=temps  --clean-alluredir  tests/homework/test_<span class=\"number\">2_1</span>.py</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">markers</span> =</span><br><span class=\"line\">  api</span><br><span class=\"line\">  ui</span><br><span class=\"line\">  ut</span><br><span class=\"line\">  e2e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">log_file</span> = ./logs/pytest.log</span><br><span class=\"line\"><span class=\"attr\">log_file_level</span> = info</span><br><span class=\"line\"><span class=\"attr\">log_file_format</span> = %(levelname)-<span class=\"number\">8</span>s %(asctime)s [%(name)s:%(line<span class=\"literal\">no</span>)s]  : %(message)s</span><br><span class=\"line\"><span class=\"attr\">log_file_date_format</span>  = %Y-%m-%d %H:%M:%S</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">; 记录用例执行结果</span></span><br><span class=\"line\"><span class=\"attr\">result_log_enable</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">; 记录用例分割线</span></span><br><span class=\"line\"><span class=\"attr\">result_log_separator</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">;分割线等级</span></span><br><span class=\"line\"><span class=\"attr\">result_log_level_separator</span>  = warning</span><br><span class=\"line\"><span class=\"comment\">;异常信息等级</span></span><br><span class=\"line\"><span class=\"attr\">result_log_level_verbose</span> = info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">disable_test_id_escaping_and_forfeit_all_rights_to_community_support</span> = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将常用包打包成-requirements-txt\"><a href=\"#将常用包打包成-requirements-txt\" class=\"headerlink\" title=\"将常用包打包成 requirements.txt\"></a>将常用包打包成 requirements.txt</h3><p>如果你希望保持每个项目独立，但又不想手动一个个安装依赖，可以：</p>\n<p>在原项目中导出依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>\n\n<p>新建项目后，在终端运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n\n<p>这样就能快速恢复所有依赖。</p>\n<h1 id=\"三、接口自动化基础之Pytest框架之YAML详解以及Parametrize数据驱动-day15\"><a href=\"#三、接口自动化基础之Pytest框架之YAML详解以及Parametrize数据驱动-day15\" class=\"headerlink\" title=\"三、接口自动化基础之Pytest框架之YAML详解以及Parametrize数据驱动(day15)\"></a>三、接口自动化基础之Pytest框架之YAML详解以及Parametrize数据驱动(day15)</h1><h2 id=\"1-YAML语法详解\"><a href=\"#1-YAML语法详解\" class=\"headerlink\" title=\"1. YAML语法详解\"></a>1. YAML语法详解</h2><p>YAML是一个完全兼容JSON的数据格式。</p>\n<p><strong>重点：</strong>  </p>\n<ol>\n<li><strong>YAML完全兼容JSON</strong>  </li>\n<li>YAML和JSON一样，是数据，不是语句  </li>\n<li>序列化：将编程语言中的数据转为文件  </li>\n<li>反序列化：将文件中的内容转为编程语言中的数据  </li>\n<li><strong>文本文件：</strong> 可以使用记事本之类的工具进行创建、编辑</li>\n</ol>\n<p><strong>YAML优点：</strong>  </p>\n<ol>\n<li>结构更加清晰  </li>\n<li>语法更加简洁，支持注释  </li>\n<li>和Python风格相似</li>\n</ol>\n<h3 id=\"1-序列化：Python转YAML\"><a href=\"#1-序列化：Python转YAML\" class=\"headerlink\" title=\"1. 序列化：Python转YAML\"></a>1. 序列化：Python转YAML</h3><p><strong>将Python数据转为JSON文件：</strong>  </p>\n<p><a href=\"https://tw.unicodery.com/5b57.html\">https://tw.unicodery.com/5b57.html</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;数字&quot;</span>: [<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">1.2</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;字符串&quot;</span>: [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&#x27;-1&#x27;</span>, <span class=\"string\">&quot;&quot;&quot;1.2&quot;&quot;&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;布尔值&quot;</span>: [<span class=\"literal\">True</span>, <span class=\"literal\">False</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;空值&quot;</span>: <span class=\"literal\">None</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;列表&#x27;</span>: [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [-<span class=\"number\">1</span>, -<span class=\"number\">2</span>, -<span class=\"number\">3</span>]],</span><br><span class=\"line\">    <span class=\"string\">&quot;字典&quot;</span>: [&#123;<span class=\"string\">&quot;a&quot;</span>: <span class=\"number\">1</span>&#125;, &#123;<span class=\"string\">&quot;b&quot;</span>: <span class=\"number\">2</span>&#125;],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">s = json.dumps(data, ensure_ascii=<span class=\"literal\">False</span>)  <span class=\"comment\"># Python转JSON字符串,且不将非 ASCII 字符转义为 Unicode 转义序列</span></span><br><span class=\"line\"><span class=\"comment\">#dumps是从字符串中加载数据，dump是从文件中加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.json&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(s)  <span class=\"comment\"># 创建JSON文件</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>将Python数据转为YAML文件：</strong>  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyyaml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;数字&quot;</span>: [<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">1.2</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;字符串&quot;</span>: [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&#x27;-1&#x27;</span>, <span class=\"string\">&quot;&quot;&quot;1.2&quot;&quot;&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;布尔值&quot;</span>: [<span class=\"literal\">True</span>, <span class=\"literal\">False</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;空值&quot;</span>: <span class=\"literal\">None</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;列表&#x27;</span>: [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [-<span class=\"number\">1</span>, -<span class=\"number\">2</span>, -<span class=\"number\">3</span>]],</span><br><span class=\"line\">    <span class=\"string\">&quot;字典&quot;</span>: [&#123;<span class=\"string\">&quot;a&quot;</span>: <span class=\"number\">1</span>&#125;, &#123;<span class=\"string\">&quot;b&quot;</span>: <span class=\"number\">2</span>&#125;],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\"></span><br><span class=\"line\">s = yaml.safe_dump(data, allow_unicode=<span class=\"literal\">True</span>, sort_keys=<span class=\"literal\">False</span>)  <span class=\"comment\"># Python转YAML字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.yaml&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(s)  <span class=\"comment\"># 创建YAML文件</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-反序列化：YAML转Python\"><a href=\"#2-反序列化：YAML转Python\" class=\"headerlink\" title=\"2. 反序列化：YAML转Python\"></a>2. 反序列化：YAML转Python</h3><p><strong>将JSON转为Python：</strong>  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.json&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    s = f.read()  <span class=\"comment\"># 得到字符串</span></span><br><span class=\"line\">    data_json = json.loads(s)  <span class=\"comment\"># 得到数据</span></span><br><span class=\"line\"><span class=\"comment\">#loads是从字符串中加载数据，load是从文件中加载数据</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(data_json)  <span class=\"comment\"># Python数据</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>将YAML转为Python：</strong>  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.yaml&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    s = f.read()  <span class=\"comment\"># 得到字符串</span></span><br><span class=\"line\">    data_yaml = yaml.safe_load(s)  <span class=\"comment\"># 得到数据（安全加载）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(data_yaml)  <span class=\"comment\"># Python数据</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-YAML特色\"><a href=\"#3-YAML特色\" class=\"headerlink\" title=\"3. YAML特色\"></a>3. YAML特色</h3><ol>\n<li>完全兼容JSON  </li>\n<li>支持注释（使用<code>#</code>）  </li>\n<li>成员通过符号表示：  <ul>\n<li><code>-</code>：表示列表（数组）成员  </li>\n<li><code>:</code>：表示字典（对象）成员</li>\n</ul>\n</li>\n<li>通过缩进（2个空格）表示层级（Python使用4个空格）  </li>\n<li>自动处理类型  </li>\n<li>支持强制指定类型</li>\n</ol>\n<hr>\n<h2 id=\"2-pytest-YAML实现数据驱动测试\"><a href=\"#2-pytest-YAML实现数据驱动测试\" class=\"headerlink\" title=\"2. pytest + YAML实现数据驱动测试\"></a>2. pytest + YAML实现数据驱动测试</h2><p>数据驱动测试（Data Driver Test）&#x3D; 参数化测试（pytest内置标记）+ 数据文件（YAML、JSON）</p>\n<h3 id=\"1-参数化测试用例\"><a href=\"#1-参数化测试用例\" class=\"headerlink\" title=\"1. 参数化测试用例\"></a>1. 参数化测试用例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;a, b, c&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ]</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add</span>(<span class=\"params\">a, b, c</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> add(a, b) == c</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-数据内容委托到独立文件\"><a href=\"#2-数据内容委托到独立文件\" class=\"headerlink\" title=\"2. 数据内容委托到独立文件\"></a>2. 数据内容委托到独立文件</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;ddt_data.yaml&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    s = f.read()  <span class=\"comment\"># 字符串</span></span><br><span class=\"line\">    data_yaml = yaml.safe_load(s)  <span class=\"comment\"># 数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;a, b, c&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    data_yaml</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add</span>(<span class=\"params\">a, b, c</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> add(a, b) == c</span><br><span class=\"line\"><span class=\"comment\">#同样的代码，同样的变量名，不会互相影响    </span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.yaml&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    s = f.read() <span class=\"comment\"># 字符串</span></span><br><span class=\"line\">\tdata_yaml = yaml.safe_load(s) <span class=\"comment\"># 数据</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">\t<span class=\"string\">&quot;s&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">\tdata_yaml</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_str</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>YAML文件内容（ddt_data.yaml）：</strong>  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"string\">a</span>, <span class=\"string\">b</span>, <span class=\"string\">c</span>]</span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"string\">a</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-自动化测试框架结构\"><a href=\"#3-自动化测试框架结构\" class=\"headerlink\" title=\"3. 自动化测试框架结构\"></a>3. 自动化测试框架结构</h3><p>pytest是通用的测试框架，适用于：  </p>\n<ul>\n<li>白盒测试  </li>\n<li>单元测试  </li>\n<li>集成测试  </li>\n<li>黑盒测试（API、Web、App）</li>\n</ul>\n<p><strong>文件路径获取：</strong>  </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2025-06-30/20250630121339-ddcff7.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2025-06-30/20250630121506-795a4e.png\"></p>\n<p><strong>通用的黑盒测试框架：</strong>  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commons/      # 常用代码目录</span><br><span class=\"line\">data/         # 数据目录</span><br><span class=\"line\">logs/         # 日志目录</span><br><span class=\"line\">report/       # 测试报告目录</span><br><span class=\"line\">temps/        # allure临时数据目录</span><br><span class=\"line\">tests/        # 测试用例目录</span><br><span class=\"line\">conftest.py   # pytest动态配置、共享fixture</span><br><span class=\"line\">pytest.ini    # 配置文件</span><br><span class=\"line\">run.py        # 框架启动文件</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","cover_type":"img","excerpt":"","more":"<h1 id=\"一、接口自动化基础之pytest框架用法、规则、配置、标记-day13\"><a href=\"#一、接口自动化基础之pytest框架用法、规则、配置、标记-day13\" class=\"headerlink\" title=\"一、接口自动化基础之pytest框架用法、规则、配置、标记(day13)\"></a>一、接口自动化基础之pytest框架用法、规则、配置、标记(day13)</h1><p>创建新的项目：api_framwrok_241</p>\n<h2 id=\"1-什么是测试框架\"><a href=\"#1-什么是测试框架\" class=\"headerlink\" title=\"1. 什么是测试框架\"></a>1. 什么是测试框架</h2><p>测试框架：抽象出来一个工具集合，提供大量组件或功能：</p>\n<ul>\n<li>用例发现：自动化的从各目录、各文件种收集测试用例  </li>\n<li>用例管理：根据需求对用例进行筛选、忽略、跳过等操作  </li>\n<li>环境管理：在用例执行前后，自动完成某些操作，构造合适的执行条件  </li>\n<li>用例执行：执行用例的测试步骤  </li>\n<li>断言：执行用例时，判定执行结果是否符合预期</li>\n</ul>\n<p>大部分的编程语言都有对应测试框架：</p>\n<ul>\n<li>Java: JUnit, TestNG  </li>\n<li>php: phpunit  </li>\n<li>Python: unittest, pytest  </li>\n<li>更多……</li>\n</ul>\n<p>unittest:  </p>\n<ul>\n<li>python内置、无需安装  </li>\n<li>用浓郁Java风格  </li>\n<li>无法升级、扩展</li>\n</ul>\n<p>pytest:  </p>\n<ul>\n<li>手动安装、自由切换版本  </li>\n<li>有浓郁Python风格  </li>\n<li>有丰富第三方生态进行扩展  </li>\n<li>完全兼容unittest</li>\n</ul>\n<hr>\n<h2 id=\"2-pytest测试框架\"><a href=\"#2-pytest测试框架\" class=\"headerlink\" title=\"2. pytest测试框架\"></a>2. pytest测试框架</h2><h3 id=\"1-安装pytest\"><a href=\"#1-安装pytest\" class=\"headerlink\" title=\"1. 安装pytest\"></a>1. 安装pytest</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pytest    <span class=\"comment\"># 安装pytest  </span></span><br><span class=\"line\">pip install pytest -U <span class=\"comment\"># 安装、升级pytest 到最新版  </span></span><br><span class=\"line\">pip install pytest==7.0   <span class=\"comment\"># 安装pytest 7.0版本  </span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>pip install</code> 安装第三方库的命令  </li>\n<li><code>pytest</code> 第三方库的名字  </li>\n<li><code>-U</code> 升级，保持最新版  </li>\n<li><code>==7.0</code> 指定版本号</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip show pytest  <span class=\"comment\"># 查看pytest信息  </span></span><br><span class=\"line\">pytest  <span class=\"comment\"># 启动测试框架  </span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"2-编写测试用例\"><a href=\"#2-编写测试用例\" class=\"headerlink\" title=\"2. 编写测试用例\"></a>2. 编写测试用例</h3><ol>\n<li>创建：<code>test_</code>开头的py文件  </li>\n<li>创建：<code>test_</code>开头的函数  </li>\n<li>创建：<code>assert</code>断言</li>\n</ol>\n<p>示例文件 <code>test_abc.py</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_ok</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">1</span>  <span class=\"comment\"># 测试通过</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fail</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">2</span>  <span class=\"comment\"># 测试失败</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-执行测试用例\"><a href=\"#3-执行测试用例\" class=\"headerlink\" title=\"3. 执行测试用例\"></a>3. 执行测试用例</h3><ol>\n<li><p>命令行  </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pytest</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>代码  </p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\">pytest.main()  <span class=\"comment\"># 启动测试框架</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h3 id=\"4-看懂执行结果\"><a href=\"#4-看懂执行结果\" class=\"headerlink\" title=\"4. 看懂执行结果\"></a>4. 看懂执行结果</h3><ol>\n<li><p>执行环境  </p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">platform win32 -- Python 3.12.0, pytest-8.1.1, pluggy-1.4.0</span><br><span class=\"line\">rootdir: E:\\PyProject\\api_framework_241</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用例收集情况  </p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">collected 2 items</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用例执行过程  </p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test_abc.py .F</span><br><span class=\"line\">[100%]</span><br></pre></td></tr></table></figure></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>缩写</th>\n<th>单词</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.</td>\n<td>passed</td>\n<td>通过</td>\n</tr>\n<tr>\n<td>F</td>\n<td>failed</td>\n<td>失败（用例执行时报错）</td>\n</tr>\n<tr>\n<td>E</td>\n<td>error</td>\n<td>出错（fixture执行报错）</td>\n</tr>\n<tr>\n<td>s</td>\n<td>skipped</td>\n<td>跳过</td>\n</tr>\n<tr>\n<td>X</td>\n<td>xpassed</td>\n<td>预期外的通过（不符合预期）</td>\n</tr>\n<tr>\n<td>x</td>\n<td>xfailed</td>\n<td>预期内的失败（符合预期）</td>\n</tr>\n</tbody></table>\n<ol start=\"4\">\n<li><p>用例失败原因  </p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">================================== FAILURES</span><br><span class=\"line\">===================================</span><br><span class=\"line\">__________________________________ test_fail</span><br><span class=\"line\">__________________________________</span><br><span class=\"line\">def test_fail():</span><br><span class=\"line\">&gt; assert 1 == 2 # 测试失败</span><br><span class=\"line\">E assert 1 == 2</span><br><span class=\"line\">test_abc.py:6: AssertionError</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试框架总结信息  </p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=========================== short test summary info</span><br><span class=\"line\">===========================</span><br><span class=\"line\">FAILED test_abc.py::test_fail - assert 1 == 2</span><br><span class=\"line\">========================= 1 failed, 1 passed in 0.03s</span><br><span class=\"line\">=========================</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h3 id=\"5-用例发现规则\"><a href=\"#5-用例发现规则\" class=\"headerlink\" title=\"5. 用例发现规则\"></a>5. 用例发现规则</h3><p>pytest识别、加载测试用例过程称之为用例发现，规则：</p>\n<ol>\n<li>遍历所有的目录（venv除外）  </li>\n<li>遍历所有 <code>test_</code>开头 或者 <code>_test</code>结尾的python文件  </li>\n<li>遍历所有 <code>test</code> 开头的类  <ul>\n<li>类不能拥有<code>__init__</code>方法</li>\n</ul>\n</li>\n<li>收集 <code>test_</code>开头的函数或者方法，作为测试用例</li>\n</ol>\n<p><strong>重点</strong>：pytest，只有函数和方法，才被视为测试用例，目录、文件、类，作为用例的容器  </p>\n<h2 id=\"3-pytest高级用法\"><a href=\"#3-pytest高级用法\" class=\"headerlink\" title=\"3. pytest高级用法\"></a>3. pytest高级用法</h2><h3 id=\"1-配置\"><a href=\"#1-配置\" class=\"headerlink\" title=\"1. 配置\"></a>1. 配置</h3><p>pytest 有2种配置方式：</p>\n<ul>\n<li>命令行参数  </li>\n<li>ini配置文件</li>\n</ul>\n<p>查看所有的配置项  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pytest -h  </span><br></pre></td></tr></table></figure>\n\n<p>可以分成三大部分</p>\n<ol>\n<li>参数</li>\n<li>配置项</li>\n<li>环境变量</li>\n</ol>\n<p>常用的命令行参数：  </p>\n<ul>\n<li><code>-v</code>：增加详细程度  </li>\n<li><code>-q</code>：减少详细程度  </li>\n<li><code>-s</code>：不进行内容捕获，才能正常的输入输出  </li>\n<li><code>-x</code>：快速退出（冒烟测试）</li>\n</ul>\n<p>常用的ini配置项：  </p>\n<ol>\n<li>在根目录中的创建 <code>pytest.ini</code> 文件  </li>\n<li>创建 pytest 选择器  </li>\n<li>按行，添加配置项</li>\n</ol>\n<p>示例 <code>pytest.ini</code>：  </p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[pytest]</span></span><br><span class=\"line\"><span class=\"attr\">addopts</span> = -s -x</span><br></pre></td></tr></table></figure>\n\n<p>add options</p>\n<p>配置是用来改变pytest</p>\n<p><strong>约定大于配置</strong>：对于成熟的工具来说，默认配置往往是比较好的配置，可以适用于大部分场景。如非必要，请勿更改。  </p>\n<hr>\n<h3 id=\"2-标记mark\"><a href=\"#2-标记mark\" class=\"headerlink\" title=\"2. 标记mark\"></a>2. 标记mark</h3><p>mark主要用途是让用例和用例之间变得不同，实现用例的筛选。  </p>\n<h4 id=\"1-用户自定义标记\"><a href=\"#1-用户自定义标记\" class=\"headerlink\" title=\"1. 用户自定义标记\"></a>1. 用户自定义标记</h4><ol>\n<li><p>注册（在 <code>pytest.ini</code> 中）：  </p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[pytest]</span></span><br><span class=\"line\"><span class=\"attr\">markers</span> =</span><br><span class=\"line\">    api</span><br><span class=\"line\">    ui</span><br><span class=\"line\">    ut</span><br><span class=\"line\">    e2e</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>标记用例：  </p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.ut</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_ok</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">1</span>  <span class=\"comment\"># 测试通过</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.e2e</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fail</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">2</span>  <span class=\"comment\"># 测试失败</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.api</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_baili</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.ui</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_beifan</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>筛选用例：  </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pytest -m api  <span class=\"comment\"># 只执行拥有api标记的用例</span></span><br><span class=\"line\">pytest -m <span class=\"string\">&quot;ut or api&quot;</span>  <span class=\"comment\"># 只执行拥有ut或api标记的用例</span></span><br><span class=\"line\">pytest -m <span class=\"string\">&quot;ui and api&quot;</span>  <span class=\"comment\"># 只执行同时拥有ui和api标记的用例</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"2-框架内置标记\"><a href=\"#2-框架内置标记\" class=\"headerlink\" title=\"2. 框架内置标记\"></a>2. 框架内置标记</h4><ol>\n<li>不需要注册，直接使用  </li>\n<li>不仅用于筛选，还有特殊效果  </li>\n<li>不同的标记，拥有不同的效果</li>\n</ol>\n<p>示例：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skip</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_skip</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">2</span>  <span class=\"comment\"># 失败</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"><span class=\"number\">1</span> == <span class=\"number\">1</span></span>)  </span><span class=\"comment\"># 跳过</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_skipif</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">2</span>  <span class=\"comment\"># 失败</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"><span class=\"number\">1</span> == <span class=\"number\">2</span></span>)  </span><span class=\"comment\"># 不会跳过</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_skipif</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">2</span>  <span class=\"comment\"># 失败</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.xfail  </span><span class=\"comment\"># 预期失败</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_passed</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">2</span>  <span class=\"comment\"># 结果失败</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.xfail  </span><span class=\"comment\"># 预期失败</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fail</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> == <span class=\"number\">1</span>  <span class=\"comment\"># 结果成功</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-参数化测试\"><a href=\"#3-参数化测试\" class=\"headerlink\" title=\"3. 参数化测试\"></a>3. 参数化测试</h4><p>参数化测试：通过数据修改参数，从而改变测试用例。<br>数据驱动测试 &#x3D; 参数化测试 + 数据文件  </p>\n<p><strong>参数化之前</strong>：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_1_10</span>():</span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\">    b = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">2</span> == add(a, b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_2_20</span>():</span><br><span class=\"line\">    a = <span class=\"number\">2</span></span><br><span class=\"line\">    b = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">4</span> == add(a, b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_2_30</span>():</span><br><span class=\"line\">    a = <span class=\"number\">2</span></span><br><span class=\"line\">    b = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">5</span> == add(a, b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_3_3</span>():</span><br><span class=\"line\">    a = <span class=\"number\">3</span></span><br><span class=\"line\">    b = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">6</span> == add(a, b)</span><br></pre></td></tr></table></figure>\n\n<p><strong>参数化之后</strong>：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;a, b, c&quot;</span>,  <span class=\"comment\"># 1. 列出参数</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [           <span class=\"comment\"># 2. 准备参数的值</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        [<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        [<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>],  <span class=\"comment\"># 3. 根据需求修改数据</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ]</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_1_1</span>(<span class=\"params\">a, b, c</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> c == add(a, b)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二、接口自动化基础之pytest框架fixture、常用插件、Allure报告、企业级定制-day14\"><a href=\"#二、接口自动化基础之pytest框架fixture、常用插件、Allure报告、企业级定制-day14\" class=\"headerlink\" title=\"二、接口自动化基础之pytest框架fixture、常用插件、Allure报告、企业级定制(day14)\"></a>二、接口自动化基础之pytest框架fixture、常用插件、Allure报告、企业级定制(day14)</h1><h2 id=\"1-pytest夹具fixture\"><a href=\"#1-pytest夹具fixture\" class=\"headerlink\" title=\"1. pytest夹具fixture\"></a>1. pytest夹具fixture</h2><p><strong>夹具</strong>: 在用例执行之前，执行之后，自动的运行自定义代码</p>\n<p><strong>场景</strong>:  </p>\n<ul>\n<li>执行之前：创建测试账号，执行之后：删除测试账号  </li>\n<li>执行之前：启动浏览器，执行之后：关闭浏览器  </li>\n<li>执行之前：创建测试场景，执行之后，销毁测试场景</li>\n</ul>\n<h3 id=\"1-创建fixture\"><a href=\"#1-创建fixture\" class=\"headerlink\" title=\"1. 创建fixture\"></a>1. 创建fixture</h3><ol>\n<li>创建函数  </li>\n<li>添加装饰器  </li>\n<li><code>yield</code></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@pytest.fixture  </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>():  </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;启动浏览器&#x27;</span>) <span class=\"comment\"># 前置操作，用例执行之前，自动执行  </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;浏览器类型: chrome&#x27;</span> <span class=\"comment\"># 返回值，使用例使用  </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;关闭浏览器&#x27;</span>) <span class=\"comment\"># 后置操作，用例执行之后，自动执行  </span></span><br></pre></td></tr></table></figure>\n\n<p>简便的方式创建fixture  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@pytest.fixture  </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>(): <span class=\"comment\"># 使用fixture  </span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;启动浏览器&#x27;</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">None</span>  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用fixtures\"><a href=\"#2-使用fixtures\" class=\"headerlink\" title=\"2. 使用fixtures\"></a>2. 使用fixtures</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abc</span>(<span class=\"params\">f</span>): <span class=\"comment\"># 使用fixture，得到它的返回值</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;我是用例内容，正在执行&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;收到fixture的返回值:&#x27;</span>, f)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test_abc.py::test_abc 启动浏览器  </span><br><span class=\"line\">我是用例内容，正在执行  </span><br><span class=\"line\">收到fixture的返回值：浏览器类型：chrome  </span><br><span class=\"line\">PASSED关闭浏览器  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"简便的方式使用fixture\"><a href=\"#简便的方式使用fixture\" class=\"headerlink\" title=\"简便的方式使用fixture\"></a>简便的方式使用fixture</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@pytest.mark.usefixtures(<span class=\"params\"><span class=\"string\">&#x27;f&#x27;</span></span>) </span><span class=\"comment\"># 使用fixture  </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abc</span>():  </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;我是用例内容，正在执行&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-fixture的作用范围\"><a href=\"#3-fixture的作用范围\" class=\"headerlink\" title=\"3. fixture的作用范围\"></a>3. fixture的作用范围</h3><p>fixture启动比较慢，能否共享（复用）fixture？</p>\n<ul>\n<li>每个用例执行fixture：5s * 3(fixture执行次数) &#x3D; 15s  </li>\n<li>每个用例复用fixture：5s * 1(fixture执行次数) &#x3D; 5s</li>\n</ul>\n<p>pytest中，用一个作用范围内fixture会自动的共享（复用）</p>\n<p>pytest中，支持5级作用域：</p>\n<ol>\n<li>function：默认，不共享  </li>\n<li>class：同一个类中用例，自动共享  </li>\n<li>module：同一个模块（文件）中用例，自动共享  </li>\n<li>package：同一个包（目录）中用例，自动共享  </li>\n<li>session：所有用例，自动共享</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.fixture(<span class=\"params\">scope=<span class=\"string\">&#x27;class&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;启动浏览器&#x27;</span>) <span class=\"comment\"># 前置操作，用例执行之前，自动执行</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;浏览器类型：chrome&#x27;</span> <span class=\"comment\"># 返回值，供用例使用</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;关闭浏览器&#x27;</span>) <span class=\"comment\"># 后置操作，用例执行之后，自动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test_A</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_1</span>(<span class=\"params\">self, f</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_2</span>(<span class=\"params\">self, f</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Test_B</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_3</span>(<span class=\"params\">self, f</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-conftest-py\"><a href=\"#4-conftest-py\" class=\"headerlink\" title=\"4. conftest.py\"></a>4. conftest.py</h3><p>从名字上看：测试配置</p>\n<p>从内容上看：python代码</p>\n<p>从效果上看：被pytest自动导入，实现跨文件的fixture</p>\n<p>每个目录都可以创建一个conftest.py</p>\n<p>子目录的conftest.py可以屏蔽父目录的conftest.py</p>\n<p>哪个文件里用例更近，它的优先级就越高</p>\n<h3 id=\"5-fixture的其他写法\"><a href=\"#5-fixture的其他写法\" class=\"headerlink\" title=\"5. fixture的其他写法\"></a>5. fixture的其他写法</h3><p>对于模块级夹具有 3 几种写法：</p>\n<ol>\n<li>setup &#x2F; teardown  </li>\n<li>setUpModule &#x2F; tearDownModule  </li>\n<li>setup_module &#x2F; teardown_module</li>\n</ol>\n<p>第一种是测试框架 nose 的写法，<strong>pytest 从 7.2.0 开始不再兼容 nose 框架</strong>，这种写法无了</p>\n<p>第二种是测试框架 unittest 的写法，这是 python 的标准库，应该会一直兼容下去<br>第三种是测试框架 pytest 的写法，是仿 xunit 风格，使用非面向对象的方式来创建夹具在实际的运行过程中，所有的写法都会统一处理成 fixture，<strong>建议一步到位直接写 fixture</strong></p>\n<hr>\n<h2 id=\"2-pytest常用插件\"><a href=\"#2-pytest常用插件\" class=\"headerlink\" title=\"2. pytest常用插件\"></a>2. pytest常用插件</h2><p><a href=\"https://pypi.org/\">https://pypi.org/</a></p>\n<h3 id=\"1-pytest-html\"><a href=\"#1-pytest-html\" class=\"headerlink\" title=\"1. pytest-html\"></a>1. pytest-html</h3><p>用途：生成HTML测试报告<br>文档：<a href=\"https://pytest-html.readthedocs.io/en/latest/installing.html\">https://pytest-html.readthedocs.io/en/latest/installing.html</a><br>安装：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pytest-html</span><br></pre></td></tr></table></figure>\n\n<p>配置：命令行参数  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--html=report.html --self-contained-html</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-pytest-xdist\"><a href=\"#2-pytest-xdist\" class=\"headerlink\" title=\"2. pytest-xdist\"></a>2. pytest-xdist</h3><p>用途：并发执行用例<br>文档：<a href=\"https://pytest-xdist.readthedocs.io/en/stable/\">https://pytest-xdist.readthedocs.io/en/stable/</a>  </p>\n<p>安装：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pytest-xdist</span><br></pre></td></tr></table></figure>\n\n<p>配置：命令行参数  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-n &#123;0,1,2,3,...,n, auto&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：  </p>\n<ol>\n<li>多进程额外增加资源  </li>\n<li>多进程乱序  </li>\n<li>多进程竞争资源（-s失效）  </li>\n<li>auto 自动判断进程数（CPU内核数）</li>\n</ol>\n<h3 id=\"3-pytest-order\"><a href=\"#3-pytest-order\" class=\"headerlink\" title=\"3. pytest-order\"></a>3. pytest-order</h3><p>用途：定义用例的执行顺序<br>文档：<a href=\"https://pytest-order.readthedocs.io/en/latest/\">https://pytest-order.readthedocs.io/en/latest/</a>  </p>\n<p>安装：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pytest-order</span><br></pre></td></tr></table></figure>\n\n<p>配置：标记  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@pytest.mark.order(<span class=\"params\"><span class=\"number\">5</span></span>) </span><span class=\"comment\"># 后执行  </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abc</span>():  </span><br><span class=\"line\">    <span class=\"keyword\">pass</span>  </span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.order(<span class=\"params\"><span class=\"number\">1</span></span>) </span><span class=\"comment\"># 先执行  </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_bbc</span>():  </span><br><span class=\"line\">    <span class=\"keyword\">pass</span>  </span><br></pre></td></tr></table></figure>\n\n<p>顺序规则：<br>● 先执行有order的用例，再执行没有order的用例<br>● 先执行order较小的用例，再执行order较大的用例  </p>\n<ul>\n<li>order全局生效，可以跨文件、跨目录</li>\n</ul>\n<h3 id=\"4-pytest-rerunfailures\"><a href=\"#4-pytest-rerunfailures\" class=\"headerlink\" title=\"4. pytest-rerunfailures\"></a>4. pytest-rerunfailures</h3><p>用途：用例失败时自动重试</p>\n<p>文档：<a href=\"https://github.com/pytest-dev/pytest-rerunfailures\">https://github.com/pytest-dev/pytest-rerunfailures</a></p>\n<p>安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pytest-rerunfailures</span><br></pre></td></tr></table></figure>\n\n<p>配置：命令行参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--reruns 5 --reruns-delay 1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-pytest-result-log\"><a href=\"#5-pytest-result-log\" class=\"headerlink\" title=\"5. pytest-result-log\"></a>5. pytest-result-log</h3><p>用途：把用例的执行结果保存到日志文件</p>\n<p>文档：<a href=\"https://mp.weixin.qq.com/s/f90fcj54pKvebnBahlllog\">https://mp.weixin.qq.com/s/f90fcj54pKvebnBahlllog</a></p>\n<p>安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pytest-result-log</span><br></pre></td></tr></table></figure>\n\n<p>配置：pytest.ini</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_file = ./pytest.log</span><br><span class=\"line\">log_file_level = info</span><br><span class=\"line\">log_file_format = %(levelname)-8s %(asctime)s [%(name)s:%(lineno)s] : % (message)s</span><br><span class=\"line\">log_file_date_format = %Y-%m-%d %H:%M:%S</span><br><span class=\"line\"></span><br><span class=\"line\">；记录用例执行结果</span><br><span class=\"line\">result_log_enable = 1</span><br><span class=\"line\">；记录用例分割线</span><br><span class=\"line\">result_log_separator = 1</span><br><span class=\"line\">；分割线等级</span><br><span class=\"line\">result_log_level_separator = warning</span><br><span class=\"line\">；异常信息等级</span><br><span class=\"line\">result_log_level_verbose = info</span><br></pre></td></tr></table></figure>\n\n<p>pycharm插件：Ideolog（日志颜色）</p>\n<h3 id=\"6-allure-pytest\"><a href=\"#6-allure-pytest\" class=\"headerlink\" title=\"6. allure-pytest\"></a>6. allure-pytest</h3><p>用途：生成allure数据文件</p>\n<p>文档：<a href=\"https://docs.gameta.io/allure-report/#\">https://docs.gameta.io/allure-report/#</a> pytest</p>\n<p>安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install allure-pytest</span><br></pre></td></tr></table></figure>\n\n<p>配置：命令行参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--alluredir=temps --clean-alluredir</span><br></pre></td></tr></table></figure>\n\n<p>本插件只生成数据，不生成报告：</p>\n<ol>\n<li>创建目录 temps</li>\n<li>清空目录内容</li>\n<li>在目录中创建数据文件</li>\n</ol>\n<hr>\n<h2 id=\"3-定制企业级的测试报告\"><a href=\"#3-定制企业级的测试报告\" class=\"headerlink\" title=\"3. 定制企业级的测试报告\"></a>3. 定制企业级的测试报告</h2><p>allure 是一个专业测试报告框架，是一个Java程序<br>allure-pytest 是一个pytest插件，是一个python程序</p>\n<p>allure-pytest &gt; 数据文件 &gt; allure &gt; 测试报告</p>\n<h3 id=\"1-搭建allure环境\"><a href=\"#1-搭建allure环境\" class=\"headerlink\" title=\"1. 搭建allure环境\"></a>1. 搭建allure环境</h3><ol>\n<li>JDK</li>\n</ol>\n<p>​\t下载地址：<a href=\"https://www.oracle.com/java/technologies/downloads/#jdk17-windows\">https://www.oracle.com/java/technologies/downloads/#jdk17-windows</a></p>\n<p>​\t安装：双击运行、安装、重启<br>​\t版本：建议 JDK 17+</p>\n<p>​\t验证：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java --version</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>allure源程序</li>\n</ol>\n<p>​\t下载地址：<a href=\"https://github.com/allure-framework/allure2/releases\">https://github.com/allure-framework/allure2/releases</a></p>\n<p>​\t解压：E:\\abc\\allure-2.24.1\\allure-2.24.1\\bin</p>\n<p>​\t修改环境变量：PATH</p>\n<p>​\t验证：allure<br>​\tE:\\abc\\allure-2.24.1\\allure-2.24.1\\bin\\allure</p>\n<h3 id=\"2-生成企业级测试报告\"><a href=\"#2-生成企业级测试报告\" class=\"headerlink\" title=\"2. 生成企业级测试报告\"></a>2. 生成企业级测试报告</h3><p>generate  根据数据生成HTML报告<br>open  打开生成的HTML报告<br>serve  生成并打开HTML报告</p>\n<p>serve &#x3D; generate + open</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\abc\\allure-2.24.1\\allure-2.24.1\\bin\\allure generate -o report temps # 根据数据生成HTML报告</span><br><span class=\"line\">E:\\abc\\allure-2.24.1\\allure-2.24.1\\bin\\allure open report # 打开生成的HTML报告</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allure generate -o report temps # 根据数据生成HTML报告</span><br><span class=\"line\">allure open report # 打开生成的HTML报告</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-定制报告内容\"><a href=\"#3-定制报告内容\" class=\"headerlink\" title=\"3. 定制报告内容\"></a>3. 定制报告内容</h3><h4 id=\"1-功能分组\"><a href=\"#1-功能分组\" class=\"headerlink\" title=\"1. 功能分组\"></a>1. 功能分组</h4><p>通过装饰器，对用例进行分组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.epic</span></span><br><span class=\"line\"><span class=\"meta\">@allure.feature</span></span><br><span class=\"line\"><span class=\"meta\">@allure.story</span></span><br><span class=\"line\"><span class=\"meta\">@allure.title</span></span><br></pre></td></tr></table></figure>\n\n<p>敏捷开发的水语：</p>\n<ul>\n<li>epic 史诗</li>\n<li>feature 主题</li>\n<li>story 故事</li>\n<li>title 标题</li>\n</ul>\n<p>allure仅建立行为层次结构（另一种是基于套件）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.epic(<span class=\"params\"><span class=\"string\">&#x27;码前自动化测试项目&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.feature(<span class=\"params\"><span class=\"string\">&#x27;模块A&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.story(<span class=\"params\"><span class=\"string\">&#x27;文件上传功能&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.title(<span class=\"params\"><span class=\"string\">&#x27;上传失败&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abc</span>():</span><br><span class=\"line\">    logger.info(<span class=\"string\">&#x27;11111&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@allure.epic(<span class=\"params\"><span class=\"string\">&#x27;码前自动化测试项目&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.feature(<span class=\"params\"><span class=\"string\">&#x27;模块A&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.story(<span class=\"params\"><span class=\"string\">&#x27;文件上传功能&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.title(<span class=\"params\"><span class=\"string\">&#x27;上传成功&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_baa</span>():</span><br><span class=\"line\">    logger.info(<span class=\"string\">&#x27;22222&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@allure.epic(<span class=\"params\"><span class=\"string\">&#x27;码前自动化测试项目&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.feature(<span class=\"params\"><span class=\"string\">&#x27;模块B&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.story(<span class=\"params\"><span class=\"string\">&#x27;充值体现功能&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.title(<span class=\"params\"><span class=\"string\">&#x27;充值成功&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_bbc</span>():</span><br><span class=\"line\">    logger.info(<span class=\"string\">&#x27;444444&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-自定义logo\"><a href=\"#2-自定义logo\" class=\"headerlink\" title=\"2. 自定义logo\"></a>2. 自定义logo</h4><ol>\n<li><p>确定插件的名称 <code>custom-logo-plugin</code></p>\n</li>\n<li><p>修改配置文件: “E:\\abc\\allure-2.24.l\\allure-2.24.l\\config\\allure.yml”</p>\n</li>\n<li><p>加入新的插件名称，启用插件</p>\n</li>\n<li><p>在插件中修改logo:<br> “E:\\abc\\allure-2.24.l\\allure-2.24.l\\plugins\\custom-logo-plugin\\static\\styles.css”</p>\n</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.side-nav__brand</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;logo.png&#x27;</span>) no-repeat left center <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">22px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: contain <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.side-nav__brand-text</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结：配置文件\"><a href=\"#总结：配置文件\" class=\"headerlink\" title=\"总结：配置文件\"></a>总结：配置文件</h3><p>run.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">pytest.main()  <span class=\"comment\"># 启动测试框架, 自动生成allure数据</span></span><br><span class=\"line\">os.system(<span class=\"string\">&#x27;allure generate -c -o report  temps&#x27;</span>)  <span class=\"comment\"># 手动生成allure报告</span></span><br></pre></td></tr></table></figure>\n\n<p>pytest.ini</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[pytest]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">addopts</span> = --alluredir=temps  --clean-alluredir  tests/homework/test_<span class=\"number\">2_1</span>.py</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">markers</span> =</span><br><span class=\"line\">  api</span><br><span class=\"line\">  ui</span><br><span class=\"line\">  ut</span><br><span class=\"line\">  e2e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">log_file</span> = ./logs/pytest.log</span><br><span class=\"line\"><span class=\"attr\">log_file_level</span> = info</span><br><span class=\"line\"><span class=\"attr\">log_file_format</span> = %(levelname)-<span class=\"number\">8</span>s %(asctime)s [%(name)s:%(line<span class=\"literal\">no</span>)s]  : %(message)s</span><br><span class=\"line\"><span class=\"attr\">log_file_date_format</span>  = %Y-%m-%d %H:%M:%S</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">; 记录用例执行结果</span></span><br><span class=\"line\"><span class=\"attr\">result_log_enable</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">; 记录用例分割线</span></span><br><span class=\"line\"><span class=\"attr\">result_log_separator</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">;分割线等级</span></span><br><span class=\"line\"><span class=\"attr\">result_log_level_separator</span>  = warning</span><br><span class=\"line\"><span class=\"comment\">;异常信息等级</span></span><br><span class=\"line\"><span class=\"attr\">result_log_level_verbose</span> = info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">disable_test_id_escaping_and_forfeit_all_rights_to_community_support</span> = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将常用包打包成-requirements-txt\"><a href=\"#将常用包打包成-requirements-txt\" class=\"headerlink\" title=\"将常用包打包成 requirements.txt\"></a>将常用包打包成 requirements.txt</h3><p>如果你希望保持每个项目独立，但又不想手动一个个安装依赖，可以：</p>\n<p>在原项目中导出依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>\n\n<p>新建项目后，在终端运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n\n<p>这样就能快速恢复所有依赖。</p>\n<h1 id=\"三、接口自动化基础之Pytest框架之YAML详解以及Parametrize数据驱动-day15\"><a href=\"#三、接口自动化基础之Pytest框架之YAML详解以及Parametrize数据驱动-day15\" class=\"headerlink\" title=\"三、接口自动化基础之Pytest框架之YAML详解以及Parametrize数据驱动(day15)\"></a>三、接口自动化基础之Pytest框架之YAML详解以及Parametrize数据驱动(day15)</h1><h2 id=\"1-YAML语法详解\"><a href=\"#1-YAML语法详解\" class=\"headerlink\" title=\"1. YAML语法详解\"></a>1. YAML语法详解</h2><p>YAML是一个完全兼容JSON的数据格式。</p>\n<p><strong>重点：</strong>  </p>\n<ol>\n<li><strong>YAML完全兼容JSON</strong>  </li>\n<li>YAML和JSON一样，是数据，不是语句  </li>\n<li>序列化：将编程语言中的数据转为文件  </li>\n<li>反序列化：将文件中的内容转为编程语言中的数据  </li>\n<li><strong>文本文件：</strong> 可以使用记事本之类的工具进行创建、编辑</li>\n</ol>\n<p><strong>YAML优点：</strong>  </p>\n<ol>\n<li>结构更加清晰  </li>\n<li>语法更加简洁，支持注释  </li>\n<li>和Python风格相似</li>\n</ol>\n<h3 id=\"1-序列化：Python转YAML\"><a href=\"#1-序列化：Python转YAML\" class=\"headerlink\" title=\"1. 序列化：Python转YAML\"></a>1. 序列化：Python转YAML</h3><p><strong>将Python数据转为JSON文件：</strong>  </p>\n<p><a href=\"https://tw.unicodery.com/5b57.html\">https://tw.unicodery.com/5b57.html</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;数字&quot;</span>: [<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">1.2</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;字符串&quot;</span>: [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&#x27;-1&#x27;</span>, <span class=\"string\">&quot;&quot;&quot;1.2&quot;&quot;&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;布尔值&quot;</span>: [<span class=\"literal\">True</span>, <span class=\"literal\">False</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;空值&quot;</span>: <span class=\"literal\">None</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;列表&#x27;</span>: [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [-<span class=\"number\">1</span>, -<span class=\"number\">2</span>, -<span class=\"number\">3</span>]],</span><br><span class=\"line\">    <span class=\"string\">&quot;字典&quot;</span>: [&#123;<span class=\"string\">&quot;a&quot;</span>: <span class=\"number\">1</span>&#125;, &#123;<span class=\"string\">&quot;b&quot;</span>: <span class=\"number\">2</span>&#125;],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">s = json.dumps(data, ensure_ascii=<span class=\"literal\">False</span>)  <span class=\"comment\"># Python转JSON字符串,且不将非 ASCII 字符转义为 Unicode 转义序列</span></span><br><span class=\"line\"><span class=\"comment\">#dumps是从字符串中加载数据，dump是从文件中加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.json&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(s)  <span class=\"comment\"># 创建JSON文件</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>将Python数据转为YAML文件：</strong>  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyyaml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;数字&quot;</span>: [<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">1.2</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;字符串&quot;</span>: [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&#x27;-1&#x27;</span>, <span class=\"string\">&quot;&quot;&quot;1.2&quot;&quot;&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;布尔值&quot;</span>: [<span class=\"literal\">True</span>, <span class=\"literal\">False</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;空值&quot;</span>: <span class=\"literal\">None</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;列表&#x27;</span>: [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [-<span class=\"number\">1</span>, -<span class=\"number\">2</span>, -<span class=\"number\">3</span>]],</span><br><span class=\"line\">    <span class=\"string\">&quot;字典&quot;</span>: [&#123;<span class=\"string\">&quot;a&quot;</span>: <span class=\"number\">1</span>&#125;, &#123;<span class=\"string\">&quot;b&quot;</span>: <span class=\"number\">2</span>&#125;],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\"></span><br><span class=\"line\">s = yaml.safe_dump(data, allow_unicode=<span class=\"literal\">True</span>, sort_keys=<span class=\"literal\">False</span>)  <span class=\"comment\"># Python转YAML字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.yaml&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(s)  <span class=\"comment\"># 创建YAML文件</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-反序列化：YAML转Python\"><a href=\"#2-反序列化：YAML转Python\" class=\"headerlink\" title=\"2. 反序列化：YAML转Python\"></a>2. 反序列化：YAML转Python</h3><p><strong>将JSON转为Python：</strong>  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.json&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    s = f.read()  <span class=\"comment\"># 得到字符串</span></span><br><span class=\"line\">    data_json = json.loads(s)  <span class=\"comment\"># 得到数据</span></span><br><span class=\"line\"><span class=\"comment\">#loads是从字符串中加载数据，load是从文件中加载数据</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(data_json)  <span class=\"comment\"># Python数据</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>将YAML转为Python：</strong>  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.yaml&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    s = f.read()  <span class=\"comment\"># 得到字符串</span></span><br><span class=\"line\">    data_yaml = yaml.safe_load(s)  <span class=\"comment\"># 得到数据（安全加载）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(data_yaml)  <span class=\"comment\"># Python数据</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-YAML特色\"><a href=\"#3-YAML特色\" class=\"headerlink\" title=\"3. YAML特色\"></a>3. YAML特色</h3><ol>\n<li>完全兼容JSON  </li>\n<li>支持注释（使用<code>#</code>）  </li>\n<li>成员通过符号表示：  <ul>\n<li><code>-</code>：表示列表（数组）成员  </li>\n<li><code>:</code>：表示字典（对象）成员</li>\n</ul>\n</li>\n<li>通过缩进（2个空格）表示层级（Python使用4个空格）  </li>\n<li>自动处理类型  </li>\n<li>支持强制指定类型</li>\n</ol>\n<hr>\n<h2 id=\"2-pytest-YAML实现数据驱动测试\"><a href=\"#2-pytest-YAML实现数据驱动测试\" class=\"headerlink\" title=\"2. pytest + YAML实现数据驱动测试\"></a>2. pytest + YAML实现数据驱动测试</h2><p>数据驱动测试（Data Driver Test）&#x3D; 参数化测试（pytest内置标记）+ 数据文件（YAML、JSON）</p>\n<h3 id=\"1-参数化测试用例\"><a href=\"#1-参数化测试用例\" class=\"headerlink\" title=\"1. 参数化测试用例\"></a>1. 参数化测试用例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;a, b, c&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ]</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add</span>(<span class=\"params\">a, b, c</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> add(a, b) == c</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-数据内容委托到独立文件\"><a href=\"#2-数据内容委托到独立文件\" class=\"headerlink\" title=\"2. 数据内容委托到独立文件\"></a>2. 数据内容委托到独立文件</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;ddt_data.yaml&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    s = f.read()  <span class=\"comment\"># 字符串</span></span><br><span class=\"line\">    data_yaml = yaml.safe_load(s)  <span class=\"comment\"># 数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;a, b, c&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    data_yaml</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add</span>(<span class=\"params\">a, b, c</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> add(a, b) == c</span><br><span class=\"line\"><span class=\"comment\">#同样的代码，同样的变量名，不会互相影响    </span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.yaml&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    s = f.read() <span class=\"comment\"># 字符串</span></span><br><span class=\"line\">\tdata_yaml = yaml.safe_load(s) <span class=\"comment\"># 数据</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">\t<span class=\"string\">&quot;s&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">\tdata_yaml</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_str</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>YAML文件内容（ddt_data.yaml）：</strong>  </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"string\">a</span>, <span class=\"string\">b</span>, <span class=\"string\">c</span>]</span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"string\">a</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-自动化测试框架结构\"><a href=\"#3-自动化测试框架结构\" class=\"headerlink\" title=\"3. 自动化测试框架结构\"></a>3. 自动化测试框架结构</h3><p>pytest是通用的测试框架，适用于：  </p>\n<ul>\n<li>白盒测试  </li>\n<li>单元测试  </li>\n<li>集成测试  </li>\n<li>黑盒测试（API、Web、App）</li>\n</ul>\n<p><strong>文件路径获取：</strong>  </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2025-06-30/20250630121339-ddcff7.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2025-06-30/20250630121506-795a4e.png\"></p>\n<p><strong>通用的黑盒测试框架：</strong>  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commons/      # 常用代码目录</span><br><span class=\"line\">data/         # 数据目录</span><br><span class=\"line\">logs/         # 日志目录</span><br><span class=\"line\">report/       # 测试报告目录</span><br><span class=\"line\">temps/        # allure临时数据目录</span><br><span class=\"line\">tests/        # 测试用例目录</span><br><span class=\"line\">conftest.py   # pytest动态配置、共享fixture</span><br><span class=\"line\">pytest.ini    # 配置文件</span><br><span class=\"line\">run.py        # 框架启动文件</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"数据库学习","date":"2025-04-24T09:57:03.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":null,"_content":"\n# 一.基础\n\n## 1.mysql的常用数据类型\n\n整数：int\n\n小整数：tinyint\n\n小数：decimal（5,2）小数2位，整数3位\n\n字符串：varchar\n\n日期时间：daytime\n\n## 2.数据库中的元素\n\n数据库-----database\n\n表----table\n\n字段(列)---field\n\n记录(行)---record\n\n# 二.常用操作\n\n## 1.创建表\n\n- `语法:create table 表名(字段名 字段类型, 字段名 字段类型)`\n\n- ```sql\n  -- 创建表 d，字段要求如下： \n  -- id ： 数 据 类 型 为 \n  -- int unsigned( 无 符 号 整 数 ) ） ,primary key( 主键),auto_increment(自增长)； \n  -- name 姓名：数据类型为 varchar(字符串)长度为 10,not null(非空)，\n  -- age 年龄：数据类型为 int（整数）,default(默认值)30；\n  create TABLE d (\n  id int UNSIGNED PRIMARY key auto_increment,\n  name varchar(10) not null,\n  age int DEFAULT 30);\n  ```\n\n### 字段的约束\n\n#### 1.主键 （primary key）\n\n- 主键的值不能重复\n\n- 自增长,auto_increment，值会系统自动维护,自动增长\n\n- ```sql\n  -- 如果不指定字段,主键自增长字段的值可以用占位符,0或者null\n  INSERT into d VALUES (0, '康熙', 30);\n  INSERT into d VALUES (NULL, '溥仪', 50);\n  ```\n\n#### 2.非空（not null）\n\n- 这个字段必须有值,如果没有值,insert插入会失败\n\n#### 3.唯一 （unique）\n\n- 字段的约束为唯一,表示字段的值不能重复\n\n#### 4.默认值 （default）\n\n- 当一个字段有默认值约束,插入数据时,如果指定了值,那么默认值无效,如果没有指定值,会使用默认值\n\n## 2.插入数据\n\n- `语法 : insert into 表名 values (值, 值,值);`\n\n- ```sql\n  insert into c values (1, '白起'， 25);\n  ```\n\n- `指定字段插入,语法:insert into 表名 (字段名, 字段名) values (值, 值);`\n\n- ```sql\n  -- 例 2：表 c 插入一条记录，只设置 id 和姓名 name\n  INSERT into c (id, name) values (3, '曹操');\n  ```\n\n\n插入多条记录\n\n- 多条insert语句,用分号隔开\n\n```sql\n-- 例 3：表 c 插入三条记录，写三条 insert 语句, 语句之间用分号隔开\nINSERT into c values (5, '周瑜', 50);\ninsert into c (id, name) values (6, '鲁肃');\nINSERT into c (name) values ('诸葛亮');\n```\n\n- 一条insert插入多条记录\n- 语法:insert into 表名 values (值,值),(值, 值),(值,值);\n\n```sql\n-- 例 4：表 c 插入多条记录，用一条 insert 语句, 数据之间用逗号隔开\ninsert into c values (10, '张三', 10),\n(11, '李四', 20),\n(12, '王五', 30);\n```\n\n- 一条insert指定字段插入多条记录\n- 语法:insert into 表名 (字段名, 字段名) values (值, 值), (值, 值), (值, 值)\n\n```sql\n-- 例 4：表 c 插入多条记录，用一条 insert 语句, 数据之间用逗号隔开\ninsert into c (id, name) values (13, '光绪'),\n(14, '康熙'),\n(15, '雍正');\n```\n\n## 3.select查询表\n\n- select * 或者select 字段名  控制了查询返回什么样的字段(列)\n- where 条件 控制了查询返回什么样的记录(行)\n\n### 查询所有字段\n\n`语法: select * from 表名;`\n\n- 查询表的所有字段\n\n```cmd\n-- 查询表c的所有字段\nselect * from c;\n```\n\n### 指定字段名查询\n\n`语法:select 字段名, 字段名 from 表名;`\n\n```sql\n-- 查询表c的id字段\nselect id from c;\n```\n\n### 字段的别名\n\n- 通过 字段名 as 别名 的语法,可以给字段起一个别名,别名可以是中文\n- as可以省略\n- 字段名 as 别名 和 字段名 别名 结果是一样的\n\n```sql\n-- 通过as 给字段起一个别名\nselect card as 身份证, name as 姓名,sex as 性别 from students;\n\n-- 别名的as可以省略\nselect card 身份证, name 姓名,sex 性别 from students;\n```\n\n### 表的别名\n\n- 通过 表名 as 别名 给表起一个别名\n- as可以省略\n\n```sql\n-- 通过as 给表students起一个别名\nselect * from students as stu;\n\n-- 可以省略as\nselect * from students stu;\n```\n\n# 3.distinct过滤重复记录\n\n- 通过select distinct 字段名, 字段名 from 表名 来过滤select查询结果中的重复记录\n\n```sql\nSELECT DISTINCT sex, class from students;\n```\n\n# 4.where子句\n\n- where 后面跟一个条件,实现有选择的查询\n- select * from 表名 where 条件\n\n```sql\n-- 例 1：查询 students 表中学号 studentNo 等于’001’ 的记录\nselect * from students where studentNo = '001';\n```\n\n```sql\n-- 例 2：查询 students 表中年龄 age 等于 30 的姓名 name,班级 class\nselect name, class from students where age = 30;\n```\n\n# 比较运算符\n\n- =等于\n- < 小于\n- <= 小于等于\n- `>`大于\n- `>=`大于等于\n- !=和<>不等于\n\n# 7.逻辑运算符\n\n- and与\n  - 条件1 and 条件2\n  - 两个条件必须都满足\n- or或\n  - 条件1 or 条件2\n  - 两个条件只要有一个满足即可\n- not非\n  - not 条件\n  - 条件成立,not以后就不成立,条件不成立,not以后就成立\n\n```sql\n-- 例 1：查询 age 年龄小于 30，并且 sex 性别为’女’的同学记录\nSELECT * from students where age < 30 and sex = '女';\n\n-- 例 2：查询 sex 性别为’女’或者 class 班级为'1 班'的学生记录\nSELECT * from students where sex = '女' or class = '1班';\n\n-- 例 3：查询 hometown 老家非’天津’的学生记录\nSELECT * from students where not hometown = '天津';\n\n-- 例 3：查询 hometown 老家’天津’的学生记录\nSELECT * from students where not hometown != '天津';\n```\n\n# 8.模糊查询\n\n- like实现模糊查询\n- %代表任意多个字符\n- _代表任意一个字符\n- 字段名 like '字符%'\n  - 指定字符开始,后面任意多个字符\n\n```sql\n-- 例 1：查询 name 姓名中以’孙’开头的学生记录\nSELECT * from students where name like '孙%';\n\n-- 例 2：查询 name 姓名以’孙’开头，且名只有一个字的学生记录\nSELECT * from students where name like '孙_';\n```\n\n\n\n```sql\n-- 例 3：查询 name 为任意姓，名叫’乔’的学生记录\nSELECT * from students where name like '%乔';\n\n-- 查询 name 姓名有’白’子的学生记录\nSELECT * from students where name like '%白%';\n```\n\n# 9.范围查找\n\n- in (值, 值, 值)\n  - 非连续范围查找\n- between 开始值 and 结束值\n  - 连续范围查找,包含开始值 包含 结束值\n\n```sql\n-- 例 1：查询 hometown 家乡是’北京’或’上海’或’广东’的学生记录\nSELECT * from students where hometown = '北京' or hometown = '上海' or hometown = '广东';\nSELECT * from students where hometown in ('北京', '上海', '广东');\n\n-- 例 2：查询 age 年龄为 25 至 30 的学生记录\nSELECT * from students where age >= 25 and age <= 30; \nSELECT * from students where age BETWEEN 25 and 30;\n```\n\n# 10.空判断\n\n- null不是0,也不是'',null在SQL里面代表空,什么也没有\n- null不能用比较运算符的判断\n- is null  ---是否为null\n- is not null ---是否不为null\n  - <font color= red>不能用 字段名 = null 字段名 != null这些都是错误的</font>\n\n```sql\n-- 例 1：查询 card 身份证为 null 的学生记录\nSELECT * from students where card is null;\n\n-- 例 2：查询 card 身份证非 null 的学生记录\nSELECT * from students where card is not null;\n```\n\n# 12.order by排序\n\n- order by 字段名 [asc/desc]\n  - asc代表从小到大,升序,asc可以省略\n  - desc代表从大到小,不可以省略\n\n```sql\n-- 例 1：查询所有学生记录，按 age 年龄从小到大排序\n\nselect * from students order by age asc;\nselect * from students order by age;\n-- 例 2：查询所有学生记录，按 age 年龄从大到小排序\nselect * from students order by age desc;\n```\n\n- 两个字段排序的例子\n\n```sql\n-- 例 2：查询所有学生记录，按 age 年龄从大到小排序，\n--  年龄相同时，再按 studentNo 学号从小到大排序\nSELECT * from students ORDER BY age desc, studentNo;\n```\n\n- 当一条select语句出现了where和order by\n  - select * from 表名 where 条件 order by 字段1,字段2;\n  - 一定要把where写在order by前面\n\n# 13.聚合函数\n\n## count求select返回的记录总数\n\n- count(字段名)\n\n```sql\n-- 查询学生总数(查询stuents表有多少记录)\nselect count(*) from students;\nselect count(name) from students;\nselect count(DISTINCT class) from students;\nselect count(DISTINCT sex) from students;\n-- 查询女同学数量\nSELECT count(name) from students where sex = '女';\nSELECT count(*) from students where sex = '女';\nSELECT count(sex) from students where sex = '女';\n\n```\n\n## max查询最大值\n\n- max(字段名)\n- 查询指定字段里的最大值\n\n```sql\n-- 查询students中的最大年龄\nSELECT max(age) from students;\n\n-- 查询students中的女生最大年龄\nSELECT max(age) from students where sex = '女';\n\n\n-- 查询students中的'1班'最大年龄\nSELECT max(age) from students where class = '1班';\n```\n\n聚合函数不能用到where后面的条件里\n\n## min查询最小值\n\n- min(字段名)\n- 查询指定字段的最小值\n\n```sql\n-- 查询students中的最小年龄\nSELECT min(age) from students;\n\n-- 查询students中的女生最小年龄\nSELECT min(age) from students where sex = '女';\n\n\n-- 查询students中的'1班'最小年龄\nSELECT min(age) from students where class = '1班';\n```\n\n## sum求和\n\n- sum(字段名)\n- 指定字段的值求和\n\n```sql\n-- 查询students中的年龄总和\nSELECT sum(age) from students;\n\n-- 查询students中的女生年龄总和\nSELECT sum(age) from students where sex = '女';\n\n\n-- 查询students中的'1班'年龄总和\nSELECT sum(age) from students where class = '1班';\n```\n\n## avg求平均数\n\n- avg(字段名)\n- 指定字段的平均值\n\n```sql\n-- 查询students中的年龄总和\nSELECT sum(age) from students;\n\n-- 查询students中的女生年龄总和\nSELECT sum(age) from students where sex = '女';\n\n-- 查询students中的'1班'年龄总和\nSELECT sum(age) from students where class = '1班';\n```\n\n- avg的字段中如果有null,null不做为分母计算平均\n\n```sql\ncreate table aa (age int, name varchar(10));\ninsert into aa values (10, 'a'), (20, 'b'), (null, 'c');\nselect avg(age) from aa;-- 结果为15,而不是10\n```\n\n\n\n# 14.数据分组\n\n- group by 字段名\n- select 聚合函数 from 表名 where 条件 group by 字段\n- select 聚合函数 from 表名  group by 字段\n- group by就是配合聚合函数使用的\n\n```sql\n-- 分别查询男女同学的数量\nSELECT count(*) from students where sex = '男';\nSELECT count(*) from students where sex = '女';\n\nselect sex, count(*) from students group by sex;\n```\n\n- group by的例子\n\n```sql\n-- 分别查询各个年龄段的同学数量\n\nselect age, count(*) from students group by age;\n```\n\n- where与group by\n\n```sql\n-- 分别查询'1班'不同性别学生数量\n\nselect sex, count(*) from students where class = '1班' group by sex;\n```\n\n- where和group by 和order by的顺序\n  - select * from 表名 where 条件 group by 字段 order by 字段\n\n# 15.分组聚合之后的数据筛选\n\n- having子句\n- 总是出现在group by之后\n- select * from 表名 group by 字段 having 条件\n\n```sql\n-- 用where查询男生总数\n-- where先筛选复合条件的记录,然后在聚合统计\nSELECT count(*) from students where sex = '男';\n\n-- 用having查询男生总数\n-- having先分组聚合统计,在统计的结果中筛选\nSELECT count(*) from students GROUP BY sex HAVING sex = '男';\n```\n\n# having配合聚合函数的使用\n\n- where后面条件不能使用聚合函数, having可以使用聚合函数\n\n```sql\n-- 求班级人数大于3人的班级名字\nselect class from students GROUP BY class HAVING count(*) > 3;\n```\n\n# 16.having与where筛选的区别\n\n- where是对标的原始数据进行筛选\n- having是对group by之后已经分过组的数据进行筛选\n- having可以使用聚合函数, where不能用聚合函数\n\n# 17.limit显示指定的记录数\n\n- select * from 表名 where 条件 group by 字段 order by 字段 limit start, count\n- limit总是出现在select语句的最后,\n- start代表开始行号,行号从0开始编号\n- count代表要显示多少行\n- 省略start,默认从0开始,从第一行开始\n\n```sql\n-- 查询前三行记录\nSELECT * from students limit 0, 3;\nSELECT * from students limit 3;\n\n-- 查询从第4条记录开始的三条记录\nSELECT * from students limit 3, 3;\n```\n\n- 当有where或者group by或者order by, limit总是出现在最后\n\n```sql\n-- 查询年龄最大同学的name\nselect name from students ORDER BY age desc limit 1;\n\n-- 查询年龄最小的女同学信息\nSELECT * from students where sex = '女' ORDER BY age LIMIT 1;\n```\n\n\n\n# 18.数据分页显示\n\n- m 每页显示多少条记录\n- n,第n页\n- (n - 1) * m, m\n- 把计算结果写到limit后面\n\n```sql\n-- 每页显示4条记录,第3页的结果\nselect * from students limit 8, 4;\n-- 每页显示4条记录,第2页的结果\nselect * from students limit 4, 4;\n```\n\n- 已知每页记录数,求一张表需要几页显示完\n  - 求总页数\n  - 总页数 / 每页的记录数\n  - 如果结果是整数,那么就是总页数,如果结果有小数,那么就在结果的整数上+1\n\n## 4.update修改数据\n\n- `语法:update 表名 set 字段=值, 字段=值 where 条件`\n  - 如果没有where 条件代表修改表中所有的记录\n\n```sql\n-- 例 1：修改表 c，所有人的年龄(age 字段)改为 50\nupdate c set age = 50;\n```\n\n- 带有条件的update语句\n\n```sql\n-- 例 2：修改表 c，id 为 3 的记录，姓名(name 字段)改为 ‘狄仁杰‘，年龄(age 字段)改为 20\nupdate c set name = '狄仁杰', age = 20 where id = 3;\n```\n\n## 5.delete删除记录\n\n- `语法:'delete from 表名 where 条件'`\n\n- ```sql\n  -- 例 1：删除表 c 中 id 为 6 的记录\n  DELETE from c where id = 6;\n  -- 删除所有记录\n  DELETE from c;\n  -- 例 2：删除 class 为’1 班’,并且 age 大于 30 的学生记录\n  DELETE from students where class = '1班' and age > 30;\n  ```\n\n## 6.truncate table删除表的数据\n\n- truncate table 表名\n\n- ```sql\n  -- 删除表c中所有的记录\n  truncate table c;\n  ```\n\n### delete与truncate对比\n\n- 速度上，truncate>delete\n- 删除部分数据用delete+where\n- 保留表但将所有数据删除，自增长字段恢复从1开始，用truncate\n\n## 7.删除表\n\n- 语法一: drop table 表名\n\n```sql\n-- 删除表a\ndrop table a;\n```\n\n- 语法二: drop table if exists 表名\n\n```sql\n-- 如果表a存在,就删除表a,如果不存在,什么也不做\nDROP table if EXISTS a;\n```\n\n\n\n# \n","source":"_posts/数据库学习.md","raw":"---\ntitle: 数据库学习\ndate: 2025-04-24 17:57:03\ntags:\ncategories: 软测\ncover:\ndescription:\n---\n\n# 一.基础\n\n## 1.mysql的常用数据类型\n\n整数：int\n\n小整数：tinyint\n\n小数：decimal（5,2）小数2位，整数3位\n\n字符串：varchar\n\n日期时间：daytime\n\n## 2.数据库中的元素\n\n数据库-----database\n\n表----table\n\n字段(列)---field\n\n记录(行)---record\n\n# 二.常用操作\n\n## 1.创建表\n\n- `语法:create table 表名(字段名 字段类型, 字段名 字段类型)`\n\n- ```sql\n  -- 创建表 d，字段要求如下： \n  -- id ： 数 据 类 型 为 \n  -- int unsigned( 无 符 号 整 数 ) ） ,primary key( 主键),auto_increment(自增长)； \n  -- name 姓名：数据类型为 varchar(字符串)长度为 10,not null(非空)，\n  -- age 年龄：数据类型为 int（整数）,default(默认值)30；\n  create TABLE d (\n  id int UNSIGNED PRIMARY key auto_increment,\n  name varchar(10) not null,\n  age int DEFAULT 30);\n  ```\n\n### 字段的约束\n\n#### 1.主键 （primary key）\n\n- 主键的值不能重复\n\n- 自增长,auto_increment，值会系统自动维护,自动增长\n\n- ```sql\n  -- 如果不指定字段,主键自增长字段的值可以用占位符,0或者null\n  INSERT into d VALUES (0, '康熙', 30);\n  INSERT into d VALUES (NULL, '溥仪', 50);\n  ```\n\n#### 2.非空（not null）\n\n- 这个字段必须有值,如果没有值,insert插入会失败\n\n#### 3.唯一 （unique）\n\n- 字段的约束为唯一,表示字段的值不能重复\n\n#### 4.默认值 （default）\n\n- 当一个字段有默认值约束,插入数据时,如果指定了值,那么默认值无效,如果没有指定值,会使用默认值\n\n## 2.插入数据\n\n- `语法 : insert into 表名 values (值, 值,值);`\n\n- ```sql\n  insert into c values (1, '白起'， 25);\n  ```\n\n- `指定字段插入,语法:insert into 表名 (字段名, 字段名) values (值, 值);`\n\n- ```sql\n  -- 例 2：表 c 插入一条记录，只设置 id 和姓名 name\n  INSERT into c (id, name) values (3, '曹操');\n  ```\n\n\n插入多条记录\n\n- 多条insert语句,用分号隔开\n\n```sql\n-- 例 3：表 c 插入三条记录，写三条 insert 语句, 语句之间用分号隔开\nINSERT into c values (5, '周瑜', 50);\ninsert into c (id, name) values (6, '鲁肃');\nINSERT into c (name) values ('诸葛亮');\n```\n\n- 一条insert插入多条记录\n- 语法:insert into 表名 values (值,值),(值, 值),(值,值);\n\n```sql\n-- 例 4：表 c 插入多条记录，用一条 insert 语句, 数据之间用逗号隔开\ninsert into c values (10, '张三', 10),\n(11, '李四', 20),\n(12, '王五', 30);\n```\n\n- 一条insert指定字段插入多条记录\n- 语法:insert into 表名 (字段名, 字段名) values (值, 值), (值, 值), (值, 值)\n\n```sql\n-- 例 4：表 c 插入多条记录，用一条 insert 语句, 数据之间用逗号隔开\ninsert into c (id, name) values (13, '光绪'),\n(14, '康熙'),\n(15, '雍正');\n```\n\n## 3.select查询表\n\n- select * 或者select 字段名  控制了查询返回什么样的字段(列)\n- where 条件 控制了查询返回什么样的记录(行)\n\n### 查询所有字段\n\n`语法: select * from 表名;`\n\n- 查询表的所有字段\n\n```cmd\n-- 查询表c的所有字段\nselect * from c;\n```\n\n### 指定字段名查询\n\n`语法:select 字段名, 字段名 from 表名;`\n\n```sql\n-- 查询表c的id字段\nselect id from c;\n```\n\n### 字段的别名\n\n- 通过 字段名 as 别名 的语法,可以给字段起一个别名,别名可以是中文\n- as可以省略\n- 字段名 as 别名 和 字段名 别名 结果是一样的\n\n```sql\n-- 通过as 给字段起一个别名\nselect card as 身份证, name as 姓名,sex as 性别 from students;\n\n-- 别名的as可以省略\nselect card 身份证, name 姓名,sex 性别 from students;\n```\n\n### 表的别名\n\n- 通过 表名 as 别名 给表起一个别名\n- as可以省略\n\n```sql\n-- 通过as 给表students起一个别名\nselect * from students as stu;\n\n-- 可以省略as\nselect * from students stu;\n```\n\n# 3.distinct过滤重复记录\n\n- 通过select distinct 字段名, 字段名 from 表名 来过滤select查询结果中的重复记录\n\n```sql\nSELECT DISTINCT sex, class from students;\n```\n\n# 4.where子句\n\n- where 后面跟一个条件,实现有选择的查询\n- select * from 表名 where 条件\n\n```sql\n-- 例 1：查询 students 表中学号 studentNo 等于’001’ 的记录\nselect * from students where studentNo = '001';\n```\n\n```sql\n-- 例 2：查询 students 表中年龄 age 等于 30 的姓名 name,班级 class\nselect name, class from students where age = 30;\n```\n\n# 比较运算符\n\n- =等于\n- < 小于\n- <= 小于等于\n- `>`大于\n- `>=`大于等于\n- !=和<>不等于\n\n# 7.逻辑运算符\n\n- and与\n  - 条件1 and 条件2\n  - 两个条件必须都满足\n- or或\n  - 条件1 or 条件2\n  - 两个条件只要有一个满足即可\n- not非\n  - not 条件\n  - 条件成立,not以后就不成立,条件不成立,not以后就成立\n\n```sql\n-- 例 1：查询 age 年龄小于 30，并且 sex 性别为’女’的同学记录\nSELECT * from students where age < 30 and sex = '女';\n\n-- 例 2：查询 sex 性别为’女’或者 class 班级为'1 班'的学生记录\nSELECT * from students where sex = '女' or class = '1班';\n\n-- 例 3：查询 hometown 老家非’天津’的学生记录\nSELECT * from students where not hometown = '天津';\n\n-- 例 3：查询 hometown 老家’天津’的学生记录\nSELECT * from students where not hometown != '天津';\n```\n\n# 8.模糊查询\n\n- like实现模糊查询\n- %代表任意多个字符\n- _代表任意一个字符\n- 字段名 like '字符%'\n  - 指定字符开始,后面任意多个字符\n\n```sql\n-- 例 1：查询 name 姓名中以’孙’开头的学生记录\nSELECT * from students where name like '孙%';\n\n-- 例 2：查询 name 姓名以’孙’开头，且名只有一个字的学生记录\nSELECT * from students where name like '孙_';\n```\n\n\n\n```sql\n-- 例 3：查询 name 为任意姓，名叫’乔’的学生记录\nSELECT * from students where name like '%乔';\n\n-- 查询 name 姓名有’白’子的学生记录\nSELECT * from students where name like '%白%';\n```\n\n# 9.范围查找\n\n- in (值, 值, 值)\n  - 非连续范围查找\n- between 开始值 and 结束值\n  - 连续范围查找,包含开始值 包含 结束值\n\n```sql\n-- 例 1：查询 hometown 家乡是’北京’或’上海’或’广东’的学生记录\nSELECT * from students where hometown = '北京' or hometown = '上海' or hometown = '广东';\nSELECT * from students where hometown in ('北京', '上海', '广东');\n\n-- 例 2：查询 age 年龄为 25 至 30 的学生记录\nSELECT * from students where age >= 25 and age <= 30; \nSELECT * from students where age BETWEEN 25 and 30;\n```\n\n# 10.空判断\n\n- null不是0,也不是'',null在SQL里面代表空,什么也没有\n- null不能用比较运算符的判断\n- is null  ---是否为null\n- is not null ---是否不为null\n  - <font color= red>不能用 字段名 = null 字段名 != null这些都是错误的</font>\n\n```sql\n-- 例 1：查询 card 身份证为 null 的学生记录\nSELECT * from students where card is null;\n\n-- 例 2：查询 card 身份证非 null 的学生记录\nSELECT * from students where card is not null;\n```\n\n# 12.order by排序\n\n- order by 字段名 [asc/desc]\n  - asc代表从小到大,升序,asc可以省略\n  - desc代表从大到小,不可以省略\n\n```sql\n-- 例 1：查询所有学生记录，按 age 年龄从小到大排序\n\nselect * from students order by age asc;\nselect * from students order by age;\n-- 例 2：查询所有学生记录，按 age 年龄从大到小排序\nselect * from students order by age desc;\n```\n\n- 两个字段排序的例子\n\n```sql\n-- 例 2：查询所有学生记录，按 age 年龄从大到小排序，\n--  年龄相同时，再按 studentNo 学号从小到大排序\nSELECT * from students ORDER BY age desc, studentNo;\n```\n\n- 当一条select语句出现了where和order by\n  - select * from 表名 where 条件 order by 字段1,字段2;\n  - 一定要把where写在order by前面\n\n# 13.聚合函数\n\n## count求select返回的记录总数\n\n- count(字段名)\n\n```sql\n-- 查询学生总数(查询stuents表有多少记录)\nselect count(*) from students;\nselect count(name) from students;\nselect count(DISTINCT class) from students;\nselect count(DISTINCT sex) from students;\n-- 查询女同学数量\nSELECT count(name) from students where sex = '女';\nSELECT count(*) from students where sex = '女';\nSELECT count(sex) from students where sex = '女';\n\n```\n\n## max查询最大值\n\n- max(字段名)\n- 查询指定字段里的最大值\n\n```sql\n-- 查询students中的最大年龄\nSELECT max(age) from students;\n\n-- 查询students中的女生最大年龄\nSELECT max(age) from students where sex = '女';\n\n\n-- 查询students中的'1班'最大年龄\nSELECT max(age) from students where class = '1班';\n```\n\n聚合函数不能用到where后面的条件里\n\n## min查询最小值\n\n- min(字段名)\n- 查询指定字段的最小值\n\n```sql\n-- 查询students中的最小年龄\nSELECT min(age) from students;\n\n-- 查询students中的女生最小年龄\nSELECT min(age) from students where sex = '女';\n\n\n-- 查询students中的'1班'最小年龄\nSELECT min(age) from students where class = '1班';\n```\n\n## sum求和\n\n- sum(字段名)\n- 指定字段的值求和\n\n```sql\n-- 查询students中的年龄总和\nSELECT sum(age) from students;\n\n-- 查询students中的女生年龄总和\nSELECT sum(age) from students where sex = '女';\n\n\n-- 查询students中的'1班'年龄总和\nSELECT sum(age) from students where class = '1班';\n```\n\n## avg求平均数\n\n- avg(字段名)\n- 指定字段的平均值\n\n```sql\n-- 查询students中的年龄总和\nSELECT sum(age) from students;\n\n-- 查询students中的女生年龄总和\nSELECT sum(age) from students where sex = '女';\n\n-- 查询students中的'1班'年龄总和\nSELECT sum(age) from students where class = '1班';\n```\n\n- avg的字段中如果有null,null不做为分母计算平均\n\n```sql\ncreate table aa (age int, name varchar(10));\ninsert into aa values (10, 'a'), (20, 'b'), (null, 'c');\nselect avg(age) from aa;-- 结果为15,而不是10\n```\n\n\n\n# 14.数据分组\n\n- group by 字段名\n- select 聚合函数 from 表名 where 条件 group by 字段\n- select 聚合函数 from 表名  group by 字段\n- group by就是配合聚合函数使用的\n\n```sql\n-- 分别查询男女同学的数量\nSELECT count(*) from students where sex = '男';\nSELECT count(*) from students where sex = '女';\n\nselect sex, count(*) from students group by sex;\n```\n\n- group by的例子\n\n```sql\n-- 分别查询各个年龄段的同学数量\n\nselect age, count(*) from students group by age;\n```\n\n- where与group by\n\n```sql\n-- 分别查询'1班'不同性别学生数量\n\nselect sex, count(*) from students where class = '1班' group by sex;\n```\n\n- where和group by 和order by的顺序\n  - select * from 表名 where 条件 group by 字段 order by 字段\n\n# 15.分组聚合之后的数据筛选\n\n- having子句\n- 总是出现在group by之后\n- select * from 表名 group by 字段 having 条件\n\n```sql\n-- 用where查询男生总数\n-- where先筛选复合条件的记录,然后在聚合统计\nSELECT count(*) from students where sex = '男';\n\n-- 用having查询男生总数\n-- having先分组聚合统计,在统计的结果中筛选\nSELECT count(*) from students GROUP BY sex HAVING sex = '男';\n```\n\n# having配合聚合函数的使用\n\n- where后面条件不能使用聚合函数, having可以使用聚合函数\n\n```sql\n-- 求班级人数大于3人的班级名字\nselect class from students GROUP BY class HAVING count(*) > 3;\n```\n\n# 16.having与where筛选的区别\n\n- where是对标的原始数据进行筛选\n- having是对group by之后已经分过组的数据进行筛选\n- having可以使用聚合函数, where不能用聚合函数\n\n# 17.limit显示指定的记录数\n\n- select * from 表名 where 条件 group by 字段 order by 字段 limit start, count\n- limit总是出现在select语句的最后,\n- start代表开始行号,行号从0开始编号\n- count代表要显示多少行\n- 省略start,默认从0开始,从第一行开始\n\n```sql\n-- 查询前三行记录\nSELECT * from students limit 0, 3;\nSELECT * from students limit 3;\n\n-- 查询从第4条记录开始的三条记录\nSELECT * from students limit 3, 3;\n```\n\n- 当有where或者group by或者order by, limit总是出现在最后\n\n```sql\n-- 查询年龄最大同学的name\nselect name from students ORDER BY age desc limit 1;\n\n-- 查询年龄最小的女同学信息\nSELECT * from students where sex = '女' ORDER BY age LIMIT 1;\n```\n\n\n\n# 18.数据分页显示\n\n- m 每页显示多少条记录\n- n,第n页\n- (n - 1) * m, m\n- 把计算结果写到limit后面\n\n```sql\n-- 每页显示4条记录,第3页的结果\nselect * from students limit 8, 4;\n-- 每页显示4条记录,第2页的结果\nselect * from students limit 4, 4;\n```\n\n- 已知每页记录数,求一张表需要几页显示完\n  - 求总页数\n  - 总页数 / 每页的记录数\n  - 如果结果是整数,那么就是总页数,如果结果有小数,那么就在结果的整数上+1\n\n## 4.update修改数据\n\n- `语法:update 表名 set 字段=值, 字段=值 where 条件`\n  - 如果没有where 条件代表修改表中所有的记录\n\n```sql\n-- 例 1：修改表 c，所有人的年龄(age 字段)改为 50\nupdate c set age = 50;\n```\n\n- 带有条件的update语句\n\n```sql\n-- 例 2：修改表 c，id 为 3 的记录，姓名(name 字段)改为 ‘狄仁杰‘，年龄(age 字段)改为 20\nupdate c set name = '狄仁杰', age = 20 where id = 3;\n```\n\n## 5.delete删除记录\n\n- `语法:'delete from 表名 where 条件'`\n\n- ```sql\n  -- 例 1：删除表 c 中 id 为 6 的记录\n  DELETE from c where id = 6;\n  -- 删除所有记录\n  DELETE from c;\n  -- 例 2：删除 class 为’1 班’,并且 age 大于 30 的学生记录\n  DELETE from students where class = '1班' and age > 30;\n  ```\n\n## 6.truncate table删除表的数据\n\n- truncate table 表名\n\n- ```sql\n  -- 删除表c中所有的记录\n  truncate table c;\n  ```\n\n### delete与truncate对比\n\n- 速度上，truncate>delete\n- 删除部分数据用delete+where\n- 保留表但将所有数据删除，自增长字段恢复从1开始，用truncate\n\n## 7.删除表\n\n- 语法一: drop table 表名\n\n```sql\n-- 删除表a\ndrop table a;\n```\n\n- 语法二: drop table if exists 表名\n\n```sql\n-- 如果表a存在,就删除表a,如果不存在,什么也不做\nDROP table if EXISTS a;\n```\n\n\n\n# \n","slug":"数据库学习","published":1,"updated":"2025-04-26T02:45:20.065Z","comments":1,"layout":"post","photos":[],"_id":"cmcpwe25v001c9wnj6mwpg5z6","content":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一.基础\"></a>一.基础</h1><h2 id=\"1-mysql的常用数据类型\"><a href=\"#1-mysql的常用数据类型\" class=\"headerlink\" title=\"1.mysql的常用数据类型\"></a>1.mysql的常用数据类型</h2><p>整数：int</p>\n<p>小整数：tinyint</p>\n<p>小数：decimal（5,2）小数2位，整数3位</p>\n<p>字符串：varchar</p>\n<p>日期时间：daytime</p>\n<h2 id=\"2-数据库中的元素\"><a href=\"#2-数据库中的元素\" class=\"headerlink\" title=\"2.数据库中的元素\"></a>2.数据库中的元素</h2><p>数据库—–database</p>\n<p>表—-table</p>\n<p>字段(列)—field</p>\n<p>记录(行)—record</p>\n<h1 id=\"二-常用操作\"><a href=\"#二-常用操作\" class=\"headerlink\" title=\"二.常用操作\"></a>二.常用操作</h1><h2 id=\"1-创建表\"><a href=\"#1-创建表\" class=\"headerlink\" title=\"1.创建表\"></a>1.创建表</h2><ul>\n<li><p><code>语法:create table 表名(字段名 字段类型, 字段名 字段类型)</code></p>\n</li>\n<li><pre><code class=\"sql\">-- 创建表 d，字段要求如下： \n-- id ： 数 据 类 型 为 \n-- int unsigned( 无 符 号 整 数 ) ） ,primary key( 主键),auto_increment(自增长)； \n-- name 姓名：数据类型为 varchar(字符串)长度为 10,not null(非空)，\n-- age 年龄：数据类型为 int（整数）,default(默认值)30；\ncreate TABLE d (\nid int UNSIGNED PRIMARY key auto_increment,\nname varchar(10) not null,\nage int DEFAULT 30);\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 字段的约束</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1.主键 （primary key）</span><br><span class=\"line\"></span><br><span class=\"line\">- 主键的值不能重复</span><br><span class=\"line\"></span><br><span class=\"line\">- 自增长,auto_increment，值会系统自动维护,自动增长</span><br><span class=\"line\"></span><br><span class=\"line\">- ```sql</span><br><span class=\"line\">  -- 如果不指定字段,主键自增长字段的值可以用占位符,0或者null</span><br><span class=\"line\">  INSERT into d VALUES (0, &#x27;康熙&#x27;, 30);</span><br><span class=\"line\">  INSERT into d VALUES (NULL, &#x27;溥仪&#x27;, 50);</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<h4 id=\"2-非空（not-null）\"><a href=\"#2-非空（not-null）\" class=\"headerlink\" title=\"2.非空（not null）\"></a>2.非空（not null）</h4><ul>\n<li>这个字段必须有值,如果没有值,insert插入会失败</li>\n</ul>\n<h4 id=\"3-唯一-（unique）\"><a href=\"#3-唯一-（unique）\" class=\"headerlink\" title=\"3.唯一 （unique）\"></a>3.唯一 （unique）</h4><ul>\n<li>字段的约束为唯一,表示字段的值不能重复</li>\n</ul>\n<h4 id=\"4-默认值-（default）\"><a href=\"#4-默认值-（default）\" class=\"headerlink\" title=\"4.默认值 （default）\"></a>4.默认值 （default）</h4><ul>\n<li>当一个字段有默认值约束,插入数据时,如果指定了值,那么默认值无效,如果没有指定值,会使用默认值</li>\n</ul>\n<h2 id=\"2-插入数据\"><a href=\"#2-插入数据\" class=\"headerlink\" title=\"2.插入数据\"></a>2.插入数据</h2><ul>\n<li><p><code>语法 : insert into 表名 values (值, 值,值);</code></p>\n</li>\n<li><pre><code class=\"sql\">insert into c values (1, &#39;白起&#39;， 25);\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- `指定字段插入,语法:insert into 表名 (字段名, 字段名) values (值, 值);`</span><br><span class=\"line\"></span><br><span class=\"line\">- ```sql</span><br><span class=\"line\">  -- 例 2：表 c 插入一条记录，只设置 id 和姓名 name</span><br><span class=\"line\">  INSERT into c (id, name) values (3, &#x27;曹操&#x27;);</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<p>插入多条记录</p>\n<ul>\n<li>多条insert语句,用分号隔开</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 3：表 c 插入三条记录，写三条 insert 语句, 语句之间用分号隔开</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">into</span> c <span class=\"keyword\">values</span> (<span class=\"number\">5</span>, <span class=\"string\">&#x27;周瑜&#x27;</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> c (id, name) <span class=\"keyword\">values</span> (<span class=\"number\">6</span>, <span class=\"string\">&#x27;鲁肃&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">into</span> c (name) <span class=\"keyword\">values</span> (<span class=\"string\">&#x27;诸葛亮&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一条insert插入多条记录</li>\n<li>语法:insert into 表名 values (值,值),(值, 值),(值,值);</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 4：表 c 插入多条记录，用一条 insert 语句, 数据之间用逗号隔开</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> c <span class=\"keyword\">values</span> (<span class=\"number\">10</span>, <span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">(<span class=\"number\">11</span>, <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"number\">20</span>),</span><br><span class=\"line\">(<span class=\"number\">12</span>, <span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"number\">30</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一条insert指定字段插入多条记录</li>\n<li>语法:insert into 表名 (字段名, 字段名) values (值, 值), (值, 值), (值, 值)</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 4：表 c 插入多条记录，用一条 insert 语句, 数据之间用逗号隔开</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> c (id, name) <span class=\"keyword\">values</span> (<span class=\"number\">13</span>, <span class=\"string\">&#x27;光绪&#x27;</span>),</span><br><span class=\"line\">(<span class=\"number\">14</span>, <span class=\"string\">&#x27;康熙&#x27;</span>),</span><br><span class=\"line\">(<span class=\"number\">15</span>, <span class=\"string\">&#x27;雍正&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-select查询表\"><a href=\"#3-select查询表\" class=\"headerlink\" title=\"3.select查询表\"></a>3.select查询表</h2><ul>\n<li>select * 或者select 字段名  控制了查询返回什么样的字段(列)</li>\n<li>where 条件 控制了查询返回什么样的记录(行)</li>\n</ul>\n<h3 id=\"查询所有字段\"><a href=\"#查询所有字段\" class=\"headerlink\" title=\"查询所有字段\"></a>查询所有字段</h3><p><code>语法: select * from 表名;</code></p>\n<ul>\n<li>查询表的所有字段</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询表c的所有字段</span><br><span class=\"line\">select * from c;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指定字段名查询\"><a href=\"#指定字段名查询\" class=\"headerlink\" title=\"指定字段名查询\"></a>指定字段名查询</h3><p><code>语法:select 字段名, 字段名 from 表名;</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询表c的id字段</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> c;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字段的别名\"><a href=\"#字段的别名\" class=\"headerlink\" title=\"字段的别名\"></a>字段的别名</h3><ul>\n<li>通过 字段名 as 别名 的语法,可以给字段起一个别名,别名可以是中文</li>\n<li>as可以省略</li>\n<li>字段名 as 别名 和 字段名 别名 结果是一样的</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 通过as 给字段起一个别名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> card <span class=\"keyword\">as</span> 身份证, name <span class=\"keyword\">as</span> 姓名,sex <span class=\"keyword\">as</span> 性别 <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 别名的as可以省略</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> card 身份证, name 姓名,sex 性别 <span class=\"keyword\">from</span> students;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表的别名\"><a href=\"#表的别名\" class=\"headerlink\" title=\"表的别名\"></a>表的别名</h3><ul>\n<li>通过 表名 as 别名 给表起一个别名</li>\n<li>as可以省略</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 通过as 给表students起一个别名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">as</span> stu;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 可以省略as</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students stu;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-distinct过滤重复记录\"><a href=\"#3-distinct过滤重复记录\" class=\"headerlink\" title=\"3.distinct过滤重复记录\"></a>3.distinct过滤重复记录</h1><ul>\n<li>通过select distinct 字段名, 字段名 from 表名 来过滤select查询结果中的重复记录</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> sex, class <span class=\"keyword\">from</span> students;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-where子句\"><a href=\"#4-where子句\" class=\"headerlink\" title=\"4.where子句\"></a>4.where子句</h1><ul>\n<li>where 后面跟一个条件,实现有选择的查询</li>\n<li>select * from 表名 where 条件</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 1：查询 students 表中学号 studentNo 等于’001’ 的记录</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> studentNo <span class=\"operator\">=</span> <span class=\"string\">&#x27;001&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 2：查询 students 表中年龄 age 等于 30 的姓名 name,班级 class</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> name, class <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> age <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h1><ul>\n<li>&#x3D;等于</li>\n<li>&lt; 小于</li>\n<li>&lt;&#x3D; 小于等于</li>\n<li><code>&gt;</code>大于</li>\n<li><code>&gt;=</code>大于等于</li>\n<li>!&#x3D;和&lt;&gt;不等于</li>\n</ul>\n<h1 id=\"7-逻辑运算符\"><a href=\"#7-逻辑运算符\" class=\"headerlink\" title=\"7.逻辑运算符\"></a>7.逻辑运算符</h1><ul>\n<li>and与<ul>\n<li>条件1 and 条件2</li>\n<li>两个条件必须都满足</li>\n</ul>\n</li>\n<li>or或<ul>\n<li>条件1 or 条件2</li>\n<li>两个条件只要有一个满足即可</li>\n</ul>\n</li>\n<li>not非<ul>\n<li>not 条件</li>\n<li>条件成立,not以后就不成立,条件不成立,not以后就成立</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 1：查询 age 年龄小于 30，并且 sex 性别为’女’的同学记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> age <span class=\"operator\">&lt;</span> <span class=\"number\">30</span> <span class=\"keyword\">and</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 例 2：查询 sex 性别为’女’或者 class 班级为&#x27;1 班&#x27;的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span> <span class=\"keyword\">or</span> class <span class=\"operator\">=</span> <span class=\"string\">&#x27;1班&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 例 3：查询 hometown 老家非’天津’的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> <span class=\"keyword\">not</span> hometown <span class=\"operator\">=</span> <span class=\"string\">&#x27;天津&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 例 3：查询 hometown 老家’天津’的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> <span class=\"keyword\">not</span> hometown <span class=\"operator\">!=</span> <span class=\"string\">&#x27;天津&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"8-模糊查询\"><a href=\"#8-模糊查询\" class=\"headerlink\" title=\"8.模糊查询\"></a>8.模糊查询</h1><ul>\n<li>like实现模糊查询</li>\n<li>%代表任意多个字符</li>\n<li>_代表任意一个字符</li>\n<li>字段名 like ‘字符%’<ul>\n<li>指定字符开始,后面任意多个字符</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 1：查询 name 姓名中以’孙’开头的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;孙%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 例 2：查询 name 姓名以’孙’开头，且名只有一个字的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;孙_&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 3：查询 name 为任意姓，名叫’乔’的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%乔&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询 name 姓名有’白’子的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%白%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"9-范围查找\"><a href=\"#9-范围查找\" class=\"headerlink\" title=\"9.范围查找\"></a>9.范围查找</h1><ul>\n<li>in (值, 值, 值)<ul>\n<li>非连续范围查找</li>\n</ul>\n</li>\n<li>between 开始值 and 结束值<ul>\n<li>连续范围查找,包含开始值 包含 结束值</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 1：查询 hometown 家乡是’北京’或’上海’或’广东’的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> hometown <span class=\"operator\">=</span> <span class=\"string\">&#x27;北京&#x27;</span> <span class=\"keyword\">or</span> hometown <span class=\"operator\">=</span> <span class=\"string\">&#x27;上海&#x27;</span> <span class=\"keyword\">or</span> hometown <span class=\"operator\">=</span> <span class=\"string\">&#x27;广东&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> hometown <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广东&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 例 2：查询 age 年龄为 25 至 30 的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> age <span class=\"operator\">&gt;=</span> <span class=\"number\">25</span> <span class=\"keyword\">and</span> age <span class=\"operator\">&lt;=</span> <span class=\"number\">30</span>; </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> age <span class=\"keyword\">BETWEEN</span> <span class=\"number\">25</span> <span class=\"keyword\">and</span> <span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"10-空判断\"><a href=\"#10-空判断\" class=\"headerlink\" title=\"10.空判断\"></a>10.空判断</h1><ul>\n<li>null不是0,也不是’’,null在SQL里面代表空,什么也没有</li>\n<li>null不能用比较运算符的判断</li>\n<li>is null  —是否为null</li>\n<li>is not null —是否不为null<ul>\n<li><font color= red>不能用 字段名 &#x3D; null 字段名 !&#x3D; null这些都是错误的</font></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 1：查询 card 身份证为 null 的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> card <span class=\"keyword\">is</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 例 2：查询 card 身份证非 null 的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> card <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"12-order-by排序\"><a href=\"#12-order-by排序\" class=\"headerlink\" title=\"12.order by排序\"></a>12.order by排序</h1><ul>\n<li>order by 字段名 [asc&#x2F;desc]<ul>\n<li>asc代表从小到大,升序,asc可以省略</li>\n<li>desc代表从大到小,不可以省略</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 1：查询所有学生记录，按 age 年龄从小到大排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> age <span class=\"keyword\">asc</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> age;</span><br><span class=\"line\"><span class=\"comment\">-- 例 2：查询所有学生记录，按 age 年龄从大到小排序</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> age <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>两个字段排序的例子</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 2：查询所有学生记录，按 age 年龄从大到小排序，</span></span><br><span class=\"line\"><span class=\"comment\">--  年龄相同时，再按 studentNo 学号从小到大排序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> age <span class=\"keyword\">desc</span>, studentNo;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当一条select语句出现了where和order by<ul>\n<li>select * from 表名 where 条件 order by 字段1,字段2;</li>\n<li>一定要把where写在order by前面</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"13-聚合函数\"><a href=\"#13-聚合函数\" class=\"headerlink\" title=\"13.聚合函数\"></a>13.聚合函数</h1><h2 id=\"count求select返回的记录总数\"><a href=\"#count求select返回的记录总数\" class=\"headerlink\" title=\"count求select返回的记录总数\"></a>count求select返回的记录总数</h2><ul>\n<li>count(字段名)</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询学生总数(查询stuents表有多少记录)</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(name) <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">DISTINCT</span> class) <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">DISTINCT</span> sex) <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"><span class=\"comment\">-- 查询女同学数量</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(name) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(sex) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"max查询最大值\"><a href=\"#max查询最大值\" class=\"headerlink\" title=\"max查询最大值\"></a>max查询最大值</h2><ul>\n<li>max(字段名)</li>\n<li>查询指定字段里的最大值</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询students中的最大年龄</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">max</span>(age) <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询students中的女生最大年龄</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">max</span>(age) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询students中的&#x27;1班&#x27;最大年龄</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">max</span>(age) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> class <span class=\"operator\">=</span> <span class=\"string\">&#x27;1班&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>聚合函数不能用到where后面的条件里</p>\n<h2 id=\"min查询最小值\"><a href=\"#min查询最小值\" class=\"headerlink\" title=\"min查询最小值\"></a>min查询最小值</h2><ul>\n<li>min(字段名)</li>\n<li>查询指定字段的最小值</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询students中的最小年龄</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">min</span>(age) <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询students中的女生最小年龄</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">min</span>(age) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询students中的&#x27;1班&#x27;最小年龄</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">min</span>(age) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> class <span class=\"operator\">=</span> <span class=\"string\">&#x27;1班&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sum求和\"><a href=\"#sum求和\" class=\"headerlink\" title=\"sum求和\"></a>sum求和</h2><ul>\n<li>sum(字段名)</li>\n<li>指定字段的值求和</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询students中的年龄总和</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">sum</span>(age) <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询students中的女生年龄总和</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">sum</span>(age) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询students中的&#x27;1班&#x27;年龄总和</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">sum</span>(age) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> class <span class=\"operator\">=</span> <span class=\"string\">&#x27;1班&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"avg求平均数\"><a href=\"#avg求平均数\" class=\"headerlink\" title=\"avg求平均数\"></a>avg求平均数</h2><ul>\n<li>avg(字段名)</li>\n<li>指定字段的平均值</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询students中的年龄总和</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">sum</span>(age) <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询students中的女生年龄总和</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">sum</span>(age) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询students中的&#x27;1班&#x27;年龄总和</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">sum</span>(age) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> class <span class=\"operator\">=</span> <span class=\"string\">&#x27;1班&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>avg的字段中如果有null,null不做为分母计算平均</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> aa (age <span class=\"type\">int</span>, name <span class=\"type\">varchar</span>(<span class=\"number\">10</span>));</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> aa <span class=\"keyword\">values</span> (<span class=\"number\">10</span>, <span class=\"string\">&#x27;a&#x27;</span>), (<span class=\"number\">20</span>, <span class=\"string\">&#x27;b&#x27;</span>), (<span class=\"keyword\">null</span>, <span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">avg</span>(age) <span class=\"keyword\">from</span> aa;<span class=\"comment\">-- 结果为15,而不是10</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"14-数据分组\"><a href=\"#14-数据分组\" class=\"headerlink\" title=\"14.数据分组\"></a>14.数据分组</h1><ul>\n<li>group by 字段名</li>\n<li>select 聚合函数 from 表名 where 条件 group by 字段</li>\n<li>select 聚合函数 from 表名  group by 字段</li>\n<li>group by就是配合聚合函数使用的</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 分别查询男女同学的数量</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;男&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> sex, <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sex;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>group by的例子</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 分别查询各个年龄段的同学数量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> age, <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> age;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>where与group by</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 分别查询&#x27;1班&#x27;不同性别学生数量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> sex, <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> class <span class=\"operator\">=</span> <span class=\"string\">&#x27;1班&#x27;</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sex;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>where和group by 和order by的顺序<ul>\n<li>select * from 表名 where 条件 group by 字段 order by 字段</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"15-分组聚合之后的数据筛选\"><a href=\"#15-分组聚合之后的数据筛选\" class=\"headerlink\" title=\"15.分组聚合之后的数据筛选\"></a>15.分组聚合之后的数据筛选</h1><ul>\n<li>having子句</li>\n<li>总是出现在group by之后</li>\n<li>select * from 表名 group by 字段 having 条件</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 用where查询男生总数</span></span><br><span class=\"line\"><span class=\"comment\">-- where先筛选复合条件的记录,然后在聚合统计</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;男&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 用having查询男生总数</span></span><br><span class=\"line\"><span class=\"comment\">-- having先分组聚合统计,在统计的结果中筛选</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> sex <span class=\"keyword\">HAVING</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"having配合聚合函数的使用\"><a href=\"#having配合聚合函数的使用\" class=\"headerlink\" title=\"having配合聚合函数的使用\"></a>having配合聚合函数的使用</h1><ul>\n<li>where后面条件不能使用聚合函数, having可以使用聚合函数</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 求班级人数大于3人的班级名字</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> class <span class=\"keyword\">from</span> students <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> class <span class=\"keyword\">HAVING</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"operator\">&gt;</span> <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"16-having与where筛选的区别\"><a href=\"#16-having与where筛选的区别\" class=\"headerlink\" title=\"16.having与where筛选的区别\"></a>16.having与where筛选的区别</h1><ul>\n<li>where是对标的原始数据进行筛选</li>\n<li>having是对group by之后已经分过组的数据进行筛选</li>\n<li>having可以使用聚合函数, where不能用聚合函数</li>\n</ul>\n<h1 id=\"17-limit显示指定的记录数\"><a href=\"#17-limit显示指定的记录数\" class=\"headerlink\" title=\"17.limit显示指定的记录数\"></a>17.limit显示指定的记录数</h1><ul>\n<li>select * from 表名 where 条件 group by 字段 order by 字段 limit start, count</li>\n<li>limit总是出现在select语句的最后,</li>\n<li>start代表开始行号,行号从0开始编号</li>\n<li>count代表要显示多少行</li>\n<li>省略start,默认从0开始,从第一行开始</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询前三行记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students limit <span class=\"number\">0</span>, <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students limit <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询从第4条记录开始的三条记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students limit <span class=\"number\">3</span>, <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当有where或者group by或者order by, limit总是出现在最后</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询年龄最大同学的name</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> name <span class=\"keyword\">from</span> students <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> age <span class=\"keyword\">desc</span> limit <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询年龄最小的女同学信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> age LIMIT <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"18-数据分页显示\"><a href=\"#18-数据分页显示\" class=\"headerlink\" title=\"18.数据分页显示\"></a>18.数据分页显示</h1><ul>\n<li>m 每页显示多少条记录</li>\n<li>n,第n页</li>\n<li>(n - 1) * m, m</li>\n<li>把计算结果写到limit后面</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 每页显示4条记录,第3页的结果</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students limit <span class=\"number\">8</span>, <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 每页显示4条记录,第2页的结果</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students limit <span class=\"number\">4</span>, <span class=\"number\">4</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>已知每页记录数,求一张表需要几页显示完<ul>\n<li>求总页数</li>\n<li>总页数 &#x2F; 每页的记录数</li>\n<li>如果结果是整数,那么就是总页数,如果结果有小数,那么就在结果的整数上+1</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-update修改数据\"><a href=\"#4-update修改数据\" class=\"headerlink\" title=\"4.update修改数据\"></a>4.update修改数据</h2><ul>\n<li><code>语法:update 表名 set 字段=值, 字段=值 where 条件</code><ul>\n<li>如果没有where 条件代表修改表中所有的记录</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 1：修改表 c，所有人的年龄(age 字段)改为 50</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> c <span class=\"keyword\">set</span> age <span class=\"operator\">=</span> <span class=\"number\">50</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>带有条件的update语句</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 2：修改表 c，id 为 3 的记录，姓名(name 字段)改为 ‘狄仁杰‘，年龄(age 字段)改为 20</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> c <span class=\"keyword\">set</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;狄仁杰&#x27;</span>, age <span class=\"operator\">=</span> <span class=\"number\">20</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-delete删除记录\"><a href=\"#5-delete删除记录\" class=\"headerlink\" title=\"5.delete删除记录\"></a>5.delete删除记录</h2><ul>\n<li><p><code>语法:&#39;delete from 表名 where 条件&#39;</code></p>\n</li>\n<li><pre><code class=\"sql\">-- 例 1：删除表 c 中 id 为 6 的记录\nDELETE from c where id = 6;\n-- 删除所有记录\nDELETE from c;\n-- 例 2：删除 class 为’1 班’,并且 age 大于 30 的学生记录\nDELETE from students where class = &#39;1班&#39; and age &gt; 30;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 6.truncate table删除表的数据</span><br><span class=\"line\"></span><br><span class=\"line\">- truncate table 表名</span><br><span class=\"line\"></span><br><span class=\"line\">- ```sql</span><br><span class=\"line\">  -- 删除表c中所有的记录</span><br><span class=\"line\">  truncate table c;</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<h3 id=\"delete与truncate对比\"><a href=\"#delete与truncate对比\" class=\"headerlink\" title=\"delete与truncate对比\"></a>delete与truncate对比</h3><ul>\n<li>速度上，truncate&gt;delete</li>\n<li>删除部分数据用delete+where</li>\n<li>保留表但将所有数据删除，自增长字段恢复从1开始，用truncate</li>\n</ul>\n<h2 id=\"7-删除表\"><a href=\"#7-删除表\" class=\"headerlink\" title=\"7.删除表\"></a>7.删除表</h2><ul>\n<li>语法一: drop table 表名</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除表a</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> a;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>语法二: drop table if exists 表名</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 如果表a存在,就删除表a,如果不存在,什么也不做</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">EXISTS</span> a;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","cover_type":"img","excerpt":"","more":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一.基础\"></a>一.基础</h1><h2 id=\"1-mysql的常用数据类型\"><a href=\"#1-mysql的常用数据类型\" class=\"headerlink\" title=\"1.mysql的常用数据类型\"></a>1.mysql的常用数据类型</h2><p>整数：int</p>\n<p>小整数：tinyint</p>\n<p>小数：decimal（5,2）小数2位，整数3位</p>\n<p>字符串：varchar</p>\n<p>日期时间：daytime</p>\n<h2 id=\"2-数据库中的元素\"><a href=\"#2-数据库中的元素\" class=\"headerlink\" title=\"2.数据库中的元素\"></a>2.数据库中的元素</h2><p>数据库—–database</p>\n<p>表—-table</p>\n<p>字段(列)—field</p>\n<p>记录(行)—record</p>\n<h1 id=\"二-常用操作\"><a href=\"#二-常用操作\" class=\"headerlink\" title=\"二.常用操作\"></a>二.常用操作</h1><h2 id=\"1-创建表\"><a href=\"#1-创建表\" class=\"headerlink\" title=\"1.创建表\"></a>1.创建表</h2><ul>\n<li><p><code>语法:create table 表名(字段名 字段类型, 字段名 字段类型)</code></p>\n</li>\n<li><pre><code class=\"sql\">-- 创建表 d，字段要求如下： \n-- id ： 数 据 类 型 为 \n-- int unsigned( 无 符 号 整 数 ) ） ,primary key( 主键),auto_increment(自增长)； \n-- name 姓名：数据类型为 varchar(字符串)长度为 10,not null(非空)，\n-- age 年龄：数据类型为 int（整数）,default(默认值)30；\ncreate TABLE d (\nid int UNSIGNED PRIMARY key auto_increment,\nname varchar(10) not null,\nage int DEFAULT 30);\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 字段的约束</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1.主键 （primary key）</span><br><span class=\"line\"></span><br><span class=\"line\">- 主键的值不能重复</span><br><span class=\"line\"></span><br><span class=\"line\">- 自增长,auto_increment，值会系统自动维护,自动增长</span><br><span class=\"line\"></span><br><span class=\"line\">- ```sql</span><br><span class=\"line\">  -- 如果不指定字段,主键自增长字段的值可以用占位符,0或者null</span><br><span class=\"line\">  INSERT into d VALUES (0, &#x27;康熙&#x27;, 30);</span><br><span class=\"line\">  INSERT into d VALUES (NULL, &#x27;溥仪&#x27;, 50);</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<h4 id=\"2-非空（not-null）\"><a href=\"#2-非空（not-null）\" class=\"headerlink\" title=\"2.非空（not null）\"></a>2.非空（not null）</h4><ul>\n<li>这个字段必须有值,如果没有值,insert插入会失败</li>\n</ul>\n<h4 id=\"3-唯一-（unique）\"><a href=\"#3-唯一-（unique）\" class=\"headerlink\" title=\"3.唯一 （unique）\"></a>3.唯一 （unique）</h4><ul>\n<li>字段的约束为唯一,表示字段的值不能重复</li>\n</ul>\n<h4 id=\"4-默认值-（default）\"><a href=\"#4-默认值-（default）\" class=\"headerlink\" title=\"4.默认值 （default）\"></a>4.默认值 （default）</h4><ul>\n<li>当一个字段有默认值约束,插入数据时,如果指定了值,那么默认值无效,如果没有指定值,会使用默认值</li>\n</ul>\n<h2 id=\"2-插入数据\"><a href=\"#2-插入数据\" class=\"headerlink\" title=\"2.插入数据\"></a>2.插入数据</h2><ul>\n<li><p><code>语法 : insert into 表名 values (值, 值,值);</code></p>\n</li>\n<li><pre><code class=\"sql\">insert into c values (1, &#39;白起&#39;， 25);\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- `指定字段插入,语法:insert into 表名 (字段名, 字段名) values (值, 值);`</span><br><span class=\"line\"></span><br><span class=\"line\">- ```sql</span><br><span class=\"line\">  -- 例 2：表 c 插入一条记录，只设置 id 和姓名 name</span><br><span class=\"line\">  INSERT into c (id, name) values (3, &#x27;曹操&#x27;);</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<p>插入多条记录</p>\n<ul>\n<li>多条insert语句,用分号隔开</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 3：表 c 插入三条记录，写三条 insert 语句, 语句之间用分号隔开</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">into</span> c <span class=\"keyword\">values</span> (<span class=\"number\">5</span>, <span class=\"string\">&#x27;周瑜&#x27;</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> c (id, name) <span class=\"keyword\">values</span> (<span class=\"number\">6</span>, <span class=\"string\">&#x27;鲁肃&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">into</span> c (name) <span class=\"keyword\">values</span> (<span class=\"string\">&#x27;诸葛亮&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一条insert插入多条记录</li>\n<li>语法:insert into 表名 values (值,值),(值, 值),(值,值);</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 4：表 c 插入多条记录，用一条 insert 语句, 数据之间用逗号隔开</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> c <span class=\"keyword\">values</span> (<span class=\"number\">10</span>, <span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">(<span class=\"number\">11</span>, <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"number\">20</span>),</span><br><span class=\"line\">(<span class=\"number\">12</span>, <span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"number\">30</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一条insert指定字段插入多条记录</li>\n<li>语法:insert into 表名 (字段名, 字段名) values (值, 值), (值, 值), (值, 值)</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 4：表 c 插入多条记录，用一条 insert 语句, 数据之间用逗号隔开</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> c (id, name) <span class=\"keyword\">values</span> (<span class=\"number\">13</span>, <span class=\"string\">&#x27;光绪&#x27;</span>),</span><br><span class=\"line\">(<span class=\"number\">14</span>, <span class=\"string\">&#x27;康熙&#x27;</span>),</span><br><span class=\"line\">(<span class=\"number\">15</span>, <span class=\"string\">&#x27;雍正&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-select查询表\"><a href=\"#3-select查询表\" class=\"headerlink\" title=\"3.select查询表\"></a>3.select查询表</h2><ul>\n<li>select * 或者select 字段名  控制了查询返回什么样的字段(列)</li>\n<li>where 条件 控制了查询返回什么样的记录(行)</li>\n</ul>\n<h3 id=\"查询所有字段\"><a href=\"#查询所有字段\" class=\"headerlink\" title=\"查询所有字段\"></a>查询所有字段</h3><p><code>语法: select * from 表名;</code></p>\n<ul>\n<li>查询表的所有字段</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询表c的所有字段</span><br><span class=\"line\">select * from c;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指定字段名查询\"><a href=\"#指定字段名查询\" class=\"headerlink\" title=\"指定字段名查询\"></a>指定字段名查询</h3><p><code>语法:select 字段名, 字段名 from 表名;</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询表c的id字段</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> c;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字段的别名\"><a href=\"#字段的别名\" class=\"headerlink\" title=\"字段的别名\"></a>字段的别名</h3><ul>\n<li>通过 字段名 as 别名 的语法,可以给字段起一个别名,别名可以是中文</li>\n<li>as可以省略</li>\n<li>字段名 as 别名 和 字段名 别名 结果是一样的</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 通过as 给字段起一个别名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> card <span class=\"keyword\">as</span> 身份证, name <span class=\"keyword\">as</span> 姓名,sex <span class=\"keyword\">as</span> 性别 <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 别名的as可以省略</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> card 身份证, name 姓名,sex 性别 <span class=\"keyword\">from</span> students;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表的别名\"><a href=\"#表的别名\" class=\"headerlink\" title=\"表的别名\"></a>表的别名</h3><ul>\n<li>通过 表名 as 别名 给表起一个别名</li>\n<li>as可以省略</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 通过as 给表students起一个别名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">as</span> stu;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 可以省略as</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students stu;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-distinct过滤重复记录\"><a href=\"#3-distinct过滤重复记录\" class=\"headerlink\" title=\"3.distinct过滤重复记录\"></a>3.distinct过滤重复记录</h1><ul>\n<li>通过select distinct 字段名, 字段名 from 表名 来过滤select查询结果中的重复记录</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> sex, class <span class=\"keyword\">from</span> students;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-where子句\"><a href=\"#4-where子句\" class=\"headerlink\" title=\"4.where子句\"></a>4.where子句</h1><ul>\n<li>where 后面跟一个条件,实现有选择的查询</li>\n<li>select * from 表名 where 条件</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 1：查询 students 表中学号 studentNo 等于’001’ 的记录</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> studentNo <span class=\"operator\">=</span> <span class=\"string\">&#x27;001&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 2：查询 students 表中年龄 age 等于 30 的姓名 name,班级 class</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> name, class <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> age <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h1><ul>\n<li>&#x3D;等于</li>\n<li>&lt; 小于</li>\n<li>&lt;&#x3D; 小于等于</li>\n<li><code>&gt;</code>大于</li>\n<li><code>&gt;=</code>大于等于</li>\n<li>!&#x3D;和&lt;&gt;不等于</li>\n</ul>\n<h1 id=\"7-逻辑运算符\"><a href=\"#7-逻辑运算符\" class=\"headerlink\" title=\"7.逻辑运算符\"></a>7.逻辑运算符</h1><ul>\n<li>and与<ul>\n<li>条件1 and 条件2</li>\n<li>两个条件必须都满足</li>\n</ul>\n</li>\n<li>or或<ul>\n<li>条件1 or 条件2</li>\n<li>两个条件只要有一个满足即可</li>\n</ul>\n</li>\n<li>not非<ul>\n<li>not 条件</li>\n<li>条件成立,not以后就不成立,条件不成立,not以后就成立</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 1：查询 age 年龄小于 30，并且 sex 性别为’女’的同学记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> age <span class=\"operator\">&lt;</span> <span class=\"number\">30</span> <span class=\"keyword\">and</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 例 2：查询 sex 性别为’女’或者 class 班级为&#x27;1 班&#x27;的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span> <span class=\"keyword\">or</span> class <span class=\"operator\">=</span> <span class=\"string\">&#x27;1班&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 例 3：查询 hometown 老家非’天津’的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> <span class=\"keyword\">not</span> hometown <span class=\"operator\">=</span> <span class=\"string\">&#x27;天津&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 例 3：查询 hometown 老家’天津’的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> <span class=\"keyword\">not</span> hometown <span class=\"operator\">!=</span> <span class=\"string\">&#x27;天津&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"8-模糊查询\"><a href=\"#8-模糊查询\" class=\"headerlink\" title=\"8.模糊查询\"></a>8.模糊查询</h1><ul>\n<li>like实现模糊查询</li>\n<li>%代表任意多个字符</li>\n<li>_代表任意一个字符</li>\n<li>字段名 like ‘字符%’<ul>\n<li>指定字符开始,后面任意多个字符</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 1：查询 name 姓名中以’孙’开头的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;孙%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 例 2：查询 name 姓名以’孙’开头，且名只有一个字的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;孙_&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 3：查询 name 为任意姓，名叫’乔’的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%乔&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询 name 姓名有’白’子的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%白%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"9-范围查找\"><a href=\"#9-范围查找\" class=\"headerlink\" title=\"9.范围查找\"></a>9.范围查找</h1><ul>\n<li>in (值, 值, 值)<ul>\n<li>非连续范围查找</li>\n</ul>\n</li>\n<li>between 开始值 and 结束值<ul>\n<li>连续范围查找,包含开始值 包含 结束值</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 1：查询 hometown 家乡是’北京’或’上海’或’广东’的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> hometown <span class=\"operator\">=</span> <span class=\"string\">&#x27;北京&#x27;</span> <span class=\"keyword\">or</span> hometown <span class=\"operator\">=</span> <span class=\"string\">&#x27;上海&#x27;</span> <span class=\"keyword\">or</span> hometown <span class=\"operator\">=</span> <span class=\"string\">&#x27;广东&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> hometown <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广东&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 例 2：查询 age 年龄为 25 至 30 的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> age <span class=\"operator\">&gt;=</span> <span class=\"number\">25</span> <span class=\"keyword\">and</span> age <span class=\"operator\">&lt;=</span> <span class=\"number\">30</span>; </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> age <span class=\"keyword\">BETWEEN</span> <span class=\"number\">25</span> <span class=\"keyword\">and</span> <span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"10-空判断\"><a href=\"#10-空判断\" class=\"headerlink\" title=\"10.空判断\"></a>10.空判断</h1><ul>\n<li>null不是0,也不是’’,null在SQL里面代表空,什么也没有</li>\n<li>null不能用比较运算符的判断</li>\n<li>is null  —是否为null</li>\n<li>is not null —是否不为null<ul>\n<li><font color= red>不能用 字段名 &#x3D; null 字段名 !&#x3D; null这些都是错误的</font></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 1：查询 card 身份证为 null 的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> card <span class=\"keyword\">is</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 例 2：查询 card 身份证非 null 的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> card <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"12-order-by排序\"><a href=\"#12-order-by排序\" class=\"headerlink\" title=\"12.order by排序\"></a>12.order by排序</h1><ul>\n<li>order by 字段名 [asc&#x2F;desc]<ul>\n<li>asc代表从小到大,升序,asc可以省略</li>\n<li>desc代表从大到小,不可以省略</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 1：查询所有学生记录，按 age 年龄从小到大排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> age <span class=\"keyword\">asc</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> age;</span><br><span class=\"line\"><span class=\"comment\">-- 例 2：查询所有学生记录，按 age 年龄从大到小排序</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> age <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>两个字段排序的例子</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 2：查询所有学生记录，按 age 年龄从大到小排序，</span></span><br><span class=\"line\"><span class=\"comment\">--  年龄相同时，再按 studentNo 学号从小到大排序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> age <span class=\"keyword\">desc</span>, studentNo;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当一条select语句出现了where和order by<ul>\n<li>select * from 表名 where 条件 order by 字段1,字段2;</li>\n<li>一定要把where写在order by前面</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"13-聚合函数\"><a href=\"#13-聚合函数\" class=\"headerlink\" title=\"13.聚合函数\"></a>13.聚合函数</h1><h2 id=\"count求select返回的记录总数\"><a href=\"#count求select返回的记录总数\" class=\"headerlink\" title=\"count求select返回的记录总数\"></a>count求select返回的记录总数</h2><ul>\n<li>count(字段名)</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询学生总数(查询stuents表有多少记录)</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(name) <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">DISTINCT</span> class) <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">DISTINCT</span> sex) <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"><span class=\"comment\">-- 查询女同学数量</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(name) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(sex) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"max查询最大值\"><a href=\"#max查询最大值\" class=\"headerlink\" title=\"max查询最大值\"></a>max查询最大值</h2><ul>\n<li>max(字段名)</li>\n<li>查询指定字段里的最大值</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询students中的最大年龄</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">max</span>(age) <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询students中的女生最大年龄</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">max</span>(age) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询students中的&#x27;1班&#x27;最大年龄</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">max</span>(age) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> class <span class=\"operator\">=</span> <span class=\"string\">&#x27;1班&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>聚合函数不能用到where后面的条件里</p>\n<h2 id=\"min查询最小值\"><a href=\"#min查询最小值\" class=\"headerlink\" title=\"min查询最小值\"></a>min查询最小值</h2><ul>\n<li>min(字段名)</li>\n<li>查询指定字段的最小值</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询students中的最小年龄</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">min</span>(age) <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询students中的女生最小年龄</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">min</span>(age) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询students中的&#x27;1班&#x27;最小年龄</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">min</span>(age) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> class <span class=\"operator\">=</span> <span class=\"string\">&#x27;1班&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sum求和\"><a href=\"#sum求和\" class=\"headerlink\" title=\"sum求和\"></a>sum求和</h2><ul>\n<li>sum(字段名)</li>\n<li>指定字段的值求和</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询students中的年龄总和</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">sum</span>(age) <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询students中的女生年龄总和</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">sum</span>(age) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询students中的&#x27;1班&#x27;年龄总和</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">sum</span>(age) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> class <span class=\"operator\">=</span> <span class=\"string\">&#x27;1班&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"avg求平均数\"><a href=\"#avg求平均数\" class=\"headerlink\" title=\"avg求平均数\"></a>avg求平均数</h2><ul>\n<li>avg(字段名)</li>\n<li>指定字段的平均值</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询students中的年龄总和</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">sum</span>(age) <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询students中的女生年龄总和</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">sum</span>(age) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询students中的&#x27;1班&#x27;年龄总和</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">sum</span>(age) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> class <span class=\"operator\">=</span> <span class=\"string\">&#x27;1班&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>avg的字段中如果有null,null不做为分母计算平均</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> aa (age <span class=\"type\">int</span>, name <span class=\"type\">varchar</span>(<span class=\"number\">10</span>));</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> aa <span class=\"keyword\">values</span> (<span class=\"number\">10</span>, <span class=\"string\">&#x27;a&#x27;</span>), (<span class=\"number\">20</span>, <span class=\"string\">&#x27;b&#x27;</span>), (<span class=\"keyword\">null</span>, <span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">avg</span>(age) <span class=\"keyword\">from</span> aa;<span class=\"comment\">-- 结果为15,而不是10</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"14-数据分组\"><a href=\"#14-数据分组\" class=\"headerlink\" title=\"14.数据分组\"></a>14.数据分组</h1><ul>\n<li>group by 字段名</li>\n<li>select 聚合函数 from 表名 where 条件 group by 字段</li>\n<li>select 聚合函数 from 表名  group by 字段</li>\n<li>group by就是配合聚合函数使用的</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 分别查询男女同学的数量</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;男&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> sex, <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sex;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>group by的例子</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 分别查询各个年龄段的同学数量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> age, <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> age;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>where与group by</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 分别查询&#x27;1班&#x27;不同性别学生数量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> sex, <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> class <span class=\"operator\">=</span> <span class=\"string\">&#x27;1班&#x27;</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sex;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>where和group by 和order by的顺序<ul>\n<li>select * from 表名 where 条件 group by 字段 order by 字段</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"15-分组聚合之后的数据筛选\"><a href=\"#15-分组聚合之后的数据筛选\" class=\"headerlink\" title=\"15.分组聚合之后的数据筛选\"></a>15.分组聚合之后的数据筛选</h1><ul>\n<li>having子句</li>\n<li>总是出现在group by之后</li>\n<li>select * from 表名 group by 字段 having 条件</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 用where查询男生总数</span></span><br><span class=\"line\"><span class=\"comment\">-- where先筛选复合条件的记录,然后在聚合统计</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;男&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 用having查询男生总数</span></span><br><span class=\"line\"><span class=\"comment\">-- having先分组聚合统计,在统计的结果中筛选</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> students <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> sex <span class=\"keyword\">HAVING</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"having配合聚合函数的使用\"><a href=\"#having配合聚合函数的使用\" class=\"headerlink\" title=\"having配合聚合函数的使用\"></a>having配合聚合函数的使用</h1><ul>\n<li>where后面条件不能使用聚合函数, having可以使用聚合函数</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 求班级人数大于3人的班级名字</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> class <span class=\"keyword\">from</span> students <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> class <span class=\"keyword\">HAVING</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"operator\">&gt;</span> <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"16-having与where筛选的区别\"><a href=\"#16-having与where筛选的区别\" class=\"headerlink\" title=\"16.having与where筛选的区别\"></a>16.having与where筛选的区别</h1><ul>\n<li>where是对标的原始数据进行筛选</li>\n<li>having是对group by之后已经分过组的数据进行筛选</li>\n<li>having可以使用聚合函数, where不能用聚合函数</li>\n</ul>\n<h1 id=\"17-limit显示指定的记录数\"><a href=\"#17-limit显示指定的记录数\" class=\"headerlink\" title=\"17.limit显示指定的记录数\"></a>17.limit显示指定的记录数</h1><ul>\n<li>select * from 表名 where 条件 group by 字段 order by 字段 limit start, count</li>\n<li>limit总是出现在select语句的最后,</li>\n<li>start代表开始行号,行号从0开始编号</li>\n<li>count代表要显示多少行</li>\n<li>省略start,默认从0开始,从第一行开始</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询前三行记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students limit <span class=\"number\">0</span>, <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students limit <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询从第4条记录开始的三条记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students limit <span class=\"number\">3</span>, <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当有where或者group by或者order by, limit总是出现在最后</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询年龄最大同学的name</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> name <span class=\"keyword\">from</span> students <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> age <span class=\"keyword\">desc</span> limit <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询年龄最小的女同学信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> sex <span class=\"operator\">=</span> <span class=\"string\">&#x27;女&#x27;</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> age LIMIT <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"18-数据分页显示\"><a href=\"#18-数据分页显示\" class=\"headerlink\" title=\"18.数据分页显示\"></a>18.数据分页显示</h1><ul>\n<li>m 每页显示多少条记录</li>\n<li>n,第n页</li>\n<li>(n - 1) * m, m</li>\n<li>把计算结果写到limit后面</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 每页显示4条记录,第3页的结果</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students limit <span class=\"number\">8</span>, <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 每页显示4条记录,第2页的结果</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students limit <span class=\"number\">4</span>, <span class=\"number\">4</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>已知每页记录数,求一张表需要几页显示完<ul>\n<li>求总页数</li>\n<li>总页数 &#x2F; 每页的记录数</li>\n<li>如果结果是整数,那么就是总页数,如果结果有小数,那么就在结果的整数上+1</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-update修改数据\"><a href=\"#4-update修改数据\" class=\"headerlink\" title=\"4.update修改数据\"></a>4.update修改数据</h2><ul>\n<li><code>语法:update 表名 set 字段=值, 字段=值 where 条件</code><ul>\n<li>如果没有where 条件代表修改表中所有的记录</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 1：修改表 c，所有人的年龄(age 字段)改为 50</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> c <span class=\"keyword\">set</span> age <span class=\"operator\">=</span> <span class=\"number\">50</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>带有条件的update语句</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例 2：修改表 c，id 为 3 的记录，姓名(name 字段)改为 ‘狄仁杰‘，年龄(age 字段)改为 20</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> c <span class=\"keyword\">set</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;狄仁杰&#x27;</span>, age <span class=\"operator\">=</span> <span class=\"number\">20</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-delete删除记录\"><a href=\"#5-delete删除记录\" class=\"headerlink\" title=\"5.delete删除记录\"></a>5.delete删除记录</h2><ul>\n<li><p><code>语法:&#39;delete from 表名 where 条件&#39;</code></p>\n</li>\n<li><pre><code class=\"sql\">-- 例 1：删除表 c 中 id 为 6 的记录\nDELETE from c where id = 6;\n-- 删除所有记录\nDELETE from c;\n-- 例 2：删除 class 为’1 班’,并且 age 大于 30 的学生记录\nDELETE from students where class = &#39;1班&#39; and age &gt; 30;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 6.truncate table删除表的数据</span><br><span class=\"line\"></span><br><span class=\"line\">- truncate table 表名</span><br><span class=\"line\"></span><br><span class=\"line\">- ```sql</span><br><span class=\"line\">  -- 删除表c中所有的记录</span><br><span class=\"line\">  truncate table c;</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<h3 id=\"delete与truncate对比\"><a href=\"#delete与truncate对比\" class=\"headerlink\" title=\"delete与truncate对比\"></a>delete与truncate对比</h3><ul>\n<li>速度上，truncate&gt;delete</li>\n<li>删除部分数据用delete+where</li>\n<li>保留表但将所有数据删除，自增长字段恢复从1开始，用truncate</li>\n</ul>\n<h2 id=\"7-删除表\"><a href=\"#7-删除表\" class=\"headerlink\" title=\"7.删除表\"></a>7.删除表</h2><ul>\n<li>语法一: drop table 表名</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除表a</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> a;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>语法二: drop table if exists 表名</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 如果表a存在,就删除表a,如果不存在,什么也不做</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">EXISTS</span> a;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>"},{"title":"高数知识点","date":"2024-11-21T06:44:03.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":null,"_content":"\n\n\n\n\n\n\n# 多元函数极值与最值\n\n## 无条件极值\n\n### 小题-考定义\n\n保号性能用，直接出结果\n\n保号性不能用，反解定理求出f（x，y），取y=x，y=-x等\n\n### 大题\n\n求驻点，算ABC，失效时用定义\n\n## 有条件极值\n\n### 单条件最值\n\n**回代**\n\n**拉格朗日乘数法**\n\n### 双条件最值\n\n拉格朗日乘数法\n\n## 连续函数的闭区域最值问题\n\n区域内\n\n边界上\n\n作比较\n","source":"_posts/高数知识点.md","raw":"---\ntitle: 高数知识点\ndate: 2024-11-21 14:44:03\ntags:\ncategories:\ncover:\ndescription:\n---\n\n\n\n\n\n\n\n# 多元函数极值与最值\n\n## 无条件极值\n\n### 小题-考定义\n\n保号性能用，直接出结果\n\n保号性不能用，反解定理求出f（x，y），取y=x，y=-x等\n\n### 大题\n\n求驻点，算ABC，失效时用定义\n\n## 有条件极值\n\n### 单条件最值\n\n**回代**\n\n**拉格朗日乘数法**\n\n### 双条件最值\n\n拉格朗日乘数法\n\n## 连续函数的闭区域最值问题\n\n区域内\n\n边界上\n\n作比较\n","slug":"高数知识点","published":1,"updated":"2024-11-22T05:41:13.626Z","comments":1,"layout":"post","photos":[],"_id":"cmcpwe25w001d9wnjd7jrhk8v","content":"<h1 id=\"多元函数极值与最值\"><a href=\"#多元函数极值与最值\" class=\"headerlink\" title=\"多元函数极值与最值\"></a>多元函数极值与最值</h1><h2 id=\"无条件极值\"><a href=\"#无条件极值\" class=\"headerlink\" title=\"无条件极值\"></a>无条件极值</h2><h3 id=\"小题-考定义\"><a href=\"#小题-考定义\" class=\"headerlink\" title=\"小题-考定义\"></a>小题-考定义</h3><p>保号性能用，直接出结果</p>\n<p>保号性不能用，反解定理求出f（x，y），取y&#x3D;x，y&#x3D;-x等</p>\n<h3 id=\"大题\"><a href=\"#大题\" class=\"headerlink\" title=\"大题\"></a>大题</h3><p>求驻点，算ABC，失效时用定义</p>\n<h2 id=\"有条件极值\"><a href=\"#有条件极值\" class=\"headerlink\" title=\"有条件极值\"></a>有条件极值</h2><h3 id=\"单条件最值\"><a href=\"#单条件最值\" class=\"headerlink\" title=\"单条件最值\"></a>单条件最值</h3><p><strong>回代</strong></p>\n<p><strong>拉格朗日乘数法</strong></p>\n<h3 id=\"双条件最值\"><a href=\"#双条件最值\" class=\"headerlink\" title=\"双条件最值\"></a>双条件最值</h3><p>拉格朗日乘数法</p>\n<h2 id=\"连续函数的闭区域最值问题\"><a href=\"#连续函数的闭区域最值问题\" class=\"headerlink\" title=\"连续函数的闭区域最值问题\"></a>连续函数的闭区域最值问题</h2><p>区域内</p>\n<p>边界上</p>\n<p>作比较</p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"多元函数极值与最值\"><a href=\"#多元函数极值与最值\" class=\"headerlink\" title=\"多元函数极值与最值\"></a>多元函数极值与最值</h1><h2 id=\"无条件极值\"><a href=\"#无条件极值\" class=\"headerlink\" title=\"无条件极值\"></a>无条件极值</h2><h3 id=\"小题-考定义\"><a href=\"#小题-考定义\" class=\"headerlink\" title=\"小题-考定义\"></a>小题-考定义</h3><p>保号性能用，直接出结果</p>\n<p>保号性不能用，反解定理求出f（x，y），取y&#x3D;x，y&#x3D;-x等</p>\n<h3 id=\"大题\"><a href=\"#大题\" class=\"headerlink\" title=\"大题\"></a>大题</h3><p>求驻点，算ABC，失效时用定义</p>\n<h2 id=\"有条件极值\"><a href=\"#有条件极值\" class=\"headerlink\" title=\"有条件极值\"></a>有条件极值</h2><h3 id=\"单条件最值\"><a href=\"#单条件最值\" class=\"headerlink\" title=\"单条件最值\"></a>单条件最值</h3><p><strong>回代</strong></p>\n<p><strong>拉格朗日乘数法</strong></p>\n<h3 id=\"双条件最值\"><a href=\"#双条件最值\" class=\"headerlink\" title=\"双条件最值\"></a>双条件最值</h3><p>拉格朗日乘数法</p>\n<h2 id=\"连续函数的闭区域最值问题\"><a href=\"#连续函数的闭区域最值问题\" class=\"headerlink\" title=\"连续函数的闭区域最值问题\"></a>连续函数的闭区域最值问题</h2><p>区域内</p>\n<p>边界上</p>\n<p>作比较</p>\n"},{"title":"高数第三章不定积分","date":"2024-03-08T02:37:13.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-08/TXK-72U4-MY-AGJQQY-F-HY-b012f9.jpg","description":"第三章相关知识点笔记","_content":"\n# 一、不定积分\n\n## 1.不定积分的定义\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%AE%9A%E4%B9%89-53ad3b.png)\n\n## 2.不定积分的性质\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E6%80%A7%E8%B4%A8-df998c.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E5%8E%9F%E5%87%BD%E6%95%B0%E5%AD%98%E5%9C%A8%E5%AE%9A%E7%90%86-e97e64.png)\n\n## 3.不定积分的计算\n\n### (1)积分表\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308114839856-97bdc3.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308114935911-25f73b.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308115004116-efee5b.png)\n\n### (2)计算方法\n\n#### 第一类换元法\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308120216242-670970.png)\n\n##### 题型1\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308121605560-d1f714.png)\n\n**穷途末路来一刀！**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308120235023-815f95.png)\n\n##### 题型2\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105202782-c6ee91.png)\n\n##### 题型3\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105316318-8bd2e7.png)\n\n##### 题型4\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105337089-ebbe51.png)\n\n##### 题型5\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105351830-665796.png)\n\n#### 第二类换元法\n\n##### 1.三角代换\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310112737988-8183c4.png)\n\n##### 2.无理根式换元\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310114025396-bb76f7.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310114419378-60004e.png)\n\n##### 3.分部积分法\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310122753249-9053da.png)\n\n###### **重要经验公式**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310125139793-24faef.png)\n\n**secx**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093233117-413f9e.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093314171-aedfd4.png)\n\n**tanx**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093358000-52362b.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093443259-ce8f73.png)\n\n#### 有理分式\n\n(1)真分式\n\n(2)假分式=>真分式\n\n#### 有理分式拆分方法\n\n括号外决定项数，括号内决定次方\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311103354463-ef90f9.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311105000694-5c512d.png)\n\n`每项都应不能再被因式分解`\n","source":"_posts/高数第三章积分.md","raw":"---\ntitle: 高数第三章不定积分\ndate: 2024-03-08 10:37:13\ntags: 高数\ncategories: 高数\ncover: https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-08/TXK-72U4-MY-AGJQQY-F-HY-b012f9.jpg\ndescription: 第三章相关知识点笔记\n---\n\n# 一、不定积分\n\n## 1.不定积分的定义\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%AE%9A%E4%B9%89-53ad3b.png)\n\n## 2.不定积分的性质\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E6%80%A7%E8%B4%A8-df998c.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E5%8E%9F%E5%87%BD%E6%95%B0%E5%AD%98%E5%9C%A8%E5%AE%9A%E7%90%86-e97e64.png)\n\n## 3.不定积分的计算\n\n### (1)积分表\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308114839856-97bdc3.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308114935911-25f73b.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308115004116-efee5b.png)\n\n### (2)计算方法\n\n#### 第一类换元法\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308120216242-670970.png)\n\n##### 题型1\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308121605560-d1f714.png)\n\n**穷途末路来一刀！**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308120235023-815f95.png)\n\n##### 题型2\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105202782-c6ee91.png)\n\n##### 题型3\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105316318-8bd2e7.png)\n\n##### 题型4\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105337089-ebbe51.png)\n\n##### 题型5\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105351830-665796.png)\n\n#### 第二类换元法\n\n##### 1.三角代换\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310112737988-8183c4.png)\n\n##### 2.无理根式换元\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310114025396-bb76f7.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310114419378-60004e.png)\n\n##### 3.分部积分法\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310122753249-9053da.png)\n\n###### **重要经验公式**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310125139793-24faef.png)\n\n**secx**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093233117-413f9e.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093314171-aedfd4.png)\n\n**tanx**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093358000-52362b.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093443259-ce8f73.png)\n\n#### 有理分式\n\n(1)真分式\n\n(2)假分式=>真分式\n\n#### 有理分式拆分方法\n\n括号外决定项数，括号内决定次方\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311103354463-ef90f9.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311105000694-5c512d.png)\n\n`每项都应不能再被因式分解`\n","slug":"高数第三章积分","published":1,"updated":"2024-03-21T04:52:14.172Z","comments":1,"layout":"post","photos":[],"_id":"cmcpwe25w001f9wnjcfbs064j","content":"<h1 id=\"一、不定积分\"><a href=\"#一、不定积分\" class=\"headerlink\" title=\"一、不定积分\"></a>一、不定积分</h1><h2 id=\"1-不定积分的定义\"><a href=\"#1-不定积分的定义\" class=\"headerlink\" title=\"1.不定积分的定义\"></a>1.不定积分的定义</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%AE%9A%E4%B9%89-53ad3b.png\"></p>\n<h2 id=\"2-不定积分的性质\"><a href=\"#2-不定积分的性质\" class=\"headerlink\" title=\"2.不定积分的性质\"></a>2.不定积分的性质</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E6%80%A7%E8%B4%A8-df998c.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E5%8E%9F%E5%87%BD%E6%95%B0%E5%AD%98%E5%9C%A8%E5%AE%9A%E7%90%86-e97e64.png\"></p>\n<h2 id=\"3-不定积分的计算\"><a href=\"#3-不定积分的计算\" class=\"headerlink\" title=\"3.不定积分的计算\"></a>3.不定积分的计算</h2><h3 id=\"1-积分表\"><a href=\"#1-积分表\" class=\"headerlink\" title=\"(1)积分表\"></a>(1)积分表</h3><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308114839856-97bdc3.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308114935911-25f73b.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308115004116-efee5b.png\"></p>\n<h3 id=\"2-计算方法\"><a href=\"#2-计算方法\" class=\"headerlink\" title=\"(2)计算方法\"></a>(2)计算方法</h3><h4 id=\"第一类换元法\"><a href=\"#第一类换元法\" class=\"headerlink\" title=\"第一类换元法\"></a>第一类换元法</h4><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308120216242-670970.png\"></p>\n<h5 id=\"题型1\"><a href=\"#题型1\" class=\"headerlink\" title=\"题型1\"></a>题型1</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308121605560-d1f714.png\"></p>\n<p><strong>穷途末路来一刀！</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308120235023-815f95.png\"></p>\n<h5 id=\"题型2\"><a href=\"#题型2\" class=\"headerlink\" title=\"题型2\"></a>题型2</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105202782-c6ee91.png\"></p>\n<h5 id=\"题型3\"><a href=\"#题型3\" class=\"headerlink\" title=\"题型3\"></a>题型3</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105316318-8bd2e7.png\"></p>\n<h5 id=\"题型4\"><a href=\"#题型4\" class=\"headerlink\" title=\"题型4\"></a>题型4</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105337089-ebbe51.png\"></p>\n<h5 id=\"题型5\"><a href=\"#题型5\" class=\"headerlink\" title=\"题型5\"></a>题型5</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105351830-665796.png\"></p>\n<h4 id=\"第二类换元法\"><a href=\"#第二类换元法\" class=\"headerlink\" title=\"第二类换元法\"></a>第二类换元法</h4><h5 id=\"1-三角代换\"><a href=\"#1-三角代换\" class=\"headerlink\" title=\"1.三角代换\"></a>1.三角代换</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310112737988-8183c4.png\"></p>\n<h5 id=\"2-无理根式换元\"><a href=\"#2-无理根式换元\" class=\"headerlink\" title=\"2.无理根式换元\"></a>2.无理根式换元</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310114025396-bb76f7.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310114419378-60004e.png\"></p>\n<h5 id=\"3-分部积分法\"><a href=\"#3-分部积分法\" class=\"headerlink\" title=\"3.分部积分法\"></a>3.分部积分法</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310122753249-9053da.png\"></p>\n<h6 id=\"重要经验公式\"><a href=\"#重要经验公式\" class=\"headerlink\" title=\"重要经验公式\"></a><strong>重要经验公式</strong></h6><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310125139793-24faef.png\"></p>\n<p><strong>secx</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093233117-413f9e.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093314171-aedfd4.png\"></p>\n<p><strong>tanx</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093358000-52362b.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093443259-ce8f73.png\"></p>\n<h4 id=\"有理分式\"><a href=\"#有理分式\" class=\"headerlink\" title=\"有理分式\"></a>有理分式</h4><p>(1)真分式</p>\n<p>(2)假分式&#x3D;&gt;真分式</p>\n<h4 id=\"有理分式拆分方法\"><a href=\"#有理分式拆分方法\" class=\"headerlink\" title=\"有理分式拆分方法\"></a>有理分式拆分方法</h4><p>括号外决定项数，括号内决定次方</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311103354463-ef90f9.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311105000694-5c512d.png\"></p>\n<p><code>每项都应不能再被因式分解</code></p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"一、不定积分\"><a href=\"#一、不定积分\" class=\"headerlink\" title=\"一、不定积分\"></a>一、不定积分</h1><h2 id=\"1-不定积分的定义\"><a href=\"#1-不定积分的定义\" class=\"headerlink\" title=\"1.不定积分的定义\"></a>1.不定积分的定义</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%AE%9A%E4%B9%89-53ad3b.png\"></p>\n<h2 id=\"2-不定积分的性质\"><a href=\"#2-不定积分的性质\" class=\"headerlink\" title=\"2.不定积分的性质\"></a>2.不定积分的性质</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E6%80%A7%E8%B4%A8-df998c.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E5%8E%9F%E5%87%BD%E6%95%B0%E5%AD%98%E5%9C%A8%E5%AE%9A%E7%90%86-e97e64.png\"></p>\n<h2 id=\"3-不定积分的计算\"><a href=\"#3-不定积分的计算\" class=\"headerlink\" title=\"3.不定积分的计算\"></a>3.不定积分的计算</h2><h3 id=\"1-积分表\"><a href=\"#1-积分表\" class=\"headerlink\" title=\"(1)积分表\"></a>(1)积分表</h3><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308114839856-97bdc3.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308114935911-25f73b.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308115004116-efee5b.png\"></p>\n<h3 id=\"2-计算方法\"><a href=\"#2-计算方法\" class=\"headerlink\" title=\"(2)计算方法\"></a>(2)计算方法</h3><h4 id=\"第一类换元法\"><a href=\"#第一类换元法\" class=\"headerlink\" title=\"第一类换元法\"></a>第一类换元法</h4><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308120216242-670970.png\"></p>\n<h5 id=\"题型1\"><a href=\"#题型1\" class=\"headerlink\" title=\"题型1\"></a>题型1</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308121605560-d1f714.png\"></p>\n<p><strong>穷途末路来一刀！</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308120235023-815f95.png\"></p>\n<h5 id=\"题型2\"><a href=\"#题型2\" class=\"headerlink\" title=\"题型2\"></a>题型2</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105202782-c6ee91.png\"></p>\n<h5 id=\"题型3\"><a href=\"#题型3\" class=\"headerlink\" title=\"题型3\"></a>题型3</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105316318-8bd2e7.png\"></p>\n<h5 id=\"题型4\"><a href=\"#题型4\" class=\"headerlink\" title=\"题型4\"></a>题型4</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105337089-ebbe51.png\"></p>\n<h5 id=\"题型5\"><a href=\"#题型5\" class=\"headerlink\" title=\"题型5\"></a>题型5</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105351830-665796.png\"></p>\n<h4 id=\"第二类换元法\"><a href=\"#第二类换元法\" class=\"headerlink\" title=\"第二类换元法\"></a>第二类换元法</h4><h5 id=\"1-三角代换\"><a href=\"#1-三角代换\" class=\"headerlink\" title=\"1.三角代换\"></a>1.三角代换</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310112737988-8183c4.png\"></p>\n<h5 id=\"2-无理根式换元\"><a href=\"#2-无理根式换元\" class=\"headerlink\" title=\"2.无理根式换元\"></a>2.无理根式换元</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310114025396-bb76f7.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310114419378-60004e.png\"></p>\n<h5 id=\"3-分部积分法\"><a href=\"#3-分部积分法\" class=\"headerlink\" title=\"3.分部积分法\"></a>3.分部积分法</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310122753249-9053da.png\"></p>\n<h6 id=\"重要经验公式\"><a href=\"#重要经验公式\" class=\"headerlink\" title=\"重要经验公式\"></a><strong>重要经验公式</strong></h6><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310125139793-24faef.png\"></p>\n<p><strong>secx</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093233117-413f9e.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093314171-aedfd4.png\"></p>\n<p><strong>tanx</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093358000-52362b.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093443259-ce8f73.png\"></p>\n<h4 id=\"有理分式\"><a href=\"#有理分式\" class=\"headerlink\" title=\"有理分式\"></a>有理分式</h4><p>(1)真分式</p>\n<p>(2)假分式&#x3D;&gt;真分式</p>\n<h4 id=\"有理分式拆分方法\"><a href=\"#有理分式拆分方法\" class=\"headerlink\" title=\"有理分式拆分方法\"></a>有理分式拆分方法</h4><p>括号外决定项数，括号内决定次方</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311103354463-ef90f9.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311105000694-5c512d.png\"></p>\n<p><code>每项都应不能再被因式分解</code></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmcpwe24r00099wnjeayj2jqv","category_id":"cmcpwe24o00049wnj0k01hlaj","_id":"cmcpwe25k000h9wnjdniwfld0"},{"post_id":"cmcpwe24j00019wnj4qn0fyh4","category_id":"cmcpwe24o00049wnj0k01hlaj","_id":"cmcpwe25l000l9wnj4umteu1t"},{"post_id":"cmcpwe25j000f9wnjb06zgbcf","category_id":"cmcpwe24o00049wnj0k01hlaj","_id":"cmcpwe25m000o9wnj99sheuce"},{"post_id":"cmcpwe24m00039wnjcfuqhsv1","category_id":"cmcpwe24o00049wnj0k01hlaj","_id":"cmcpwe25n000s9wnj9x5u3yr4"},{"post_id":"cmcpwe24q00079wnj8s1uhjrj","category_id":"cmcpwe24o00049wnj0k01hlaj","_id":"cmcpwe25o000v9wnj8es5cvhy"},{"post_id":"cmcpwe24s000b9wnjh7ua4bnx","category_id":"cmcpwe25m000p9wnj5uheekcr","_id":"cmcpwe25q00119wnj0of32opw"},{"post_id":"cmcpwe25l000k9wnj9hdg42bv","category_id":"cmcpwe25m000p9wnj5uheekcr","_id":"cmcpwe25t00149wnjdrxb8xie"},{"post_id":"cmcpwe25l000n9wnj4b4ig5ue","category_id":"cmcpwe25q00109wnj9h1oa076","_id":"cmcpwe25t00179wnj7qix6lb8"},{"post_id":"cmcpwe25v001c9wnj6mwpg5z6","category_id":"cmcpwe25w001e9wnj0wr313nb","_id":"cmcpwe25x001i9wnja5i86452"},{"post_id":"cmcpwe25w001f9wnjcfbs064j","category_id":"cmcpwe25x001h9wnj26ebco5s","_id":"cmcpwe25x001k9wnj9v461ero"}],"PostTag":[{"post_id":"cmcpwe24j00019wnj4qn0fyh4","tag_id":"cmcpwe24p00059wnjc5t86bwf","_id":"cmcpwe25i000e9wnj1x4pbr95"},{"post_id":"cmcpwe24m00039wnjcfuqhsv1","tag_id":"cmcpwe24t000d9wnj7jfb1n0p","_id":"cmcpwe25l000m9wnjew2a87q3"},{"post_id":"cmcpwe24q00079wnj8s1uhjrj","tag_id":"cmcpwe25k000j9wnjceubgoit","_id":"cmcpwe25n000t9wnj4cvyagqt"},{"post_id":"cmcpwe24r00099wnjeayj2jqv","tag_id":"cmcpwe25k000j9wnjceubgoit","_id":"cmcpwe25p000z9wnjc52nha1h"},{"post_id":"cmcpwe24s000b9wnjh7ua4bnx","tag_id":"cmcpwe25o000x9wnjdtl3buu8","_id":"cmcpwe25q00139wnj3tifcjo7"},{"post_id":"cmcpwe25j000f9wnjb06zgbcf","tag_id":"cmcpwe25q00129wnjhjnugli8","_id":"cmcpwe25t00169wnj1ynx17cr"},{"post_id":"cmcpwe25l000n9wnj4b4ig5ue","tag_id":"cmcpwe25t00159wnjd4fcegwg","_id":"cmcpwe25u00199wnjep977th5"},{"post_id":"cmcpwe25m000r9wnj9tjc8029","tag_id":"cmcpwe25t00189wnjadqb19ly","_id":"cmcpwe25u001a9wnj3jg000ni"},{"post_id":"cmcpwe25w001f9wnjcfbs064j","tag_id":"cmcpwe25x001g9wnj8ecy8hef","_id":"cmcpwe25x001j9wnj1ttt3bza"}],"Tag":[{"name":"计算机网络","_id":"cmcpwe24p00059wnjc5t86bwf"},{"name":"计组","_id":"cmcpwe24t000d9wnj7jfb1n0p"},{"name":"数据结构","_id":"cmcpwe25k000j9wnjceubgoit"},{"name":"JavaScript","_id":"cmcpwe25o000x9wnjdtl3buu8"},{"name":"操作系统","_id":"cmcpwe25q00129wnjhjnugli8"},{"name":"接口自动化","_id":"cmcpwe25t00159wnjd4fcegwg"},{"name":"Python","_id":"cmcpwe25t00189wnjadqb19ly"},{"name":"高数","_id":"cmcpwe25x001g9wnj8ecy8hef"}]}}