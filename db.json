{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/sakura.js","path":"js/sakura.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"5c4a1223edb6fb8b74dddbde5eb74bf927b490cb","modified":1706346965000},{"_id":"source/_posts/python学习.md","hash":"522fdd0c46801b6c2456404ffe60596a536b6b6e","modified":1684979286188},{"_id":"source/_data/link.yml","hash":"400b80c3c81f347a328be9031536b72ba15cc2f1","modified":1706950100202},{"_id":"source/_posts/os第一章计算机系统概述.md","hash":"71e29fbbbf49aebbe103b2ade0dccd62cd994146","modified":1710384367996},{"_id":"source/_posts/单链表.md","hash":"ae41a1755dbc29d30a5907ceaccf94431735112c","modified":1709868455396},{"_id":"source/_posts/百句实战.md","hash":"5ee92187ea93091340c8a0be388e40c078bc885e","modified":1709868433407},{"_id":"source/_posts/数据结构知识点.md","hash":"5461ce7ad7af643fc849f28f4daf91051d511a3d","modified":1710316447447},{"_id":"source/_posts/第一章计算机系统概述.md","hash":"72ea4de5af27b6c4217a1a66a82fca70feea0fde","modified":1710310780383},{"_id":"source/_posts/第三章-栈.md","hash":"70b42bf1a727be63549eda86e8a4ae9865636616","modified":1707017435739},{"_id":"source/_posts/第五章-树与二叉树.md","hash":"4317b7a5c1a5b975f28209fdf5c54b1b42520aeb","modified":1709868477383},{"_id":"source/_posts/第二章导数.md","hash":"539897da29de947ba3f1f3022c1e8bcc96e39da4","modified":1710072244361},{"_id":"source/_posts/第四章-串.md","hash":"6a2ac9cc664c56b5ca105eece47610c3fef377a0","modified":1709868469833},{"_id":"source/_posts/计组第二章数据的表示和运算.md","hash":"6410ff6ae46843720b0ecffb3e4345e4d9dd3a1b","modified":1710382338427},{"_id":"source/_posts/第四章指令系统.md","hash":"6dbe1ff738b9da753ffdec64d7b68c5ef733c636","modified":1710137731036},{"_id":"source/_posts/计组第三章存储系统.md","hash":"c1d13bc5ab360eeb82c5e4841a65ee6841f2588d","modified":1710137749460},{"_id":"source/_posts/队列.md","hash":"b069f6f97a4507e981a285ea428056bc13abf984","modified":1709868492684},{"_id":"source/_posts/高数第三章积分.md","hash":"f5a33fb271bd5013d71689bf31d790bfeefc8df6","modified":1710163055360},{"_id":"source/_posts/词汇.md","hash":"4bb4d76c94b879a7d00d25ef14fd53ee4599f032","modified":1709868438380},{"_id":"source/_posts/顺序表.md","hash":"10f35e72b3d7af092416eb7747143bc65a87dc82","modified":1709868511464},{"_id":"source/_posts/高数第一章极限.md","hash":"fd18ac156334fa3d992b348c14778a5509e93573","modified":1710162900070},{"_id":"source/serein/index.md","hash":"2c5bcc50a36e06b84b71f70afc17cbd88cddd6ff","modified":1706951211763},{"_id":"source/tags/index.md","hash":"e809bfad120670f3cbefc3993bf32fb96446ae56","modified":1706949787487},{"_id":"source/categories/index.md","hash":"edf4c8209e68591da341f8edf4d793efce1e72a7","modified":1706949822258},{"_id":"source/messageboard/index.md","hash":"895475f1ef5545d87c4fe96429ddf7bc78db7c93","modified":1706950716242},{"_id":"source/_posts/第二章导数/image-20240308194328198.png","hash":"0eef9b56975a6e53e2095ec65f451eaadf7aa00e","modified":1709898208212},{"_id":"source/_posts/第二章导数/image-20240308195026958.png","hash":"67b780b5200cd926961e816a35715006be108ac6","modified":1709898626980},{"_id":"source/_posts/第二章导数/image-20240308194541132.png","hash":"d6e9dbd78f189eaa37ed4f5ceb256b97f678a013","modified":1709898341155},{"_id":"source/_posts/第二章导数/image-20240308194454815.png","hash":"b19a206924a6052d8ebac729d2a42ffe9c546385","modified":1709898294845},{"_id":"source/_posts/第二章导数/image-20240308200158574.png","hash":"89e9877d90ff6d0609bddf9a89e808a7771f7614","modified":1709899318607},{"_id":"source/_posts/第二章导数/image-20240308200254044.png","hash":"be6fe1cb812ac6912894d795360f51516c868192","modified":1709899374077},{"_id":"source/_posts/第二章导数/image-20240308195258807.png","hash":"e65c5910c9d2a4743536f1c5eab6ccbd70669f03","modified":1709898778822},{"_id":"source/_posts/第二章导数/image-20240308200326596.png","hash":"e98a97de117feff6e724c6f8a69d91b274b6a0a6","modified":1709899406612},{"_id":"source/_posts/第二章导数/image-20240310200319728.png","hash":"bfe11814384eee156f7ee39b2dc96d6ecf3c8d2a","modified":1710072199747},{"_id":"source/link/index.md","hash":"9272c48a04f558f8118faf7e9096ad8c3c3a34b8","modified":1706949976901},{"_id":"source/_posts/第二章导数/image-20240310200348012.png","hash":"ada45a0acae87f5789c3f7e0bdebe50e38a83fff","modified":1710072228036},{"_id":"source/_posts/第二章导数/image-20240308194226083.png","hash":"47e992966d6caa11d79aa50a185805036bfc1a67","modified":1709898146106},{"_id":"source/_posts/第二章导数/image-20240308194355170.png","hash":"56c19016a93ddf277b4f40e2b03c9335db337194","modified":1709898235191},{"_id":"source/_posts/第二章导数/image-20240308194437833.png","hash":"b513cad2ced94301c52116e6f06e3daa05419831","modified":1709898277863},{"_id":"source/_posts/第二章导数/image-20240308194645257.png","hash":"b4d7ed42011ac783b210fed6abf22b6f3dfcb825","modified":1709898405285},{"_id":"source/_posts/第二章导数/image-20240308194625418.png","hash":"8d594a490b785e3edf6d73058d0a685d33035ec7","modified":1709898385443},{"_id":"source/_posts/第二章导数/image-20240310200201637.png","hash":"4ac6e7bff56eb677e61ebe3894266070672e65ca","modified":1710072121671},{"_id":"source/_posts/第二章导数/image-20240310200126231.png","hash":"619fafab433830b7017421ea85e88d34a19cb146","modified":1710072086262},{"_id":"source/_posts/第二章导数/image-20240308194244346.png","hash":"307c3c29b9e356ef168b3c6fc5c2e5234de01658","modified":1709898164381},{"_id":"source/_posts/数据结构知识点/image-20240203123352948.png","hash":"b907d821752315a9cc86cd91afc20d4d62dea32e","modified":1706934832985},{"_id":"source/_posts/数据结构知识点/image-20240203123834454.png","hash":"c51d379d6eafbb534a8a981aea043357e5fa96ca","modified":1706935114515},{"_id":"themes/butterfly/_config.yml","hash":"39fbabbbf1e89dd82a6ea21517c6c24b49e4dd98","modified":1706348091000},{"_id":"themes/butterfly/README_CN.md","hash":"148da187d16033624ceccce8b8561835296f5a5a","modified":1706348091000},{"_id":"themes/butterfly/package.json","hash":"5536ed4102cd21ace51478bd11f43db03c040d15","modified":1706348091000},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1706348091000},{"_id":"themes/butterfly/plugins.yml","hash":"1f8b5e0a533a59f91d760a5f96e61d81a8a9b7d2","modified":1706348091000},{"_id":"themes/butterfly/languages/default.yml","hash":"90a6dc361de67532437d819a55ec64945ca5404b","modified":1706348091000},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"03629d1d13a7be09d4933aa5dc0dcbe45e79140c","modified":1706348091000},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1706348091000},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"5004faee365139521f161babd66649a8107e4008","modified":1706348091000},{"_id":"themes/butterfly/languages/en.yml","hash":"af5603b1a888f167dc80be6d53a19437b5cf6bef","modified":1706348091000},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1706348091000},{"_id":"themes/butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1706348091000},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1706348091000},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1706348091000},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1706348091000},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1706348091000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1706348091000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1706348091000},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1706348091000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"6e34b565ea013812d5e363b6de5fa1f9078d4e12","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"2ef0a649e32f896448d2e36e904112335cb4f875","modified":1706409089519},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1706348091000},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1706348091000},{"_id":"themes/butterfly/source/css/index.styl","hash":"920784fa235ff649faaa778a9852af6be82bbc77","modified":1706410999828},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"db275f7fbe4438b54cd813b695f4834e10aa234f","modified":1706348091000},{"_id":"themes/butterfly/source/css/var.styl","hash":"152b6bd4b6285165541a71f5a1c913f8ee6a602b","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1706348091000},{"_id":"themes/butterfly/README.md","hash":"4e01b47448d9f3a02afc04eef644e2321253f6f4","modified":1706348091000},{"_id":"themes/butterfly/source/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1706348091000},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1706348091000},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1706348091000},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1706348091000},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1706348091000},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1706348091000},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"860f967ecf3c6a6ea785b560a7aae4d0757cd18a","modified":1706348091000},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"2ac43fd4103ba3c6897da7c13015cb05f39fd695","modified":1706348091000},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1706348091000},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"e196a99733d7f90899bceed5d12488e8234817d5","modified":1706348091000},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1706348091000},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"a8eef3f37428436554f58a2b6bac7c255fbdf38d","modified":1706348091000},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"7caf549810f971c34196fb9deac2d992545bdff9","modified":1706348091000},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"96f861151e3b889ef0ffe78821d489ad2625ee43","modified":1706348091000},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"d5c7e61257b08a9648404f6f48ce4d471cd5fa55","modified":1706348091000},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"e2a8a09bfe47da26eab242a36f516e6c452c799a","modified":1706348091000},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1706348091000},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"821e973d41f7b3b64cde91e0e836ea49c43e3c06","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"19773218877281ccffed921431e87148413a7c20","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"93229d44b35b9da92e647b89d6d3087085974a29","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"418684993a3a3a2ac534257a2d9ecbcead6808c1","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"830b1d592278b9f676df0cf9a91b1eeda2456aec","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"ffc62222f8d7b4d44c1c0726c8a08824a2201039","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1706348091000},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4526c75e5bf84609d67e92b6af3524bcb278e852","modified":1706348091000},{"_id":"themes/butterfly/source/js/main.js","hash":"0c33de6f5db7f10572e77a7e32fbb757e996897f","modified":1706411309072},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1706949081124},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1706348091000},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"5208fe1e75d97a05fd9bdd6cc53c59d8b741b94b","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1706348091000},{"_id":"themes/butterfly/source/js/sakura.js","hash":"776081c1b58d076efb989a5937e85d892c103e65","modified":1642074197000},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"63fed4548367a3663cdbaffa1df48167b0a2397b","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"a5c7d362ae63474c1a4e3eb5cd09804b3684e984","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e209014de7ac0b9a634872cd9a7c6301bf945993","modified":1706409123830},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"50d1b08367f709e5416140043933e79cd8d77559","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"12e57491e94fa00d953bbda9db0b6d6169e2358c","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"a096ff8eb6b2a22395be881f827ff2a686ba5596","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"5574804fdea5edf7fd52aad2caf030614d5e7f2f","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1706348091000},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"c8ff6ddd5bfe1190b7b8056b68ce41114fd79dcb","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1706348091000},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f19694a42dbe28eda4b39a1696e8fbcd277bc76c","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"a658a274c5f7896ee5122725bee45548693bdd66","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1706348091000},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":1706348091000},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"4dcd468e4d11a0ac75406162678feffcd89fee00","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"fad650f88778b33a6358e38cf50dfafc0974d28f","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"3d23993a2246dfd023d3c83b779b1712feebc9e7","modified":1706412125274},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"e549d24ad81a7d93326a509ff8dcfcc58c80729e","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1706348091000},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"0db591a1f4ed5adcb8668a549bbee5c9d62682cf","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"029eebbdcb3c682780d1de629fa06858cbe9782b","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"b7a6a585dbc38d177c9aba75df3a467415d0488a","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"f845b9b4efdee750f70c023aab27432611f83059","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d6cf26ffb8a0343eda1cde65b6b73b0ddbe8fcfc","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"a2eb44fa5eaea1325319a2064439cf36d0f35a2f","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1706348091000},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"961589da3c0a532c4709a4a4ea96bd579257f766","modified":1706348091000},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1706348091000},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1706348091000},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1706348091000},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1706348091000},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1706348091000},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1706348091000},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1706348091000},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d4ebc41b5c855dd75f47de7345d62f85ce7cf073","modified":1706348091000},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"5cddbb5f4eae695a26685e415d821b523e0f17bf","modified":1706348091000},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1706348091000},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"2d02e52b360f6e6cae47c293ae57ed78e2554663","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1706348091000},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1706348091000},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1706348091000},{"_id":"themes/butterfly/source/css/_third-party/love.css","hash":"17868aa9977e43aaa66dcdeef587007c066e7510","modified":1706412134820},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"f7299f9fef5bf94bb58c8cd3be8ee660ad2f9cd4","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"6b67982bb7a3713b5bffd6a23ba2810425c504d0","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5c2bf7d7a4b9df3fb2794b0b32e96158f0de673f","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0d378ee8a671982a46213a4bfb223b4f3409aea9","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3bc4c1b91568561f0491bdac65b75aa0bfd01f27","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"46aec6466959baec1c3d71a5dbc510fbeb00c91d","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"62f16a602e57e5f7f7c5249dd37b42d436dc032a","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"2d7b0b09678adba09481e3152e0b32962677f650","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f15699abb8c7a255aabad0222ae53eee387c66a3","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"63cea2b5c8f7b59f5919379d61a2bb2ce8ed7623","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"894bf60ff5170cf1e4f276a8cedaf8301bceb824","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"46865e3f52096acb07d0212174b4e8751b123aea","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1995a654ba7ad62775a0a6e2922209cd1a85f2e3","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3335024ba91f55ccf3858571b7898f46881c455c","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"b928be14d1b47a9fadb1bcc5f5072a7328752d4b","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"9b70eea4b1ff083e2b8769493a5b5aea71a02318","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"2609bc2656aaaa9b59e8d575e711776512a62192","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"4104f96faa6040f111ebfb9a90eeb470857c3b86","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"9a3617f5e90c4e4176aa2ee2e904c22466e9663b","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"de2c4d02b520dd49a0a59fc0f33295e5bbb2c624","modified":1706348091000},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0f0b46d637a9a1b6ae35148923abecc80b866276","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"24804ab6da9727ed793655c1262fa3f1a9746f70","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"3ba49cfe186e9ca05faf9f0d0113611ec47e9b38","modified":1706348091000},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1706348091000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"1f9f51023e9e33081c2add2ca73643c0edc5e9d5","modified":1706348091000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1706348091000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"25914321762e30aacc610bc4dfb9de3e1cb556a3","modified":1706348091000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1706348091000},{"_id":"public/messageboard/index.html","hash":"1fb2d839b13ed1b4143ac6f8bcb9d91bc001e6d5","modified":1710384530317},{"_id":"public/categories/index.html","hash":"2ad0c67de10da45da892ca1f089be79821a9d4f1","modified":1710384530317},{"_id":"public/link/index.html","hash":"e7dc667355b09b0d2d8bdd475d7db96867d56884","modified":1710384530317},{"_id":"public/serein/index.html","hash":"de0ec9d77591031768a5e4f7bdfadd5ecc02381a","modified":1710384530317},{"_id":"public/tags/index.html","hash":"41b8c27b25b9b236ba317e07931799b0413a92bd","modified":1710384530317},{"_id":"public/2024/03/13/os第一章计算机系统概述/index.html","hash":"29754db2bfc31174015489c85177db866dbc3024","modified":1710384530317},{"_id":"public/2024/03/13/计组第二章数据的表示和运算/index.html","hash":"89fbbba3d5952ff68d29e6deb91546cd706229f1","modified":1710384530317},{"_id":"public/2024/03/11/计组第三章存储系统/index.html","hash":"fd7848b2926d8dd24a7fb1e4b83f40c92fa91b00","modified":1710384530317},{"_id":"public/2024/03/08/高数第三章积分/index.html","hash":"73f8aafbe4dad2be8f98083ab62e90ecb5008aa4","modified":1710384530317},{"_id":"public/2024/03/05/数据结构知识点/index.html","hash":"ace11990fb63d5572372990c14467953682dd878","modified":1710384530317},{"_id":"public/2024/03/05/第四章指令系统/index.html","hash":"bf3a1d5706b6a1b8698032143155a29a465d53ad","modified":1710384530317},{"_id":"public/2024/03/02/队列/index.html","hash":"53e76252e5a39533466a4936fe35f52ad0d24e07","modified":1710384530317},{"_id":"public/2024/03/02/第二章导数/index.html","hash":"e6b8fca2972cbc1dd368b0f46d51d3bd1fe69b77","modified":1710384530317},{"_id":"public/2024/02/19/第一章计算机系统概述/index.html","hash":"dcb323c5718c70c2a9e2d3ac279449ed35925ac4","modified":1710384530317},{"_id":"public/2024/02/14/高数第一章极限/index.html","hash":"85e95e0dd3572a71ee87d254dc12284c6bbdb91f","modified":1710384530317},{"_id":"public/2024/02/03/第五章-树与二叉树/index.html","hash":"8b3ace8a16d1ec9f8f1ab24a76d7f1ec3ddc34ff","modified":1710384530317},{"_id":"public/2024/02/03/第三章-栈/index.html","hash":"88d723e13dad988f69c728575d0e27f73f741b01","modified":1710384530317},{"_id":"public/2024/02/01/第四章-串/index.html","hash":"0046877f74bc9cd6ddced55a780a216ed9f3917a","modified":1710384530317},{"_id":"public/2024/01/28/词汇/index.html","hash":"440d45b683ef6e929674b8dfb1607993ebf42307","modified":1710384530317},{"_id":"public/2024/01/28/百句实战/index.html","hash":"b57ca6dfac335f22a5f297c4fd3d04656aa94c8b","modified":1710384530317},{"_id":"public/2024/01/24/单链表/index.html","hash":"3b4ec64e5f8495ac5953ac4280315b85b47d68c8","modified":1710384530317},{"_id":"public/2024/01/23/顺序表/index.html","hash":"5f4a264419cec009fc70d74c3614e657349fb216","modified":1710384530317},{"_id":"public/2023/05/19/python学习/index.html","hash":"6927e5d7b681829229271d69d50de963fd31ab71","modified":1710384530317},{"_id":"public/archives/index.html","hash":"2f3748c570906601777b561435fc68b04ddb067f","modified":1710384530317},{"_id":"public/archives/page/2/index.html","hash":"5a32561907de9013cd33c111ff8859e385da485b","modified":1710384530317},{"_id":"public/archives/2023/index.html","hash":"65b9110f1a240fc213320437f4bb677e89fd5a41","modified":1710384530317},{"_id":"public/archives/2023/05/index.html","hash":"38485b72a3e0fd54e3626924b741a523720873b0","modified":1710384530317},{"_id":"public/archives/2024/index.html","hash":"aab784e60810e01bbbd0b277bc2979edcf1d1021","modified":1710384530317},{"_id":"public/archives/2024/page/2/index.html","hash":"6ebb95ee4574953b76eacc121ae08978164fd29f","modified":1710384530317},{"_id":"public/archives/2024/01/index.html","hash":"b4bfe459dff2630cac2621931f26d0d67f577a8e","modified":1710384530317},{"_id":"public/archives/2024/02/index.html","hash":"8d17cdea27fa1e93b7ebb8446e5b02ea896f9db4","modified":1710384530317},{"_id":"public/archives/2024/03/index.html","hash":"5a2d79218e595a80ffe3f5c069e825ce5336185e","modified":1710384530317},{"_id":"public/categories/数据结构/index.html","hash":"facfba93531937a906fa06fd7cf164ab3f5d706a","modified":1710384530317},{"_id":"public/categories/操作系统/index.html","hash":"58902d58c5577ca98c3d951ef534ddefe85fc08d","modified":1710384530317},{"_id":"public/categories/英语/index.html","hash":"31fcc8b59578ce2ed166d490d573f94242a2222d","modified":1710384530317},{"_id":"public/categories/计组/index.html","hash":"ec9e4e36872e92d367d4c72662cfa7427f12bb9a","modified":1710384530317},{"_id":"public/categories/高数/index.html","hash":"a69b66eede561e11e7affbc70874671e0816e2ea","modified":1710384530317},{"_id":"public/index.html","hash":"c9f5d13125452a1163fa62e8188c45213190ad88","modified":1710384530317},{"_id":"public/page/2/index.html","hash":"6c8686ea2e238309477367433dbef532082469d9","modified":1710384530317},{"_id":"public/tags/Python/index.html","hash":"b2186c647f10fe5cfe975d840c11a56de946e6e3","modified":1710384530317},{"_id":"public/tags/c语言/index.html","hash":"5c37692b35de535e99cb09579ee92833f6e8ff4c","modified":1710384530317},{"_id":"public/tags/数据结构/index.html","hash":"562f1feb29fd2ac6d2978786063a0b7c543ab002","modified":1710384530317},{"_id":"public/tags/操作系统/index.html","hash":"5b56ac04414ce770523b1df2b9ba1d905a366b06","modified":1710384530317},{"_id":"public/tags/英语/index.html","hash":"96eda54b28a6c0a8054973365c1deaaee2f5fb1a","modified":1710384530317},{"_id":"public/tags/计组/index.html","hash":"1dc628860a6719d53e5322a8c99f689eddd39c5a","modified":1710384530317},{"_id":"public/tags/高数/index.html","hash":"bb7e8484e57f773914acae8f1bbcdfa750f52c9f","modified":1710384530317},{"_id":"public/CNAME","hash":"5c4a1223edb6fb8b74dddbde5eb74bf927b490cb","modified":1710384530317},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1710384530317},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1710384530317},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1710384530317},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1710384530317},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1710384530317},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1710384530317},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1710384530317},{"_id":"public/css/index.css","hash":"f0f7c08b356a39587b967382c20ec434d57c93f8","modified":1710384530317},{"_id":"public/js/main.js","hash":"0c33de6f5db7f10572e77a7e32fbb757e996897f","modified":1710384530317},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1710384530317},{"_id":"public/js/sakura.js","hash":"776081c1b58d076efb989a5937e85d892c103e65","modified":1710384530317}],"Category":[{"name":"数据结构","_id":"cltqmserd0007qcnj722waj1s"},{"name":"操作系统","_id":"cltqmserk000jqcnj3jox70sm"},{"name":"英语","_id":"cltqmserm000rqcnj12caakn3"},{"name":"计组","_id":"cltqmsero000zqcnjfmgyh5ug"},{"name":"高数","_id":"cltqmserq0016qcnj5a0w9j0e"}],"Data":[{"_id":"link","data":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"Lete乐特","link":"https://www.lete114.top/","avatar":"https://www.lete114.top/img/favicon.ico","descr":"每天进步一点点"},"2":{"name":"rainlotus","link":"https://blog.rainlotus.cc/","avatar":"https://avatars.githubusercontent.com/u/68591650?v=4","descr":"一个每天都学习的博主"}}}}}],"Page":[{"title":"messageboard","date":"2024-02-03T08:55:02.000Z","type":"messageboard","_content":"\n# 有什么想对SereinCease说的吗？\n","source":"messageboard/index.md","raw":"---\ntitle: messageboard\ndate: 2024-02-03 16:55:02\ntype: messageboard\n---\n\n# 有什么想对SereinCease说的吗？\n","updated":"2024-02-03T08:58:36.242Z","path":"messageboard/index.html","comments":1,"layout":"page","_id":"cltqmseqz0000qcnj0walho6t","content":"<h1 id=\"有什么想对SereinCease说的吗？\"><a href=\"#有什么想对SereinCease说的吗？\" class=\"headerlink\" title=\"有什么想对SereinCease说的吗？\"></a>有什么想对SereinCease说的吗？</h1>","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"有什么想对SereinCease说的吗？\"><a href=\"#有什么想对SereinCease说的吗？\" class=\"headerlink\" title=\"有什么想对SereinCease说的吗？\"></a>有什么想对SereinCease说的吗？</h1>"},{"title":"categories","date":"2024-02-03T08:43:24.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2024-02-03 16:43:24\ntype: \"categories\"\n---\n","updated":"2024-02-03T08:43:42.258Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cltqmser70002qcnjc9y95bly","content":"","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","cover_type":"img","excerpt":"","more":""},{"title":"link","date":"2024-02-03T08:43:58.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2024-02-03 16:43:58\ntype: \"link\"\n---\n","updated":"2024-02-03T08:46:16.901Z","path":"link/index.html","comments":1,"layout":"page","_id":"cltqmserb0005qcnj4zqi5zrp","content":"","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","cover_type":"img","excerpt":"","more":""},{"title":"serein","date":"2024-02-03T09:01:11.000Z","type":"serein","_content":"\n# Welcome to SereinCease's Github page\n","source":"serein/index.md","raw":"---\ntitle: serein\ndate: 2024-02-03 17:01:11\ntype: serein\n---\n\n# Welcome to SereinCease's Github page\n","updated":"2024-02-03T09:06:51.763Z","path":"serein/index.html","comments":1,"layout":"page","_id":"cltqmsere0008qcnj5zgh620z","content":"<h1 id=\"Welcome-to-SereinCease’s-Github-page\"><a href=\"#Welcome-to-SereinCease’s-Github-page\" class=\"headerlink\" title=\"Welcome to SereinCease’s Github page\"></a>Welcome to SereinCease’s Github page</h1>","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"Welcome-to-SereinCease’s-Github-page\"><a href=\"#Welcome-to-SereinCease’s-Github-page\" class=\"headerlink\" title=\"Welcome to SereinCease’s Github page\"></a>Welcome to SereinCease’s Github page</h1>"},{"title":"tags","date":"2024-02-03T08:42:39.000Z","type":"tags","orderby":"random","order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-02-03 16:42:39\ntype: \"tags\"\norderby: random\norder: 1\n---\n","updated":"2024-02-03T08:43:07.487Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cltqmserg000aqcnj6fn01yf4","content":"","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","cover_type":"img","excerpt":"","more":""}],"Post":[{"title":"python学习","date":"2023-05-19T07:00:17.000Z","_content":"\n##### \\# 1.type()查看类型信息\n\n```python\nprint(type(\"hello\"))\nstr_a = \"hello\"\nstr_type = type(str_a)\nprint(str_type)\n\n\n```\n\n##### \\# 2.强制类型转换 int(),float(),str()\n\n```python\na = str(111)\nprint(type(a),a)\n```\n\n##### \\# 3.字符串定义\n\n```python\nstr1 = '字符串'\nstr2 = \"字符串\"\nstr3 = \"\"\"字符串\"\"\"\nstr4 = \"\\\"字符串\"\n```\n\n##### \\# 4.字符串拼接\n\n```python\nname = \"学习\"\nprint(\"我爱\" + name)\n```\n\n\n\n##### \\# 5.字符串格式化 %s,%d,%f占位\n\n```python\nnum = 99\nmessage = \"我爱%s%s天\" % (name, num)\nprint(message)\n```\n\n\n\n##### \\# 6.精度\n\n```python\nfloat_num = 99.999\nprint(\"保留两位小数: %.2f\" % float_num)\nprint(f\"格式化：{float_num}\")\n```\n\n\n\n##### \\# 7.表达式格式化\n\n```python\nprint(\"1*1的结果是:%d\" % (1*1))\nprint(\"字符串类型: %s\" % type(name))\n```\n\n\n\n##### \\# 练习题\n\n```python\nname1 = \"名字\"\nstock_price = 19.99\nstock_code = \"003032\"\ngrowth_price = 1.2\ngrowth_day = 7\nprint(f\"公司:{name1},股票代码：{stock_code},当前股价:{stock_price}\")\nprint(\"每日增长系数:%.2f,经过了%d天的增长，股价达到了：%.2f\" %(growth_price, growth_day, stock_price*growth_price**growth_day))\n```\n\n\n\n##### \n\n##### \\# 8.input语句\n\n```python\nID = input(\"请输入你的ID\")\nprint(\"yourID为 %s\" % ID)\n```\n\n\n\n##### \\# Bool类型\n\n```python\nprint(f\"1小于2是对的吗{1 < 2} \")py\n```\n\n\n\n##### \\# 9.if 语句\n\n```python\nimport random\n\nnum = random.randint(1, 10)\nguess_num = int(input(\"输入你要第一次猜测的数字:\"))\nif guess_num == num:\n    print(\"猜对啦\")\nelse:\n    if guess_num < num:\n        print(\"猜小啦\")\n    else :\n        print(\"猜大啦\")\n    guess_num = int(input(\"输入你要第二次猜测的数字:\"))\n    if guess_num == num:\n        print(\"猜对啦\")\n    else:\n        if guess_num < num:\n            print(\"猜小啦\")\n        else:\n            print(\"猜大啦\")\n        guess_num = int(input(\"输入你要第三次猜测的数字:\"))\n        if guess_num == num:\n            print(\"猜对啦\")\n        else:\n            if guess_num < num:\n                print(\"猜小啦\")\n            else:\n                print(\"猜大啦\")\n            print(num)\n```\n\n```\nimport random\n\nnum = random.randint(1, 10)\ncount = 0\nflag = True\nwhile flag:\n    i = int(input(\"输入你要猜测的数字:\"))\n    if i < num:\n        print(\"猜小了\")\n    elif i > num:\n        print(\"猜大了\")\n    else:\n        print(\"猜对了\")\n        flag = False\n    count += 1\nprint(count)\n```\n\n\n\n##### #10 练习\n\n```\nprint(\"hello\", end='')\nprint(\"hello\\tworld\")\nprint(\"hiiiii\\tworld\")\n```\n\n九九乘法表\n\n```python\ni = 1\nj = 1\nwhile(i < 9):\n    while(j <= i):\n        print(f\"{j}*{i}={i*j}\\t\", end='')\n        j +=1\n    j = 1\n    i +=1\n    print()\n\n```\n\n```python\nimport random\n\ncount = 10000\nfor i in range(1,21):\n    num = random.randint(1,10)\n    if num < 5:\n        print(f\"员工{i},绩效分{num},低于5，不发工资\")\n        continue\n\n    if count != 0:\n        count = count - 1000\n        print(f\"向员工{i}发放工资1000元，账户余额还剩{count}元\")\n    else:\n        print(\"工资发放完毕\")\n        break\n\n```\n\n","source":"_posts/python学习.md","raw":"---\ntitle: python学习\ndate: 2023-05-19 15:00:17\ntags: Python\n---\n\n##### \\# 1.type()查看类型信息\n\n```python\nprint(type(\"hello\"))\nstr_a = \"hello\"\nstr_type = type(str_a)\nprint(str_type)\n\n\n```\n\n##### \\# 2.强制类型转换 int(),float(),str()\n\n```python\na = str(111)\nprint(type(a),a)\n```\n\n##### \\# 3.字符串定义\n\n```python\nstr1 = '字符串'\nstr2 = \"字符串\"\nstr3 = \"\"\"字符串\"\"\"\nstr4 = \"\\\"字符串\"\n```\n\n##### \\# 4.字符串拼接\n\n```python\nname = \"学习\"\nprint(\"我爱\" + name)\n```\n\n\n\n##### \\# 5.字符串格式化 %s,%d,%f占位\n\n```python\nnum = 99\nmessage = \"我爱%s%s天\" % (name, num)\nprint(message)\n```\n\n\n\n##### \\# 6.精度\n\n```python\nfloat_num = 99.999\nprint(\"保留两位小数: %.2f\" % float_num)\nprint(f\"格式化：{float_num}\")\n```\n\n\n\n##### \\# 7.表达式格式化\n\n```python\nprint(\"1*1的结果是:%d\" % (1*1))\nprint(\"字符串类型: %s\" % type(name))\n```\n\n\n\n##### \\# 练习题\n\n```python\nname1 = \"名字\"\nstock_price = 19.99\nstock_code = \"003032\"\ngrowth_price = 1.2\ngrowth_day = 7\nprint(f\"公司:{name1},股票代码：{stock_code},当前股价:{stock_price}\")\nprint(\"每日增长系数:%.2f,经过了%d天的增长，股价达到了：%.2f\" %(growth_price, growth_day, stock_price*growth_price**growth_day))\n```\n\n\n\n##### \n\n##### \\# 8.input语句\n\n```python\nID = input(\"请输入你的ID\")\nprint(\"yourID为 %s\" % ID)\n```\n\n\n\n##### \\# Bool类型\n\n```python\nprint(f\"1小于2是对的吗{1 < 2} \")py\n```\n\n\n\n##### \\# 9.if 语句\n\n```python\nimport random\n\nnum = random.randint(1, 10)\nguess_num = int(input(\"输入你要第一次猜测的数字:\"))\nif guess_num == num:\n    print(\"猜对啦\")\nelse:\n    if guess_num < num:\n        print(\"猜小啦\")\n    else :\n        print(\"猜大啦\")\n    guess_num = int(input(\"输入你要第二次猜测的数字:\"))\n    if guess_num == num:\n        print(\"猜对啦\")\n    else:\n        if guess_num < num:\n            print(\"猜小啦\")\n        else:\n            print(\"猜大啦\")\n        guess_num = int(input(\"输入你要第三次猜测的数字:\"))\n        if guess_num == num:\n            print(\"猜对啦\")\n        else:\n            if guess_num < num:\n                print(\"猜小啦\")\n            else:\n                print(\"猜大啦\")\n            print(num)\n```\n\n```\nimport random\n\nnum = random.randint(1, 10)\ncount = 0\nflag = True\nwhile flag:\n    i = int(input(\"输入你要猜测的数字:\"))\n    if i < num:\n        print(\"猜小了\")\n    elif i > num:\n        print(\"猜大了\")\n    else:\n        print(\"猜对了\")\n        flag = False\n    count += 1\nprint(count)\n```\n\n\n\n##### #10 练习\n\n```\nprint(\"hello\", end='')\nprint(\"hello\\tworld\")\nprint(\"hiiiii\\tworld\")\n```\n\n九九乘法表\n\n```python\ni = 1\nj = 1\nwhile(i < 9):\n    while(j <= i):\n        print(f\"{j}*{i}={i*j}\\t\", end='')\n        j +=1\n    j = 1\n    i +=1\n    print()\n\n```\n\n```python\nimport random\n\ncount = 10000\nfor i in range(1,21):\n    num = random.randint(1,10)\n    if num < 5:\n        print(f\"员工{i},绩效分{num},低于5，不发工资\")\n        continue\n\n    if count != 0:\n        count = count - 1000\n        print(f\"向员工{i}发放工资1000元，账户余额还剩{count}元\")\n    else:\n        print(\"工资发放完毕\")\n        break\n\n```\n\n","slug":"python学习","published":1,"updated":"2023-05-25T01:48:06.188Z","comments":1,"layout":"post","photos":[],"_id":"cltqmser30001qcnja5wsaxz9","content":"<h5 id=\"1-type-查看类型信息\"><a href=\"#1-type-查看类型信息\" class=\"headerlink\" title=\"# 1.type()查看类型信息\"></a># 1.type()查看类型信息</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"string\">&quot;hello&quot;</span>))</span><br><span class=\"line\">str_a = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">str_type = <span class=\"built_in\">type</span>(str_a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_type)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-强制类型转换-int-float-str\"><a href=\"#2-强制类型转换-int-float-str\" class=\"headerlink\" title=\"# 2.强制类型转换 int(),float(),str()\"></a># 2.强制类型转换 int(),float(),str()</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"built_in\">str</span>(<span class=\"number\">111</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a),a)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-字符串定义\"><a href=\"#3-字符串定义\" class=\"headerlink\" title=\"# 3.字符串定义\"></a># 3.字符串定义</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">&#x27;字符串&#x27;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&quot;字符串&quot;</span></span><br><span class=\"line\">str3 = <span class=\"string\">&quot;&quot;&quot;字符串&quot;&quot;&quot;</span></span><br><span class=\"line\">str4 = <span class=\"string\">&quot;\\&quot;字符串&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-字符串拼接\"><a href=\"#4-字符串拼接\" class=\"headerlink\" title=\"# 4.字符串拼接\"></a># 4.字符串拼接</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;学习&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;我爱&quot;</span> + name)</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"5-字符串格式化-s-d-f占位\"><a href=\"#5-字符串格式化-s-d-f占位\" class=\"headerlink\" title=\"# 5.字符串格式化 %s,%d,%f占位\"></a># 5.字符串格式化 %s,%d,%f占位</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">99</span></span><br><span class=\"line\">message = <span class=\"string\">&quot;我爱%s%s天&quot;</span> % (name, num)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"6-精度\"><a href=\"#6-精度\" class=\"headerlink\" title=\"# 6.精度\"></a># 6.精度</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float_num = <span class=\"number\">99.999</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;保留两位小数: %.2f&quot;</span> % float_num)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;格式化：<span class=\"subst\">&#123;float_num&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"7-表达式格式化\"><a href=\"#7-表达式格式化\" class=\"headerlink\" title=\"# 7.表达式格式化\"></a># 7.表达式格式化</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;1*1的结果是:%d&quot;</span> % (<span class=\"number\">1</span>*<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;字符串类型: %s&quot;</span> % <span class=\"built_in\">type</span>(name))</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"练习题\"><a href=\"#练习题\" class=\"headerlink\" title=\"# 练习题\"></a># 练习题</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name1 = <span class=\"string\">&quot;名字&quot;</span></span><br><span class=\"line\">stock_price = <span class=\"number\">19.99</span></span><br><span class=\"line\">stock_code = <span class=\"string\">&quot;003032&quot;</span></span><br><span class=\"line\">growth_price = <span class=\"number\">1.2</span></span><br><span class=\"line\">growth_day = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;公司:<span class=\"subst\">&#123;name1&#125;</span>,股票代码：<span class=\"subst\">&#123;stock_code&#125;</span>,当前股价:<span class=\"subst\">&#123;stock_price&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;每日增长系数:%.2f,经过了%d天的增长，股价达到了：%.2f&quot;</span> %(growth_price, growth_day, stock_price*growth_price**growth_day))</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5><h5 id=\"8-input语句\"><a href=\"#8-input语句\" class=\"headerlink\" title=\"# 8.input语句\"></a># 8.input语句</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ID = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入你的ID&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;yourID为 %s&quot;</span> % ID)</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"Bool类型\"><a href=\"#Bool类型\" class=\"headerlink\" title=\"# Bool类型\"></a># Bool类型</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;1小于2是对的吗<span class=\"subst\">&#123;<span class=\"number\">1</span> &lt; <span class=\"number\">2</span>&#125;</span> &quot;</span>)py</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"9-if-语句\"><a href=\"#9-if-语句\" class=\"headerlink\" title=\"# 9.if 语句\"></a># 9.if 语句</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">num = random.randint(<span class=\"number\">1</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">guess_num = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;输入你要第一次猜测的数字:&quot;</span>))</span><br><span class=\"line\"><span class=\"keyword\">if</span> guess_num == num:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜对啦&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> guess_num &lt; num:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜小啦&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> :</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜大啦&quot;</span>)</span><br><span class=\"line\">    guess_num = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;输入你要第二次猜测的数字:&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> guess_num == num:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜对啦&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> guess_num &lt; num:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜小啦&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜大啦&quot;</span>)</span><br><span class=\"line\">        guess_num = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;输入你要第三次猜测的数字:&quot;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> guess_num == num:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜对啦&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> guess_num &lt; num:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜小啦&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜大啦&quot;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(num)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\">num = random.randint(1, 10)</span><br><span class=\"line\">count = 0</span><br><span class=\"line\">flag = True</span><br><span class=\"line\">while flag:</span><br><span class=\"line\">    i = int(input(&quot;输入你要猜测的数字:&quot;))</span><br><span class=\"line\">    if i &lt; num:</span><br><span class=\"line\">        print(&quot;猜小了&quot;)</span><br><span class=\"line\">    elif i &gt; num:</span><br><span class=\"line\">        print(&quot;猜大了&quot;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&quot;猜对了&quot;)</span><br><span class=\"line\">        flag = False</span><br><span class=\"line\">    count += 1</span><br><span class=\"line\">print(count)</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"10-练习\"><a href=\"#10-练习\" class=\"headerlink\" title=\"#10 练习\"></a>#10 练习</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;hello&quot;, end=&#x27;&#x27;)</span><br><span class=\"line\">print(&quot;hello\\tworld&quot;)</span><br><span class=\"line\">print(&quot;hiiiii\\tworld&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>九九乘法表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">1</span></span><br><span class=\"line\">j = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(i &lt; <span class=\"number\">9</span>):</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= i):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;j&#125;</span>*<span class=\"subst\">&#123;i&#125;</span>=<span class=\"subst\">&#123;i*j&#125;</span>\\t&quot;</span>, end=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        j +=<span class=\"number\">1</span></span><br><span class=\"line\">    j = <span class=\"number\">1</span></span><br><span class=\"line\">    i +=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">count = <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">21</span>):</span><br><span class=\"line\">    num = random.randint(<span class=\"number\">1</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> num &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;员工<span class=\"subst\">&#123;i&#125;</span>,绩效分<span class=\"subst\">&#123;num&#125;</span>,低于5，不发工资&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> count != <span class=\"number\">0</span>:</span><br><span class=\"line\">        count = count - <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;向员工<span class=\"subst\">&#123;i&#125;</span>发放工资1000元，账户余额还剩<span class=\"subst\">&#123;count&#125;</span>元&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;工资发放完毕&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","cover_type":"img","excerpt":"","more":"<h5 id=\"1-type-查看类型信息\"><a href=\"#1-type-查看类型信息\" class=\"headerlink\" title=\"# 1.type()查看类型信息\"></a># 1.type()查看类型信息</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"string\">&quot;hello&quot;</span>))</span><br><span class=\"line\">str_a = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">str_type = <span class=\"built_in\">type</span>(str_a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_type)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-强制类型转换-int-float-str\"><a href=\"#2-强制类型转换-int-float-str\" class=\"headerlink\" title=\"# 2.强制类型转换 int(),float(),str()\"></a># 2.强制类型转换 int(),float(),str()</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"built_in\">str</span>(<span class=\"number\">111</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a),a)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-字符串定义\"><a href=\"#3-字符串定义\" class=\"headerlink\" title=\"# 3.字符串定义\"></a># 3.字符串定义</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">&#x27;字符串&#x27;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&quot;字符串&quot;</span></span><br><span class=\"line\">str3 = <span class=\"string\">&quot;&quot;&quot;字符串&quot;&quot;&quot;</span></span><br><span class=\"line\">str4 = <span class=\"string\">&quot;\\&quot;字符串&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-字符串拼接\"><a href=\"#4-字符串拼接\" class=\"headerlink\" title=\"# 4.字符串拼接\"></a># 4.字符串拼接</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;学习&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;我爱&quot;</span> + name)</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"5-字符串格式化-s-d-f占位\"><a href=\"#5-字符串格式化-s-d-f占位\" class=\"headerlink\" title=\"# 5.字符串格式化 %s,%d,%f占位\"></a># 5.字符串格式化 %s,%d,%f占位</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">99</span></span><br><span class=\"line\">message = <span class=\"string\">&quot;我爱%s%s天&quot;</span> % (name, num)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"6-精度\"><a href=\"#6-精度\" class=\"headerlink\" title=\"# 6.精度\"></a># 6.精度</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float_num = <span class=\"number\">99.999</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;保留两位小数: %.2f&quot;</span> % float_num)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;格式化：<span class=\"subst\">&#123;float_num&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"7-表达式格式化\"><a href=\"#7-表达式格式化\" class=\"headerlink\" title=\"# 7.表达式格式化\"></a># 7.表达式格式化</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;1*1的结果是:%d&quot;</span> % (<span class=\"number\">1</span>*<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;字符串类型: %s&quot;</span> % <span class=\"built_in\">type</span>(name))</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"练习题\"><a href=\"#练习题\" class=\"headerlink\" title=\"# 练习题\"></a># 练习题</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name1 = <span class=\"string\">&quot;名字&quot;</span></span><br><span class=\"line\">stock_price = <span class=\"number\">19.99</span></span><br><span class=\"line\">stock_code = <span class=\"string\">&quot;003032&quot;</span></span><br><span class=\"line\">growth_price = <span class=\"number\">1.2</span></span><br><span class=\"line\">growth_day = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;公司:<span class=\"subst\">&#123;name1&#125;</span>,股票代码：<span class=\"subst\">&#123;stock_code&#125;</span>,当前股价:<span class=\"subst\">&#123;stock_price&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;每日增长系数:%.2f,经过了%d天的增长，股价达到了：%.2f&quot;</span> %(growth_price, growth_day, stock_price*growth_price**growth_day))</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5><h5 id=\"8-input语句\"><a href=\"#8-input语句\" class=\"headerlink\" title=\"# 8.input语句\"></a># 8.input语句</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ID = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入你的ID&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;yourID为 %s&quot;</span> % ID)</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"Bool类型\"><a href=\"#Bool类型\" class=\"headerlink\" title=\"# Bool类型\"></a># Bool类型</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;1小于2是对的吗<span class=\"subst\">&#123;<span class=\"number\">1</span> &lt; <span class=\"number\">2</span>&#125;</span> &quot;</span>)py</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"9-if-语句\"><a href=\"#9-if-语句\" class=\"headerlink\" title=\"# 9.if 语句\"></a># 9.if 语句</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">num = random.randint(<span class=\"number\">1</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">guess_num = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;输入你要第一次猜测的数字:&quot;</span>))</span><br><span class=\"line\"><span class=\"keyword\">if</span> guess_num == num:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜对啦&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> guess_num &lt; num:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜小啦&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> :</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜大啦&quot;</span>)</span><br><span class=\"line\">    guess_num = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;输入你要第二次猜测的数字:&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> guess_num == num:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜对啦&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> guess_num &lt; num:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜小啦&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜大啦&quot;</span>)</span><br><span class=\"line\">        guess_num = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;输入你要第三次猜测的数字:&quot;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> guess_num == num:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜对啦&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> guess_num &lt; num:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜小啦&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;猜大啦&quot;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(num)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\">num = random.randint(1, 10)</span><br><span class=\"line\">count = 0</span><br><span class=\"line\">flag = True</span><br><span class=\"line\">while flag:</span><br><span class=\"line\">    i = int(input(&quot;输入你要猜测的数字:&quot;))</span><br><span class=\"line\">    if i &lt; num:</span><br><span class=\"line\">        print(&quot;猜小了&quot;)</span><br><span class=\"line\">    elif i &gt; num:</span><br><span class=\"line\">        print(&quot;猜大了&quot;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&quot;猜对了&quot;)</span><br><span class=\"line\">        flag = False</span><br><span class=\"line\">    count += 1</span><br><span class=\"line\">print(count)</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"10-练习\"><a href=\"#10-练习\" class=\"headerlink\" title=\"#10 练习\"></a>#10 练习</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;hello&quot;, end=&#x27;&#x27;)</span><br><span class=\"line\">print(&quot;hello\\tworld&quot;)</span><br><span class=\"line\">print(&quot;hiiiii\\tworld&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>九九乘法表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">1</span></span><br><span class=\"line\">j = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(i &lt; <span class=\"number\">9</span>):</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= i):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;j&#125;</span>*<span class=\"subst\">&#123;i&#125;</span>=<span class=\"subst\">&#123;i*j&#125;</span>\\t&quot;</span>, end=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        j +=<span class=\"number\">1</span></span><br><span class=\"line\">    j = <span class=\"number\">1</span></span><br><span class=\"line\">    i +=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">count = <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">21</span>):</span><br><span class=\"line\">    num = random.randint(<span class=\"number\">1</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> num &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;员工<span class=\"subst\">&#123;i&#125;</span>,绩效分<span class=\"subst\">&#123;num&#125;</span>,低于5，不发工资&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> count != <span class=\"number\">0</span>:</span><br><span class=\"line\">        count = count - <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;向员工<span class=\"subst\">&#123;i&#125;</span>发放工资1000元，账户余额还剩<span class=\"subst\">&#123;count&#125;</span>元&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;工资发放完毕&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"单链表","date":"2024-01-24T06:58:00.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-02-01/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240201122400-80b551.jpg","_content":"\n单链表结构体定义\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n//链表练习\ntypedef int ElemType;\ntypedef struct LNode{\n    ElemType data;\n    struct LNode *next;//定义指针域\n}LNode,*LinkList;\n\n\n```\n\n单链表遍历输出\n\n```c\nvoid ListPrint(LNode* L){\n    L=L->next;//从第一个结点开始遍历\n    while(L!=NULL){\n        printf(\"%3d\",L->data);\n        L=L->next;\n    }\n    printf(\"\\n\");\n}\n```\n\n单链表按位查找\n\n```c\nLinkList serach_i(LinkList L, int i){\n    if(i<1)\n        return NULL;//判断插入位置是否合法\n    LNode *p=L->next;//从第一个结点开始遍历\n    int k=1;\n    while (p!=NULL&&k<i){\n        p=p->next;\n        k++;\n    }\n    return p;\n}\n```\n\n单链表按值查找\n\n```c\nLNode *search_e(LinkList L, int e){\n    LNode *p=L->next;\n    while(p!=NULL&&(p->data!=e){\n        p=p->next;\n    }\n    return p;\n}\n```\n\n头插法\n\n```c\n//头插法\nLinkList List_HeadInsert(LinkList &L){\n    L=(LNode*)malloc(sizeof (LNode));\n    L->next=NULL;//头结点初始化;\n    LNode *s;//定义一个指针指向新节点\n    int x;//记录新节点的值\n    scanf(\"%d\",&x);//输入新节点的值\n    while (x!=9999){\n        s=(LNode*)malloc(sizeof (LNode));\n        s->data=x;\n        s->next=L->next;\n        L->next=s;\n        scanf(\"%d\",&x);\n    }\n    return L;\n}\n\n```\n\n尾插法\n\n```c\n//尾插法\nLinkList  List_TailInsert(LinkList &L){\n    L=(LNode*)malloc(sizeof (LNode));\n    L->next=NULL;//头结点初始化;\n    LNode *s,*r=L;\n    int x;\n    scanf(\"%d\",&x);\n    while(x!=9999){\n        s=(LNode*)malloc(sizeof (LNode));\n        s->data=x;\n        r->next=s;\n        r=s;\n        scanf(\"%d\",&x);\n    }\n    r->next=NULL;\n    return L;\n}\n```\n\n\n\nmain函数\n\n```c\nint main() {\n    LNode* L;\n    List_HeadInsert(L);\n    ListPrint(L);\n    List_TailInsert(L);\n    ListPrint(L);\n    return 0;\n}\n```\n\n","source":"_posts/单链表.md","raw":"---\ntitle: 单链表\ndate: 2024-01-24 14:58:00\ntags: c语言\ncategories: 数据结构\ncover: https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-02-01/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240201122400-80b551.jpg\n---\n\n单链表结构体定义\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n//链表练习\ntypedef int ElemType;\ntypedef struct LNode{\n    ElemType data;\n    struct LNode *next;//定义指针域\n}LNode,*LinkList;\n\n\n```\n\n单链表遍历输出\n\n```c\nvoid ListPrint(LNode* L){\n    L=L->next;//从第一个结点开始遍历\n    while(L!=NULL){\n        printf(\"%3d\",L->data);\n        L=L->next;\n    }\n    printf(\"\\n\");\n}\n```\n\n单链表按位查找\n\n```c\nLinkList serach_i(LinkList L, int i){\n    if(i<1)\n        return NULL;//判断插入位置是否合法\n    LNode *p=L->next;//从第一个结点开始遍历\n    int k=1;\n    while (p!=NULL&&k<i){\n        p=p->next;\n        k++;\n    }\n    return p;\n}\n```\n\n单链表按值查找\n\n```c\nLNode *search_e(LinkList L, int e){\n    LNode *p=L->next;\n    while(p!=NULL&&(p->data!=e){\n        p=p->next;\n    }\n    return p;\n}\n```\n\n头插法\n\n```c\n//头插法\nLinkList List_HeadInsert(LinkList &L){\n    L=(LNode*)malloc(sizeof (LNode));\n    L->next=NULL;//头结点初始化;\n    LNode *s;//定义一个指针指向新节点\n    int x;//记录新节点的值\n    scanf(\"%d\",&x);//输入新节点的值\n    while (x!=9999){\n        s=(LNode*)malloc(sizeof (LNode));\n        s->data=x;\n        s->next=L->next;\n        L->next=s;\n        scanf(\"%d\",&x);\n    }\n    return L;\n}\n\n```\n\n尾插法\n\n```c\n//尾插法\nLinkList  List_TailInsert(LinkList &L){\n    L=(LNode*)malloc(sizeof (LNode));\n    L->next=NULL;//头结点初始化;\n    LNode *s,*r=L;\n    int x;\n    scanf(\"%d\",&x);\n    while(x!=9999){\n        s=(LNode*)malloc(sizeof (LNode));\n        s->data=x;\n        r->next=s;\n        r=s;\n        scanf(\"%d\",&x);\n    }\n    r->next=NULL;\n    return L;\n}\n```\n\n\n\nmain函数\n\n```c\nint main() {\n    LNode* L;\n    List_HeadInsert(L);\n    ListPrint(L);\n    List_TailInsert(L);\n    ListPrint(L);\n    return 0;\n}\n```\n\n","slug":"单链表","published":1,"updated":"2024-03-08T03:27:35.396Z","comments":1,"layout":"post","photos":[],"_id":"cltqmser80003qcnj19er46b3","content":"<p>单链表结构体定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//链表练习</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>&#123;</span></span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> *<span class=\"title\">next</span>;</span><span class=\"comment\">//定义指针域</span></span><br><span class=\"line\">&#125;LNode,*LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>单链表遍历输出</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ListPrint</span><span class=\"params\">(LNode* L)</span>&#123;</span><br><span class=\"line\">    L=L-&gt;next;<span class=\"comment\">//从第一个结点开始遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%3d&quot;</span>,L-&gt;data);</span><br><span class=\"line\">        L=L-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>单链表按位查找</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinkList <span class=\"title function_\">serach_i</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;<span class=\"comment\">//判断插入位置是否合法</span></span><br><span class=\"line\">    LNode *p=L-&gt;next;<span class=\"comment\">//从第一个结点开始遍历</span></span><br><span class=\"line\">    <span class=\"type\">int</span> k=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p!=<span class=\"literal\">NULL</span>&amp;&amp;k&lt;i)&#123;</span><br><span class=\"line\">        p=p-&gt;next;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>单链表按值查找</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LNode *<span class=\"title function_\">search_e</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    LNode *p=L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>&amp;&amp;(p-&gt;data!=e)&#123;</span><br><span class=\"line\">        p=p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>头插法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//头插法</span></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList &amp;L)</span>&#123;</span><br><span class=\"line\">    L=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> (LNode));</span><br><span class=\"line\">    L-&gt;next=<span class=\"literal\">NULL</span>;<span class=\"comment\">//头结点初始化;</span></span><br><span class=\"line\">    LNode *s;<span class=\"comment\">//定义一个指针指向新节点</span></span><br><span class=\"line\">    <span class=\"type\">int</span> x;<span class=\"comment\">//记录新节点的值</span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);<span class=\"comment\">//输入新节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x!=<span class=\"number\">9999</span>)&#123;</span><br><span class=\"line\">        s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> (LNode));</span><br><span class=\"line\">        s-&gt;data=x;</span><br><span class=\"line\">        s-&gt;next=L-&gt;next;</span><br><span class=\"line\">        L-&gt;next=s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>尾插法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//尾插法</span></span><br><span class=\"line\">LinkList  <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList &amp;L)</span>&#123;</span><br><span class=\"line\">    L=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> (LNode));</span><br><span class=\"line\">    L-&gt;next=<span class=\"literal\">NULL</span>;<span class=\"comment\">//头结点初始化;</span></span><br><span class=\"line\">    LNode *s,*r=L;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x!=<span class=\"number\">9999</span>)&#123;</span><br><span class=\"line\">        s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> (LNode));</span><br><span class=\"line\">        s-&gt;data=x;</span><br><span class=\"line\">        r-&gt;next=s;</span><br><span class=\"line\">        r=s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>main函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    LNode* L;</span><br><span class=\"line\">    List_HeadInsert(L);</span><br><span class=\"line\">    ListPrint(L);</span><br><span class=\"line\">    List_TailInsert(L);</span><br><span class=\"line\">    ListPrint(L);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","cover_type":"img","excerpt":"","more":"<p>单链表结构体定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//链表练习</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>&#123;</span></span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> *<span class=\"title\">next</span>;</span><span class=\"comment\">//定义指针域</span></span><br><span class=\"line\">&#125;LNode,*LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>单链表遍历输出</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ListPrint</span><span class=\"params\">(LNode* L)</span>&#123;</span><br><span class=\"line\">    L=L-&gt;next;<span class=\"comment\">//从第一个结点开始遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%3d&quot;</span>,L-&gt;data);</span><br><span class=\"line\">        L=L-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>单链表按位查找</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinkList <span class=\"title function_\">serach_i</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;<span class=\"comment\">//判断插入位置是否合法</span></span><br><span class=\"line\">    LNode *p=L-&gt;next;<span class=\"comment\">//从第一个结点开始遍历</span></span><br><span class=\"line\">    <span class=\"type\">int</span> k=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p!=<span class=\"literal\">NULL</span>&amp;&amp;k&lt;i)&#123;</span><br><span class=\"line\">        p=p-&gt;next;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>单链表按值查找</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LNode *<span class=\"title function_\">search_e</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    LNode *p=L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>&amp;&amp;(p-&gt;data!=e)&#123;</span><br><span class=\"line\">        p=p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>头插法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//头插法</span></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList &amp;L)</span>&#123;</span><br><span class=\"line\">    L=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> (LNode));</span><br><span class=\"line\">    L-&gt;next=<span class=\"literal\">NULL</span>;<span class=\"comment\">//头结点初始化;</span></span><br><span class=\"line\">    LNode *s;<span class=\"comment\">//定义一个指针指向新节点</span></span><br><span class=\"line\">    <span class=\"type\">int</span> x;<span class=\"comment\">//记录新节点的值</span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);<span class=\"comment\">//输入新节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x!=<span class=\"number\">9999</span>)&#123;</span><br><span class=\"line\">        s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> (LNode));</span><br><span class=\"line\">        s-&gt;data=x;</span><br><span class=\"line\">        s-&gt;next=L-&gt;next;</span><br><span class=\"line\">        L-&gt;next=s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>尾插法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//尾插法</span></span><br><span class=\"line\">LinkList  <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList &amp;L)</span>&#123;</span><br><span class=\"line\">    L=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> (LNode));</span><br><span class=\"line\">    L-&gt;next=<span class=\"literal\">NULL</span>;<span class=\"comment\">//头结点初始化;</span></span><br><span class=\"line\">    LNode *s,*r=L;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x!=<span class=\"number\">9999</span>)&#123;</span><br><span class=\"line\">        s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> (LNode));</span><br><span class=\"line\">        s-&gt;data=x;</span><br><span class=\"line\">        r-&gt;next=s;</span><br><span class=\"line\">        r=s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>main函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    LNode* L;</span><br><span class=\"line\">    List_HeadInsert(L);</span><br><span class=\"line\">    ListPrint(L);</span><br><span class=\"line\">    List_TailInsert(L);</span><br><span class=\"line\">    ListPrint(L);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"数据结构知识点","date":"2024-03-05T11:38:12.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":"数据结构中非代码知识点总结","_content":"\n# 第三章栈，队列和数组\n\n1.数组和特殊矩阵\n\n一维数组的存储结构：a[i]=LOC+i*sizeof(ElemType) （下标从0开始）\n\n二维数组按行优先存储结构：\n\nb[i] [j]=LOC+(i*N+j)**sizeof(ElemType)  (M行N列)\n\n2.特殊矩阵的矩阵压缩\n\n采用矩阵压缩的目的：减少不必要的存储空间\n\n(1)对称矩阵\n\n(2)三角矩阵\n\n(3)三对角矩阵\n\n3.稀疏矩阵\n\n稀疏矩阵压缩后失去了随机存储特性\n\n**适用于稀疏矩阵的两种存储结构：三元组表和十字链表**\n\n稀疏矩阵的特点是矩阵中非零元较少\n\n主要考点为计算数组下表，存储地址\n\n# 第五章树与二叉树\n\n## 5.1树的基本概念\n\n![](image-20240203123352948.png)\n\n1.树的性质\n\n1.结点数=总度数+1\n\n2.度为m的树，m叉树的区别\n\n![](image-20240203123834454.png)\n\n3.度为m的树第i层至多有m^i-1^个结点（i>=1）\n\n4.高度为h的m叉树至多有m^h-1^/m-1个结点\n\n\n\n## 5.3二叉树的遍历和线索二叉树\n\n1.由遍历序列构成二叉树\n\n先+中\n\n后+中\n\n层+中\n\n# 第六章图\n\n## 6.3图的遍历\n\n广度优先搜索BFS\n\n使用辅助队列，先进先出\n\n类似于树的层次遍历\n\n各边的权值相等时，可解决单源最短路径问题\n","source":"_posts/数据结构知识点.md","raw":"---\ntitle: 数据结构知识点\ndate: 2024-03-05 19:38:12\ntags: 数据结构\ncategories: 数据结构\ncover: \ndescription: 数据结构中非代码知识点总结\n---\n\n# 第三章栈，队列和数组\n\n1.数组和特殊矩阵\n\n一维数组的存储结构：a[i]=LOC+i*sizeof(ElemType) （下标从0开始）\n\n二维数组按行优先存储结构：\n\nb[i] [j]=LOC+(i*N+j)**sizeof(ElemType)  (M行N列)\n\n2.特殊矩阵的矩阵压缩\n\n采用矩阵压缩的目的：减少不必要的存储空间\n\n(1)对称矩阵\n\n(2)三角矩阵\n\n(3)三对角矩阵\n\n3.稀疏矩阵\n\n稀疏矩阵压缩后失去了随机存储特性\n\n**适用于稀疏矩阵的两种存储结构：三元组表和十字链表**\n\n稀疏矩阵的特点是矩阵中非零元较少\n\n主要考点为计算数组下表，存储地址\n\n# 第五章树与二叉树\n\n## 5.1树的基本概念\n\n![](image-20240203123352948.png)\n\n1.树的性质\n\n1.结点数=总度数+1\n\n2.度为m的树，m叉树的区别\n\n![](image-20240203123834454.png)\n\n3.度为m的树第i层至多有m^i-1^个结点（i>=1）\n\n4.高度为h的m叉树至多有m^h-1^/m-1个结点\n\n\n\n## 5.3二叉树的遍历和线索二叉树\n\n1.由遍历序列构成二叉树\n\n先+中\n\n后+中\n\n层+中\n\n# 第六章图\n\n## 6.3图的遍历\n\n广度优先搜索BFS\n\n使用辅助队列，先进先出\n\n类似于树的层次遍历\n\n各边的权值相等时，可解决单源最短路径问题\n","slug":"数据结构知识点","published":1,"updated":"2024-03-13T07:54:07.447Z","comments":1,"layout":"post","photos":[],"_id":"cltqmserc0006qcnjg7vzcuxb","content":"<h1 id=\"第三章栈，队列和数组\"><a href=\"#第三章栈，队列和数组\" class=\"headerlink\" title=\"第三章栈，队列和数组\"></a>第三章栈，队列和数组</h1><p>1.数组和特殊矩阵</p>\n<p>一维数组的存储结构：a[i]&#x3D;LOC+i*sizeof(ElemType) （下标从0开始）</p>\n<p>二维数组按行优先存储结构：</p>\n<p>b[i] [j]&#x3D;LOC+(i*N+j)**sizeof(ElemType)  (M行N列)</p>\n<p>2.特殊矩阵的矩阵压缩</p>\n<p>采用矩阵压缩的目的：减少不必要的存储空间</p>\n<p>(1)对称矩阵</p>\n<p>(2)三角矩阵</p>\n<p>(3)三对角矩阵</p>\n<p>3.稀疏矩阵</p>\n<p>稀疏矩阵压缩后失去了随机存储特性</p>\n<p><strong>适用于稀疏矩阵的两种存储结构：三元组表和十字链表</strong></p>\n<p>稀疏矩阵的特点是矩阵中非零元较少</p>\n<p>主要考点为计算数组下表，存储地址</p>\n<h1 id=\"第五章树与二叉树\"><a href=\"#第五章树与二叉树\" class=\"headerlink\" title=\"第五章树与二叉树\"></a>第五章树与二叉树</h1><h2 id=\"5-1树的基本概念\"><a href=\"#5-1树的基本概念\" class=\"headerlink\" title=\"5.1树的基本概念\"></a>5.1树的基本概念</h2><p><img src=\"/image-20240203123352948.png\"></p>\n<p>1.树的性质</p>\n<p>1.结点数&#x3D;总度数+1</p>\n<p>2.度为m的树，m叉树的区别</p>\n<p><img src=\"/image-20240203123834454.png\"></p>\n<p>3.度为m的树第i层至多有m^i-1^个结点（i&gt;&#x3D;1）</p>\n<p>4.高度为h的m叉树至多有m^h-1^&#x2F;m-1个结点</p>\n<h2 id=\"5-3二叉树的遍历和线索二叉树\"><a href=\"#5-3二叉树的遍历和线索二叉树\" class=\"headerlink\" title=\"5.3二叉树的遍历和线索二叉树\"></a>5.3二叉树的遍历和线索二叉树</h2><p>1.由遍历序列构成二叉树</p>\n<p>先+中</p>\n<p>后+中</p>\n<p>层+中</p>\n<h1 id=\"第六章图\"><a href=\"#第六章图\" class=\"headerlink\" title=\"第六章图\"></a>第六章图</h1><h2 id=\"6-3图的遍历\"><a href=\"#6-3图的遍历\" class=\"headerlink\" title=\"6.3图的遍历\"></a>6.3图的遍历</h2><p>广度优先搜索BFS</p>\n<p>使用辅助队列，先进先出</p>\n<p>类似于树的层次遍历</p>\n<p>各边的权值相等时，可解决单源最短路径问题</p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"第三章栈，队列和数组\"><a href=\"#第三章栈，队列和数组\" class=\"headerlink\" title=\"第三章栈，队列和数组\"></a>第三章栈，队列和数组</h1><p>1.数组和特殊矩阵</p>\n<p>一维数组的存储结构：a[i]&#x3D;LOC+i*sizeof(ElemType) （下标从0开始）</p>\n<p>二维数组按行优先存储结构：</p>\n<p>b[i] [j]&#x3D;LOC+(i*N+j)**sizeof(ElemType)  (M行N列)</p>\n<p>2.特殊矩阵的矩阵压缩</p>\n<p>采用矩阵压缩的目的：减少不必要的存储空间</p>\n<p>(1)对称矩阵</p>\n<p>(2)三角矩阵</p>\n<p>(3)三对角矩阵</p>\n<p>3.稀疏矩阵</p>\n<p>稀疏矩阵压缩后失去了随机存储特性</p>\n<p><strong>适用于稀疏矩阵的两种存储结构：三元组表和十字链表</strong></p>\n<p>稀疏矩阵的特点是矩阵中非零元较少</p>\n<p>主要考点为计算数组下表，存储地址</p>\n<h1 id=\"第五章树与二叉树\"><a href=\"#第五章树与二叉树\" class=\"headerlink\" title=\"第五章树与二叉树\"></a>第五章树与二叉树</h1><h2 id=\"5-1树的基本概念\"><a href=\"#5-1树的基本概念\" class=\"headerlink\" title=\"5.1树的基本概念\"></a>5.1树的基本概念</h2><p><img src=\"/image-20240203123352948.png\"></p>\n<p>1.树的性质</p>\n<p>1.结点数&#x3D;总度数+1</p>\n<p>2.度为m的树，m叉树的区别</p>\n<p><img src=\"/image-20240203123834454.png\"></p>\n<p>3.度为m的树第i层至多有m^i-1^个结点（i&gt;&#x3D;1）</p>\n<p>4.高度为h的m叉树至多有m^h-1^&#x2F;m-1个结点</p>\n<h2 id=\"5-3二叉树的遍历和线索二叉树\"><a href=\"#5-3二叉树的遍历和线索二叉树\" class=\"headerlink\" title=\"5.3二叉树的遍历和线索二叉树\"></a>5.3二叉树的遍历和线索二叉树</h2><p>1.由遍历序列构成二叉树</p>\n<p>先+中</p>\n<p>后+中</p>\n<p>层+中</p>\n<h1 id=\"第六章图\"><a href=\"#第六章图\" class=\"headerlink\" title=\"第六章图\"></a>第六章图</h1><h2 id=\"6-3图的遍历\"><a href=\"#6-3图的遍历\" class=\"headerlink\" title=\"6.3图的遍历\"></a>6.3图的遍历</h2><p>广度优先搜索BFS</p>\n<p>使用辅助队列，先进先出</p>\n<p>类似于树的层次遍历</p>\n<p>各边的权值相等时，可解决单源最短路径问题</p>\n"},{"title":"os第一章计算机系统概述","date":"2024-03-13T09:24:04.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":null,"_content":"\n# 一、操作系统的基本概念\n\n## 1.OS功能\n\n#### （1）计算机系统资源的管理者\n\n处理器管理，存储器管理，文件管理，I/O管理\n\n> [!IMPORTANT]\n>\n> #### （2）向上层提供方便易用的服务\n>\n> a.给普通用户：**命令接口**（联机命令接口，脱机命令接口），GUI图形接口 \n>\n> b.给程序员：程序接口---**系统调用**\n\n#### （3）扩展机器\n\n## 2.OS特征\n\n#### 并发\n\n支持多道程序的单处理机中，OS的并发性是通过分时实现的，CPU与I/O设备，I/O设备与I/O设备能实现真正的并行\n\n#### 共享\n\n#### 虚拟\n\n#### 异步\n\n# 二、操作系统发展历程\n\n## 1.手工操作阶段\n\n人机速度矛盾\n\n## 2.批处理阶段\n\n（引入脱机输入输出技术）\n\n### (1)单道批处理系统\n\n资源利用不充分\n\n### (2)多道批处理系统\n\n宏观上并行，微观上串行，资源利用率高，无交互功能\n\n引入多道程序技术的前提：中断功能\n\n## 3.分时操作系统\n\n解决人机交互，不能应对突发紧急任务\n\n## 4.实时操作系统\n\n能够完成某些紧急任务，具有及时性和可靠性\n\n硬实时：绝对在规定时间内完成\n\n软实时：偶尔可以违反时间规定\n\n5.网络操作系统和分布式操作系统\n\n6.个人计算机操作系统\n","source":"_posts/os第一章计算机系统概述.md","raw":"---\ntitle: os第一章计算机系统概述\ndate: 2024-03-13 17:24:04\ntags: 操作系统\ncategories: 操作系统\ncover:\ndescription:\n---\n\n# 一、操作系统的基本概念\n\n## 1.OS功能\n\n#### （1）计算机系统资源的管理者\n\n处理器管理，存储器管理，文件管理，I/O管理\n\n> [!IMPORTANT]\n>\n> #### （2）向上层提供方便易用的服务\n>\n> a.给普通用户：**命令接口**（联机命令接口，脱机命令接口），GUI图形接口 \n>\n> b.给程序员：程序接口---**系统调用**\n\n#### （3）扩展机器\n\n## 2.OS特征\n\n#### 并发\n\n支持多道程序的单处理机中，OS的并发性是通过分时实现的，CPU与I/O设备，I/O设备与I/O设备能实现真正的并行\n\n#### 共享\n\n#### 虚拟\n\n#### 异步\n\n# 二、操作系统发展历程\n\n## 1.手工操作阶段\n\n人机速度矛盾\n\n## 2.批处理阶段\n\n（引入脱机输入输出技术）\n\n### (1)单道批处理系统\n\n资源利用不充分\n\n### (2)多道批处理系统\n\n宏观上并行，微观上串行，资源利用率高，无交互功能\n\n引入多道程序技术的前提：中断功能\n\n## 3.分时操作系统\n\n解决人机交互，不能应对突发紧急任务\n\n## 4.实时操作系统\n\n能够完成某些紧急任务，具有及时性和可靠性\n\n硬实时：绝对在规定时间内完成\n\n软实时：偶尔可以违反时间规定\n\n5.网络操作系统和分布式操作系统\n\n6.个人计算机操作系统\n","slug":"os第一章计算机系统概述","published":1,"updated":"2024-03-14T02:46:07.996Z","comments":1,"layout":"post","photos":[],"_id":"cltqmserf0009qcnj6div6e7x","content":"<h1 id=\"一、操作系统的基本概念\"><a href=\"#一、操作系统的基本概念\" class=\"headerlink\" title=\"一、操作系统的基本概念\"></a>一、操作系统的基本概念</h1><h2 id=\"1-OS功能\"><a href=\"#1-OS功能\" class=\"headerlink\" title=\"1.OS功能\"></a>1.OS功能</h2><h4 id=\"（1）计算机系统资源的管理者\"><a href=\"#（1）计算机系统资源的管理者\" class=\"headerlink\" title=\"（1）计算机系统资源的管理者\"></a>（1）计算机系统资源的管理者</h4><p>处理器管理，存储器管理，文件管理，I&#x2F;O管理</p>\n<blockquote>\n<p>[!IMPORTANT]</p>\n<h4 id=\"（2）向上层提供方便易用的服务\"><a href=\"#（2）向上层提供方便易用的服务\" class=\"headerlink\" title=\"（2）向上层提供方便易用的服务\"></a>（2）向上层提供方便易用的服务</h4><p>a.给普通用户：<strong>命令接口</strong>（联机命令接口，脱机命令接口），GUI图形接口 </p>\n<p>b.给程序员：程序接口—<strong>系统调用</strong></p>\n</blockquote>\n<h4 id=\"（3）扩展机器\"><a href=\"#（3）扩展机器\" class=\"headerlink\" title=\"（3）扩展机器\"></a>（3）扩展机器</h4><h2 id=\"2-OS特征\"><a href=\"#2-OS特征\" class=\"headerlink\" title=\"2.OS特征\"></a>2.OS特征</h2><h4 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h4><p>支持多道程序的单处理机中，OS的并发性是通过分时实现的，CPU与I&#x2F;O设备，I&#x2F;O设备与I&#x2F;O设备能实现真正的并行</p>\n<h4 id=\"共享\"><a href=\"#共享\" class=\"headerlink\" title=\"共享\"></a>共享</h4><h4 id=\"虚拟\"><a href=\"#虚拟\" class=\"headerlink\" title=\"虚拟\"></a>虚拟</h4><h4 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h4><h1 id=\"二、操作系统发展历程\"><a href=\"#二、操作系统发展历程\" class=\"headerlink\" title=\"二、操作系统发展历程\"></a>二、操作系统发展历程</h1><h2 id=\"1-手工操作阶段\"><a href=\"#1-手工操作阶段\" class=\"headerlink\" title=\"1.手工操作阶段\"></a>1.手工操作阶段</h2><p>人机速度矛盾</p>\n<h2 id=\"2-批处理阶段\"><a href=\"#2-批处理阶段\" class=\"headerlink\" title=\"2.批处理阶段\"></a>2.批处理阶段</h2><p>（引入脱机输入输出技术）</p>\n<h3 id=\"1-单道批处理系统\"><a href=\"#1-单道批处理系统\" class=\"headerlink\" title=\"(1)单道批处理系统\"></a>(1)单道批处理系统</h3><p>资源利用不充分</p>\n<h3 id=\"2-多道批处理系统\"><a href=\"#2-多道批处理系统\" class=\"headerlink\" title=\"(2)多道批处理系统\"></a>(2)多道批处理系统</h3><p>宏观上并行，微观上串行，资源利用率高，无交互功能</p>\n<p>引入多道程序技术的前提：中断功能</p>\n<h2 id=\"3-分时操作系统\"><a href=\"#3-分时操作系统\" class=\"headerlink\" title=\"3.分时操作系统\"></a>3.分时操作系统</h2><p>解决人机交互，不能应对突发紧急任务</p>\n<h2 id=\"4-实时操作系统\"><a href=\"#4-实时操作系统\" class=\"headerlink\" title=\"4.实时操作系统\"></a>4.实时操作系统</h2><p>能够完成某些紧急任务，具有及时性和可靠性</p>\n<p>硬实时：绝对在规定时间内完成</p>\n<p>软实时：偶尔可以违反时间规定</p>\n<p>5.网络操作系统和分布式操作系统</p>\n<p>6.个人计算机操作系统</p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"一、操作系统的基本概念\"><a href=\"#一、操作系统的基本概念\" class=\"headerlink\" title=\"一、操作系统的基本概念\"></a>一、操作系统的基本概念</h1><h2 id=\"1-OS功能\"><a href=\"#1-OS功能\" class=\"headerlink\" title=\"1.OS功能\"></a>1.OS功能</h2><h4 id=\"（1）计算机系统资源的管理者\"><a href=\"#（1）计算机系统资源的管理者\" class=\"headerlink\" title=\"（1）计算机系统资源的管理者\"></a>（1）计算机系统资源的管理者</h4><p>处理器管理，存储器管理，文件管理，I&#x2F;O管理</p>\n<blockquote>\n<p>[!IMPORTANT]</p>\n<h4 id=\"（2）向上层提供方便易用的服务\"><a href=\"#（2）向上层提供方便易用的服务\" class=\"headerlink\" title=\"（2）向上层提供方便易用的服务\"></a>（2）向上层提供方便易用的服务</h4><p>a.给普通用户：<strong>命令接口</strong>（联机命令接口，脱机命令接口），GUI图形接口 </p>\n<p>b.给程序员：程序接口—<strong>系统调用</strong></p>\n</blockquote>\n<h4 id=\"（3）扩展机器\"><a href=\"#（3）扩展机器\" class=\"headerlink\" title=\"（3）扩展机器\"></a>（3）扩展机器</h4><h2 id=\"2-OS特征\"><a href=\"#2-OS特征\" class=\"headerlink\" title=\"2.OS特征\"></a>2.OS特征</h2><h4 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h4><p>支持多道程序的单处理机中，OS的并发性是通过分时实现的，CPU与I&#x2F;O设备，I&#x2F;O设备与I&#x2F;O设备能实现真正的并行</p>\n<h4 id=\"共享\"><a href=\"#共享\" class=\"headerlink\" title=\"共享\"></a>共享</h4><h4 id=\"虚拟\"><a href=\"#虚拟\" class=\"headerlink\" title=\"虚拟\"></a>虚拟</h4><h4 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h4><h1 id=\"二、操作系统发展历程\"><a href=\"#二、操作系统发展历程\" class=\"headerlink\" title=\"二、操作系统发展历程\"></a>二、操作系统发展历程</h1><h2 id=\"1-手工操作阶段\"><a href=\"#1-手工操作阶段\" class=\"headerlink\" title=\"1.手工操作阶段\"></a>1.手工操作阶段</h2><p>人机速度矛盾</p>\n<h2 id=\"2-批处理阶段\"><a href=\"#2-批处理阶段\" class=\"headerlink\" title=\"2.批处理阶段\"></a>2.批处理阶段</h2><p>（引入脱机输入输出技术）</p>\n<h3 id=\"1-单道批处理系统\"><a href=\"#1-单道批处理系统\" class=\"headerlink\" title=\"(1)单道批处理系统\"></a>(1)单道批处理系统</h3><p>资源利用不充分</p>\n<h3 id=\"2-多道批处理系统\"><a href=\"#2-多道批处理系统\" class=\"headerlink\" title=\"(2)多道批处理系统\"></a>(2)多道批处理系统</h3><p>宏观上并行，微观上串行，资源利用率高，无交互功能</p>\n<p>引入多道程序技术的前提：中断功能</p>\n<h2 id=\"3-分时操作系统\"><a href=\"#3-分时操作系统\" class=\"headerlink\" title=\"3.分时操作系统\"></a>3.分时操作系统</h2><p>解决人机交互，不能应对突发紧急任务</p>\n<h2 id=\"4-实时操作系统\"><a href=\"#4-实时操作系统\" class=\"headerlink\" title=\"4.实时操作系统\"></a>4.实时操作系统</h2><p>能够完成某些紧急任务，具有及时性和可靠性</p>\n<p>硬实时：绝对在规定时间内完成</p>\n<p>软实时：偶尔可以违反时间规定</p>\n<p>5.网络操作系统和分布式操作系统</p>\n<p>6.个人计算机操作系统</p>\n"},{"title":"百句实战","date":"2024-01-28T10:02:42.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305617-bfeb35.jpg","description":null,"_content":"\n# 一、目录\n\n[TOC]\n\n# day1\n\n# day2\n\n# day3\n\n# day4\n\n**The phrase \"substance abuse\" `is` often used instead of \"drug abuse\" to make clear** `that` substance such as alcohol and tobacco `can` be just as harmfully misused as heroin and cocaine.\n\n![image-20240128180947316](assets/image-20240128180947316.png)\n\nphrase n.说法，措辞，话术，短语\n\nsubstance n.物质，实质，基础 \n\nsubstantial adj.重大的，实质性的\n\n![image-20240128181250011](assets/image-20240128181250011.png)\n\n中国在扶贫（poverty alleviation）上取得了实质性的进展。\n\ninstead of 以代替\n\nmake sth adj 使某物变得...  ->  make sth clear , make clear sth\n\nsuch as 诸如，像 \n\n alcohol n.酒精\n\ntobacco n.烟草\n\nmisuse v.误用，滥用\n\nheroin n.海洛因\n\ncocaine n.可卡因\n\n![image-20240128182125621](assets/image-20240128182125621.png)\n\n​\t\t\t\t\t\t像从照片里看到的一样美\n\n![image-20240128182849309](assets/image-20240128182849309.png)\n\n![image-20240128182901070](assets/image-20240128182901070.png)\n\n![image-20240128183158702](assets/image-20240128183158702.png)\n\n![](assets/image-20240128183339036.png)\n\n# day8\n\n*[The test of any democratic society] `lies` [not in]* `how` well it `can` control expression *[but in]* `whether` it `gives` freedom of thoughtand expression the widest possible latitude, `however` disputableor irritating the results `may` sometimes be.\n\n\n\n`语法点睛：出现在介词，冠词后面的词一般都是名词，而不是动词`\n\n**主句 : The test of any democratic society lies not in... but in...**\n\n初步翻译:任何一个民主社会的考验不在于...而在于\n\n\n\n**名从1 : how well it can control expression**\n\n`语法点睛: how+adi./ady.+主干型从句`\n\n`一般将how+adi./adv.置于谓语后或句尾来翻译理解`\nI don' t care **how old** you are.\n\nI don' t care **you are how old**\n\n it can control expression how well\n\n初步翻译：它能将表达控制的多好\n\n\n\n**名从2：whether it gives freedom of thought and expression the widest possible latitude**\n`语法点睛 : whether! if 导名从时翻译成“是否，放在从句谓语前`\n初步翻译:它是否给予思想和表达最宽泛的自由\n\n\n\n**修饰1. : however disputable or irritating the results maysometimes be.**\n\n`语法点睛 : however 引导状语从句时( 必然伴随adj./adv.) ，首先将however 改成 no matter how，再将 how+adj./adv. 后置即可`\n\n**no matter how** disputable or irritating the results may sometimes be\n\nno matter the results may sometimes be **how disputable or irritating**\n\n初步翻译: 无论结果有时可能多么的有争议或令人闹心\n\n\n\n整合翻译: 任何一个民主社会的考验不在于[它能将表达控制的多好]，而在于[它是否给予思想和表达最宽泛的自由] ，无论结果有时可能多么的有争议或令人闹心。\n\n润色：考验一个社会是否民主，重点并不在于它对于舆论的控制有多到位而在于它是否能给予思想和言论以最大限度的自由，无论这可能产生多么有争议或令人闹心的结果。\n\n\n\n**词汇、短语**\ntest n.考试，测试，测验，考验\ndemocratic adj.民主的\ndem=人民         demographic adj.人口的，人口学的 n.人口数据\n\nlie v.躺在;处于    过去式 :lay 过去分词 :lain\nlie v. 撒谎  过去式:lied 过去分词 : lied\n\nlie tt sb.对某人撒谎\nlie about sth 在某事上说谎\nexpression n.表情，表情包;表达  meme n.梗图 \n\ngive A B (双宾结构)给A B\nfreedom n.自由\n\nlatitude n.纬度->宽->选择的自由  altitude n.海拔高度\ndisputable adj.有争议的，有待商榷的irritating adj.恼人的，气人的，闹心的\n\n# day9\n\n`Though` some of us `have` known for many, many years `that` the freedoms under the First Amendment `are` not totally unlimited, I `think`  `(that)`  it `is` perhaps the case `that` some people associated withthe company `have` only recently come to realize this.\n\n\n\n**主句: I think (that)... it is perhaps the case**\n\n初步翻译:我认为当前情况可能是it\n\n`语法点睛:只有this能指代前文某句话所述的事，it无此作用`\n无具体指代对象的it搭配that一起出现时，常涉及形式主语、形式宾语、强调句等结构,且形主、形宾出现的概率远高于强调句。\n\n\n\n**主语从句: that some people (that be) associated with the company haveonly recently come to realize this.**\n\n`语法:修饰性非谓语（定、状)优先尝试“加be 或去 ing，补 that\"`\n\n主句整合翻译:\n我认为当前情况可能是，一些与公司有关的人最近才意识到这件事。\n\n\n\n**修饰1: Though some of us have known for many, many years**\n\n`语法点睛:逗号一般没有实际语法作用，只标志语气的停顿或在一定程度上提示读者句子的结构。`\n\n整合翻译:虽然我们中的一些人已经知道很多很多年了\n\n\n\n**名从: that the freedoms under the First Amendment are nottotally unlimited,**\n初步翻译:宪法第一修正案下的自由并不是完全不受限制的\n\n整合翻译:\n虽然我们中的一些人已经知道很多很多年了,宪法第一修正案下的自由并不是完全不受限制的，我认为当前情况可能是，一些与公司有关的人最近才意识到这件事。\n\n润色：虽然我们大部分人很早就已经知道宪法第一修正案赋予的自由不是全无限制的，但我认为公司的一些相关人士最近才刚刚意识到这一点。\n\n\n\n**词汇、短语∶**\nperhaps adv.或许，可能\n\ncase n.案子;情况∶事例\nsth is the case=the case is sth 当前情况是sth \nassociate v.关联，联系\n\nassociate A with B将A与B关联起来\n\ncome to do sth 开始做某事\nrealize v.意识到;实现\n\nfreedom n.自由\nthe First Amendment n.（宪法）第一修正案   \n\nthe Constitution n.宪法\nunlimited adj.不受限制的\n\n\n\n# day10\n\nMuch of the language used to describe monetary policy, such as \"steering the economy to a soft landing\"or \"a touch on the brakes” , `makes` it sound like a precise science.\n\n\n\n**主句:Much of the language used to describe monetary policy makes it sound like a precise science.**\n\n`语法点睛:make sb do sth, let sb do sth 等结构由于平时生活中会大量应用,为了提高表达效率，都省略了to do的to`\n\n`语法点睛:use做谓语时的几个重要词组`\n\nbe used to do sth  被用来做某事…\n\nbe used to sth  适应、习惯了某件事\n\nused to do sth  过去常常，曾经做某事\n\nMuch of the language **(that be)** used to describe\n\n初步翻译:许多用于描述货币政策的语言使之听上去像是一门精确的科学。\n\n\n\n**修饰①: such as \"steering the economy to a soft landing\"or\"a touch on the brakes\"**\n`语法点睛∶结尾加了ing , ed的词，其原型一般都具备动词词性`\n\n整合翻译:许多用于描述货币政策的语言，诸如“引导经济软着陆”或“轻踩刹车”，使之听上去像是一门精确的科学。\n\n润色：许多用于描述货币政策的语言，诸如“引导经济软着陆”或“轻踩刹车”，都使它听上去像是一门精确的科学。\n\n`小技巧:合理利用语境和读者的主观能动性来避免歧义`\n\n\n\n**词汇、短语:**\nmonetary adj.货币的\nsound v.听上去adj.有说服力的→坚实可靠的\n\nprecise adj.精细的，准确的\nsteer v.引导，操控，控制→掌舵\nland n.陆地，土地  v.着陆，降落\n\nsoft landing n.软着陆\nhard landing n.硬着陆\n\n\n\n**通识拓展：**\n\n货币政策 monetary policy\n\n财政政策 fiscal policy\n\n# day11\n\nPerhaps it `is` humankind'’s long suffering at the mercy of flood and drought `that`  `makes`  the idea of forcing the waters to do our bidding so fascinating.\n\n\n\n**主句：Perhaps it is humankind'’s long suffering at the mercy of flood and drought**\n\n`语法点睛:it... that结构中，that从缺成分时才是强调句。`\n\n`句中的it is/was一般可翻译成“正是”，随所强调内容放回原句首尾。`\n\nIt was the PLA that fought day and night to help us resist theflood. (PLA=People's Liberation Army of China中国人民解放军)\n\n帮助我们日夜抗击洪水的正是中国人民解放军\n\n初步翻译:也许正是人类长期在洪水和干旱支配下所遭受的苦难\n\n\n\n**修饰1：that makes the idea of forcing the waters to do our bidding so fascinating.**\n\n初步翻译:使得迫使水流按我们的意志行事的想法变得如此迷人.\n\n整合翻译：也许正是人类长期在洪水和干旱支配下所遭受的苦难使得迫使水流按我们的意志行事的想法变得如此迷人。\n\n润色：或许正是洪水与干旱长久以来的蹂躏，使得强迫水流服从人类的意志这个想法异常迷人。\n\n润色终版：或许正是洪水与干旱长久以来的蹂躏，使得人类异常渴望支配水流。\n\n**词汇、短语∶**\nsuffer v.遭受，受苦\nsuffering n.折磨，苦难\nmercy n.仁慈，宽恕\nShow mercy! 行行好吧\n\nNo mercy!片甲不留\nat the mercy of 拜某人所赐﹔任凭某人摆布\n\nflood n.洪水\n\ndrought n.干旱\n\nforce n.力量;势力v.强迫，迫使force sb to do sth迫使某人做某事\n\nbid v.出价，竞标→想要获得→bidding n.请求，吩咐;出价，竞标\n\ndo one’ s bidding 按某人的意愿行事\n\nfascinating adj.迷人的\n\n# day12\n\nThe Aswan Dam, for example, `stopped` the Nile flooding `but` `deprived` Egypt of the fertile silt `that` floods `left`—all in return for a giant reservoir of disease `which` `is` now so full of silt `that` it barely `generates` electricity.\n\n**主句：The Aswan Dam, for example, stopped the Nile flooding but deprived Egypt of the fertile silt**\n\n初步翻译∶例如，阿斯旺大坝阻止了尼罗河的泛滥，但却使埃及失去了肥沃的泥沙\n\n\n\n**修饰1： silt that floods left**\n\n初步翻译：洪水留下的泥沙\n\n\n\n**修饰:2：all in return for a giant reservoir of disease**\n\n初步翻译:这一切换来的是一个充满疾病的巨大水库\n\n`语法点睛:A of B的三种常见译法`\n`1.B的A`\nthe plan of travellingthe prisoner of Azkaban\n\n`2.A的B(当A为量词时)`\n\nfive percent of students\na tremendous amount of work\n`3.有B的A，由B构成的A`\na man of taste\nthe chamber of secrets \n\n\n\n**修饰3：which is now so full of silt that it barely generates electricity**\n\n`语法点睛:so+adj.+that 与such+n.+that，表示“如此...以至于...\"`\n\nLisa is **so beautiful that** Johnson falls in love with her at first sight.\n\nLisa is **such a beautiful girl that** Johnson cannot take his eyes off her.\n\n初步翻译:它现在满是泥沙，以至于几乎无法发电。\n`语法:定语从句【未必】修饰离它最近的名词!代词未必指代最近的名词!`\n\n\n\n整合翻译：例如，阿斯旺大坝阻止了尼罗河的泛滥，但却使埃及失去了洪水留下的肥沃的泥沙。这一切换来的是一个充满疾病的巨大水库,它现在满是泥沙，以至于几乎无法发电。\n润色：例如，阿斯旺大坝止住了尼罗河的泛滥，但也使埃及丧失了洪水带来的肥沃淤泥。这一切最终换来的是一座充满病菌的巨大水库,那里如今满是泥沙，几乎无法发电。\n\n**词汇、短语︰**\n\ndam n.大坝\ndeprive v.剥夺，使失去\n\ndeprive A of B使A失去B，剥夺A的B\n\nfertile adj.肥沃的，富饶的\nfertilizer\nsilt n.（沉积的）泥沙\nin return for B 作为B的回报;为了换取B\nin return 作为回报\nThey give me money in return for my service.\nThey give me money. In return, I work.\nall for sth 全是为了...\nall for nothing徒劳无功\ngiant adj.巨大的 n.巨人\ntech giant科技巨头\nreservoir n.水库\n\nbarely adv.几乎不~hardly\nelectricity n.电力 \n\nEV= electric vehicle 电动车\n\n# day16\n\nThe true enemies of science, argues Paul Ehrlich of StanfordUniversity, a pioneer of environmental studies, are those whoquestion the evidence supporting global warming, the\ndepletion of the ozone layer and other consequences ofindustrial growth.\n\n# day18\n\nThe complementary coastlines and certain geological features `that` `seem` to span the ocean `are` reminders of `where` the two continents `were` once joined.\n\n**主句：The complementary coastlines and certain geological features  are reminders of**\n\n初步翻译:互补的海岸线和某些地质特征是….的提示物\n\n\n\n**名从：where the two continents were once joined**\n\n`语法点睛:5W1H类名从引导词可转换成“名词+定语从句”理解`\n\nwhere = the place that\n\nwhen = the time that\n\nwhat = the thing that\n\nwho = the person that\n\nwhy = the reason that\n\nhow = the way that(不带adj./adv.尾巴)\n\n初步翻译：两块大陆曾经相连的地方\n\n\n\n**geological features that seem to span the ocean**\n\n初步翻译：似乎跨越海洋的地理特征\n\n\n\n整合翻译:互补的海岸线和某些似乎横跨海洋的地质特征，是【两块大陆曾经相连的地方】的提示物。\n润色：*大洋两侧遥相呼应的海岸线*和某些相似的地质特征提示着我们，两块大陆曾**在此**相连。\n\n我的翻译：互补的海岸线和某种似乎跨越了海洋的地理特征是两块大陆第一次连接的提示\n\n（where没翻译出来，were once joined翻译错了）\n\n\n\n**词汇、短语**\ncomplementary adj.互补的\n\ncoastline n.海岸线\ncertain adj.特定的;某些\n\nfeature n.特点，特色\n\nreminder n.提示物，提示\n\ncontinent n.大陆join v.连接，结合\n\nspan v.跨越n.宽度\n\n# day19\n\nIt `is` not possible to determine `whether` both continents `are` moving in opposite directions or `whether` one continent `is` stationary `and` the other `is` drifting away from it.\n\n**主句：It is not possible to determine whether or whether** \n\n`语法点睛:whether... or whether.… 名从结构的两种翻译`\n\n1.Whether Johnson left Lisa or whether Lisa left Johnson)is still unknown.\n到底是张三离开了李四，还是李四离开了张三,目前仍未可知。\n当两个whether从句描述的可能性互斥时，翻译为“到底是.….，还是.….”\n\n2.Whether Johnson is a human being or whether Johnson ishandsome is still unknown.\n张三是否是人，以及张三是不是很英俊，目前仍未可知。\n当两个whether从句内容没有明显的互斥时，翻译为“是否..….，以及是否..”\n\n初步翻译：我们无法确定whether...or whether...\n\n\n\n**名从1：whether both continents are moving in opposite directions** \n\n**名从2： whether one continent is stationary and the other is drifting away from it.**\n\n初步翻译:到底是两块大陆正朝相反的方向移动，还是一块大陆是静止的，而另一块大陆正在飘离它。\n\n`语法点睛:it... to dd型【形式主语结构】的动作发出者一般是“我，我们”。本质是因为to do非谓语的动作发出者只能是其所处主句的主语或“我,我们”。`\n\n整合翻译:我们无法确定到底是两块大陆正朝相反的方向移动，还是一块大陆是静止的，而另一块大陆正在飘离它。\n\n\n\n我的翻译：不可能去决定几块大陆是否是朝向相反的方向移动还是一块大陆是固定的，而其他的大陆正在逐渐远离它\n\n\n\n**词汇、短语：**\n\nopposite adj.相反的\n\ndirection n.方向\n\ndirector n.导演，总监\n\nstationary adj.静止的\n\ndrift v.漂移\n","source":"_posts/百句实战.md","raw":"---\ntitle: 百句实战\ndate: 2024-01-28 18:02:42\ntags: 英语\ncategories: 英语\ncover: https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305617-bfeb35.jpg\ndescription:\n---\n\n# 一、目录\n\n[TOC]\n\n# day1\n\n# day2\n\n# day3\n\n# day4\n\n**The phrase \"substance abuse\" `is` often used instead of \"drug abuse\" to make clear** `that` substance such as alcohol and tobacco `can` be just as harmfully misused as heroin and cocaine.\n\n![image-20240128180947316](assets/image-20240128180947316.png)\n\nphrase n.说法，措辞，话术，短语\n\nsubstance n.物质，实质，基础 \n\nsubstantial adj.重大的，实质性的\n\n![image-20240128181250011](assets/image-20240128181250011.png)\n\n中国在扶贫（poverty alleviation）上取得了实质性的进展。\n\ninstead of 以代替\n\nmake sth adj 使某物变得...  ->  make sth clear , make clear sth\n\nsuch as 诸如，像 \n\n alcohol n.酒精\n\ntobacco n.烟草\n\nmisuse v.误用，滥用\n\nheroin n.海洛因\n\ncocaine n.可卡因\n\n![image-20240128182125621](assets/image-20240128182125621.png)\n\n​\t\t\t\t\t\t像从照片里看到的一样美\n\n![image-20240128182849309](assets/image-20240128182849309.png)\n\n![image-20240128182901070](assets/image-20240128182901070.png)\n\n![image-20240128183158702](assets/image-20240128183158702.png)\n\n![](assets/image-20240128183339036.png)\n\n# day8\n\n*[The test of any democratic society] `lies` [not in]* `how` well it `can` control expression *[but in]* `whether` it `gives` freedom of thoughtand expression the widest possible latitude, `however` disputableor irritating the results `may` sometimes be.\n\n\n\n`语法点睛：出现在介词，冠词后面的词一般都是名词，而不是动词`\n\n**主句 : The test of any democratic society lies not in... but in...**\n\n初步翻译:任何一个民主社会的考验不在于...而在于\n\n\n\n**名从1 : how well it can control expression**\n\n`语法点睛: how+adi./ady.+主干型从句`\n\n`一般将how+adi./adv.置于谓语后或句尾来翻译理解`\nI don' t care **how old** you are.\n\nI don' t care **you are how old**\n\n it can control expression how well\n\n初步翻译：它能将表达控制的多好\n\n\n\n**名从2：whether it gives freedom of thought and expression the widest possible latitude**\n`语法点睛 : whether! if 导名从时翻译成“是否，放在从句谓语前`\n初步翻译:它是否给予思想和表达最宽泛的自由\n\n\n\n**修饰1. : however disputable or irritating the results maysometimes be.**\n\n`语法点睛 : however 引导状语从句时( 必然伴随adj./adv.) ，首先将however 改成 no matter how，再将 how+adj./adv. 后置即可`\n\n**no matter how** disputable or irritating the results may sometimes be\n\nno matter the results may sometimes be **how disputable or irritating**\n\n初步翻译: 无论结果有时可能多么的有争议或令人闹心\n\n\n\n整合翻译: 任何一个民主社会的考验不在于[它能将表达控制的多好]，而在于[它是否给予思想和表达最宽泛的自由] ，无论结果有时可能多么的有争议或令人闹心。\n\n润色：考验一个社会是否民主，重点并不在于它对于舆论的控制有多到位而在于它是否能给予思想和言论以最大限度的自由，无论这可能产生多么有争议或令人闹心的结果。\n\n\n\n**词汇、短语**\ntest n.考试，测试，测验，考验\ndemocratic adj.民主的\ndem=人民         demographic adj.人口的，人口学的 n.人口数据\n\nlie v.躺在;处于    过去式 :lay 过去分词 :lain\nlie v. 撒谎  过去式:lied 过去分词 : lied\n\nlie tt sb.对某人撒谎\nlie about sth 在某事上说谎\nexpression n.表情，表情包;表达  meme n.梗图 \n\ngive A B (双宾结构)给A B\nfreedom n.自由\n\nlatitude n.纬度->宽->选择的自由  altitude n.海拔高度\ndisputable adj.有争议的，有待商榷的irritating adj.恼人的，气人的，闹心的\n\n# day9\n\n`Though` some of us `have` known for many, many years `that` the freedoms under the First Amendment `are` not totally unlimited, I `think`  `(that)`  it `is` perhaps the case `that` some people associated withthe company `have` only recently come to realize this.\n\n\n\n**主句: I think (that)... it is perhaps the case**\n\n初步翻译:我认为当前情况可能是it\n\n`语法点睛:只有this能指代前文某句话所述的事，it无此作用`\n无具体指代对象的it搭配that一起出现时，常涉及形式主语、形式宾语、强调句等结构,且形主、形宾出现的概率远高于强调句。\n\n\n\n**主语从句: that some people (that be) associated with the company haveonly recently come to realize this.**\n\n`语法:修饰性非谓语（定、状)优先尝试“加be 或去 ing，补 that\"`\n\n主句整合翻译:\n我认为当前情况可能是，一些与公司有关的人最近才意识到这件事。\n\n\n\n**修饰1: Though some of us have known for many, many years**\n\n`语法点睛:逗号一般没有实际语法作用，只标志语气的停顿或在一定程度上提示读者句子的结构。`\n\n整合翻译:虽然我们中的一些人已经知道很多很多年了\n\n\n\n**名从: that the freedoms under the First Amendment are nottotally unlimited,**\n初步翻译:宪法第一修正案下的自由并不是完全不受限制的\n\n整合翻译:\n虽然我们中的一些人已经知道很多很多年了,宪法第一修正案下的自由并不是完全不受限制的，我认为当前情况可能是，一些与公司有关的人最近才意识到这件事。\n\n润色：虽然我们大部分人很早就已经知道宪法第一修正案赋予的自由不是全无限制的，但我认为公司的一些相关人士最近才刚刚意识到这一点。\n\n\n\n**词汇、短语∶**\nperhaps adv.或许，可能\n\ncase n.案子;情况∶事例\nsth is the case=the case is sth 当前情况是sth \nassociate v.关联，联系\n\nassociate A with B将A与B关联起来\n\ncome to do sth 开始做某事\nrealize v.意识到;实现\n\nfreedom n.自由\nthe First Amendment n.（宪法）第一修正案   \n\nthe Constitution n.宪法\nunlimited adj.不受限制的\n\n\n\n# day10\n\nMuch of the language used to describe monetary policy, such as \"steering the economy to a soft landing\"or \"a touch on the brakes” , `makes` it sound like a precise science.\n\n\n\n**主句:Much of the language used to describe monetary policy makes it sound like a precise science.**\n\n`语法点睛:make sb do sth, let sb do sth 等结构由于平时生活中会大量应用,为了提高表达效率，都省略了to do的to`\n\n`语法点睛:use做谓语时的几个重要词组`\n\nbe used to do sth  被用来做某事…\n\nbe used to sth  适应、习惯了某件事\n\nused to do sth  过去常常，曾经做某事\n\nMuch of the language **(that be)** used to describe\n\n初步翻译:许多用于描述货币政策的语言使之听上去像是一门精确的科学。\n\n\n\n**修饰①: such as \"steering the economy to a soft landing\"or\"a touch on the brakes\"**\n`语法点睛∶结尾加了ing , ed的词，其原型一般都具备动词词性`\n\n整合翻译:许多用于描述货币政策的语言，诸如“引导经济软着陆”或“轻踩刹车”，使之听上去像是一门精确的科学。\n\n润色：许多用于描述货币政策的语言，诸如“引导经济软着陆”或“轻踩刹车”，都使它听上去像是一门精确的科学。\n\n`小技巧:合理利用语境和读者的主观能动性来避免歧义`\n\n\n\n**词汇、短语:**\nmonetary adj.货币的\nsound v.听上去adj.有说服力的→坚实可靠的\n\nprecise adj.精细的，准确的\nsteer v.引导，操控，控制→掌舵\nland n.陆地，土地  v.着陆，降落\n\nsoft landing n.软着陆\nhard landing n.硬着陆\n\n\n\n**通识拓展：**\n\n货币政策 monetary policy\n\n财政政策 fiscal policy\n\n# day11\n\nPerhaps it `is` humankind'’s long suffering at the mercy of flood and drought `that`  `makes`  the idea of forcing the waters to do our bidding so fascinating.\n\n\n\n**主句：Perhaps it is humankind'’s long suffering at the mercy of flood and drought**\n\n`语法点睛:it... that结构中，that从缺成分时才是强调句。`\n\n`句中的it is/was一般可翻译成“正是”，随所强调内容放回原句首尾。`\n\nIt was the PLA that fought day and night to help us resist theflood. (PLA=People's Liberation Army of China中国人民解放军)\n\n帮助我们日夜抗击洪水的正是中国人民解放军\n\n初步翻译:也许正是人类长期在洪水和干旱支配下所遭受的苦难\n\n\n\n**修饰1：that makes the idea of forcing the waters to do our bidding so fascinating.**\n\n初步翻译:使得迫使水流按我们的意志行事的想法变得如此迷人.\n\n整合翻译：也许正是人类长期在洪水和干旱支配下所遭受的苦难使得迫使水流按我们的意志行事的想法变得如此迷人。\n\n润色：或许正是洪水与干旱长久以来的蹂躏，使得强迫水流服从人类的意志这个想法异常迷人。\n\n润色终版：或许正是洪水与干旱长久以来的蹂躏，使得人类异常渴望支配水流。\n\n**词汇、短语∶**\nsuffer v.遭受，受苦\nsuffering n.折磨，苦难\nmercy n.仁慈，宽恕\nShow mercy! 行行好吧\n\nNo mercy!片甲不留\nat the mercy of 拜某人所赐﹔任凭某人摆布\n\nflood n.洪水\n\ndrought n.干旱\n\nforce n.力量;势力v.强迫，迫使force sb to do sth迫使某人做某事\n\nbid v.出价，竞标→想要获得→bidding n.请求，吩咐;出价，竞标\n\ndo one’ s bidding 按某人的意愿行事\n\nfascinating adj.迷人的\n\n# day12\n\nThe Aswan Dam, for example, `stopped` the Nile flooding `but` `deprived` Egypt of the fertile silt `that` floods `left`—all in return for a giant reservoir of disease `which` `is` now so full of silt `that` it barely `generates` electricity.\n\n**主句：The Aswan Dam, for example, stopped the Nile flooding but deprived Egypt of the fertile silt**\n\n初步翻译∶例如，阿斯旺大坝阻止了尼罗河的泛滥，但却使埃及失去了肥沃的泥沙\n\n\n\n**修饰1： silt that floods left**\n\n初步翻译：洪水留下的泥沙\n\n\n\n**修饰:2：all in return for a giant reservoir of disease**\n\n初步翻译:这一切换来的是一个充满疾病的巨大水库\n\n`语法点睛:A of B的三种常见译法`\n`1.B的A`\nthe plan of travellingthe prisoner of Azkaban\n\n`2.A的B(当A为量词时)`\n\nfive percent of students\na tremendous amount of work\n`3.有B的A，由B构成的A`\na man of taste\nthe chamber of secrets \n\n\n\n**修饰3：which is now so full of silt that it barely generates electricity**\n\n`语法点睛:so+adj.+that 与such+n.+that，表示“如此...以至于...\"`\n\nLisa is **so beautiful that** Johnson falls in love with her at first sight.\n\nLisa is **such a beautiful girl that** Johnson cannot take his eyes off her.\n\n初步翻译:它现在满是泥沙，以至于几乎无法发电。\n`语法:定语从句【未必】修饰离它最近的名词!代词未必指代最近的名词!`\n\n\n\n整合翻译：例如，阿斯旺大坝阻止了尼罗河的泛滥，但却使埃及失去了洪水留下的肥沃的泥沙。这一切换来的是一个充满疾病的巨大水库,它现在满是泥沙，以至于几乎无法发电。\n润色：例如，阿斯旺大坝止住了尼罗河的泛滥，但也使埃及丧失了洪水带来的肥沃淤泥。这一切最终换来的是一座充满病菌的巨大水库,那里如今满是泥沙，几乎无法发电。\n\n**词汇、短语︰**\n\ndam n.大坝\ndeprive v.剥夺，使失去\n\ndeprive A of B使A失去B，剥夺A的B\n\nfertile adj.肥沃的，富饶的\nfertilizer\nsilt n.（沉积的）泥沙\nin return for B 作为B的回报;为了换取B\nin return 作为回报\nThey give me money in return for my service.\nThey give me money. In return, I work.\nall for sth 全是为了...\nall for nothing徒劳无功\ngiant adj.巨大的 n.巨人\ntech giant科技巨头\nreservoir n.水库\n\nbarely adv.几乎不~hardly\nelectricity n.电力 \n\nEV= electric vehicle 电动车\n\n# day16\n\nThe true enemies of science, argues Paul Ehrlich of StanfordUniversity, a pioneer of environmental studies, are those whoquestion the evidence supporting global warming, the\ndepletion of the ozone layer and other consequences ofindustrial growth.\n\n# day18\n\nThe complementary coastlines and certain geological features `that` `seem` to span the ocean `are` reminders of `where` the two continents `were` once joined.\n\n**主句：The complementary coastlines and certain geological features  are reminders of**\n\n初步翻译:互补的海岸线和某些地质特征是….的提示物\n\n\n\n**名从：where the two continents were once joined**\n\n`语法点睛:5W1H类名从引导词可转换成“名词+定语从句”理解`\n\nwhere = the place that\n\nwhen = the time that\n\nwhat = the thing that\n\nwho = the person that\n\nwhy = the reason that\n\nhow = the way that(不带adj./adv.尾巴)\n\n初步翻译：两块大陆曾经相连的地方\n\n\n\n**geological features that seem to span the ocean**\n\n初步翻译：似乎跨越海洋的地理特征\n\n\n\n整合翻译:互补的海岸线和某些似乎横跨海洋的地质特征，是【两块大陆曾经相连的地方】的提示物。\n润色：*大洋两侧遥相呼应的海岸线*和某些相似的地质特征提示着我们，两块大陆曾**在此**相连。\n\n我的翻译：互补的海岸线和某种似乎跨越了海洋的地理特征是两块大陆第一次连接的提示\n\n（where没翻译出来，were once joined翻译错了）\n\n\n\n**词汇、短语**\ncomplementary adj.互补的\n\ncoastline n.海岸线\ncertain adj.特定的;某些\n\nfeature n.特点，特色\n\nreminder n.提示物，提示\n\ncontinent n.大陆join v.连接，结合\n\nspan v.跨越n.宽度\n\n# day19\n\nIt `is` not possible to determine `whether` both continents `are` moving in opposite directions or `whether` one continent `is` stationary `and` the other `is` drifting away from it.\n\n**主句：It is not possible to determine whether or whether** \n\n`语法点睛:whether... or whether.… 名从结构的两种翻译`\n\n1.Whether Johnson left Lisa or whether Lisa left Johnson)is still unknown.\n到底是张三离开了李四，还是李四离开了张三,目前仍未可知。\n当两个whether从句描述的可能性互斥时，翻译为“到底是.….，还是.….”\n\n2.Whether Johnson is a human being or whether Johnson ishandsome is still unknown.\n张三是否是人，以及张三是不是很英俊，目前仍未可知。\n当两个whether从句内容没有明显的互斥时，翻译为“是否..….，以及是否..”\n\n初步翻译：我们无法确定whether...or whether...\n\n\n\n**名从1：whether both continents are moving in opposite directions** \n\n**名从2： whether one continent is stationary and the other is drifting away from it.**\n\n初步翻译:到底是两块大陆正朝相反的方向移动，还是一块大陆是静止的，而另一块大陆正在飘离它。\n\n`语法点睛:it... to dd型【形式主语结构】的动作发出者一般是“我，我们”。本质是因为to do非谓语的动作发出者只能是其所处主句的主语或“我,我们”。`\n\n整合翻译:我们无法确定到底是两块大陆正朝相反的方向移动，还是一块大陆是静止的，而另一块大陆正在飘离它。\n\n\n\n我的翻译：不可能去决定几块大陆是否是朝向相反的方向移动还是一块大陆是固定的，而其他的大陆正在逐渐远离它\n\n\n\n**词汇、短语：**\n\nopposite adj.相反的\n\ndirection n.方向\n\ndirector n.导演，总监\n\nstationary adj.静止的\n\ndrift v.漂移\n","slug":"百句实战","published":1,"updated":"2024-03-08T03:27:13.407Z","comments":1,"layout":"post","photos":[],"_id":"cltqmserg000bqcnjasfdh0go","content":"<h1 id=\"一、目录\"><a href=\"#一、目录\" class=\"headerlink\" title=\"一、目录\"></a>一、目录</h1><p>[TOC]</p>\n<h1 id=\"day1\"><a href=\"#day1\" class=\"headerlink\" title=\"day1\"></a>day1</h1><h1 id=\"day2\"><a href=\"#day2\" class=\"headerlink\" title=\"day2\"></a>day2</h1><h1 id=\"day3\"><a href=\"#day3\" class=\"headerlink\" title=\"day3\"></a>day3</h1><h1 id=\"day4\"><a href=\"#day4\" class=\"headerlink\" title=\"day4\"></a>day4</h1><p><strong>The phrase “substance abuse” <code>is</code> often used instead of “drug abuse” to make clear</strong> <code>that</code> substance such as alcohol and tobacco <code>can</code> be just as harmfully misused as heroin and cocaine.</p>\n<p><img src=\"/assets/image-20240128180947316.png\" alt=\"image-20240128180947316\"></p>\n<p>phrase n.说法，措辞，话术，短语</p>\n<p>substance n.物质，实质，基础 </p>\n<p>substantial adj.重大的，实质性的</p>\n<p><img src=\"/assets/image-20240128181250011.png\" alt=\"image-20240128181250011\"></p>\n<p>中国在扶贫（poverty alleviation）上取得了实质性的进展。</p>\n<p>instead of 以代替</p>\n<p>make sth adj 使某物变得…  -&gt;  make sth clear , make clear sth</p>\n<p>such as 诸如，像 </p>\n<p> alcohol n.酒精</p>\n<p>tobacco n.烟草</p>\n<p>misuse v.误用，滥用</p>\n<p>heroin n.海洛因</p>\n<p>cocaine n.可卡因</p>\n<p><img src=\"/assets/image-20240128182125621.png\" alt=\"image-20240128182125621\"></p>\n<p>​\t\t\t\t\t\t像从照片里看到的一样美</p>\n<p><img src=\"/assets/image-20240128182849309.png\" alt=\"image-20240128182849309\"></p>\n<p><img src=\"/assets/image-20240128182901070.png\" alt=\"image-20240128182901070\"></p>\n<p><img src=\"/assets/image-20240128183158702.png\" alt=\"image-20240128183158702\"></p>\n<p><img src=\"/assets/image-20240128183339036.png\"></p>\n<h1 id=\"day8\"><a href=\"#day8\" class=\"headerlink\" title=\"day8\"></a>day8</h1><p><em>[The test of any democratic society] <code>lies</code> [not in]</em> <code>how</code> well it <code>can</code> control expression <em>[but in]</em> <code>whether</code> it <code>gives</code> freedom of thoughtand expression the widest possible latitude, <code>however</code> disputableor irritating the results <code>may</code> sometimes be.</p>\n<p><code>语法点睛：出现在介词，冠词后面的词一般都是名词，而不是动词</code></p>\n<p><strong>主句 : The test of any democratic society lies not in… but in…</strong></p>\n<p>初步翻译:任何一个民主社会的考验不在于…而在于</p>\n<p><strong>名从1 : how well it can control expression</strong></p>\n<p><code>语法点睛: how+adi./ady.+主干型从句</code></p>\n<p><code>一般将how+adi./adv.置于谓语后或句尾来翻译理解</code><br>I don’ t care <strong>how old</strong> you are.</p>\n<p>I don’ t care <strong>you are how old</strong></p>\n<p> it can control expression how well</p>\n<p>初步翻译：它能将表达控制的多好</p>\n<p><strong>名从2：whether it gives freedom of thought and expression the widest possible latitude</strong><br><code>语法点睛 : whether! if 导名从时翻译成“是否，放在从句谓语前</code><br>初步翻译:它是否给予思想和表达最宽泛的自由</p>\n<p><strong>修饰1. : however disputable or irritating the results maysometimes be.</strong></p>\n<p><code>语法点睛 : however 引导状语从句时( 必然伴随adj./adv.) ，首先将however 改成 no matter how，再将 how+adj./adv. 后置即可</code></p>\n<p><strong>no matter how</strong> disputable or irritating the results may sometimes be</p>\n<p>no matter the results may sometimes be <strong>how disputable or irritating</strong></p>\n<p>初步翻译: 无论结果有时可能多么的有争议或令人闹心</p>\n<p>整合翻译: 任何一个民主社会的考验不在于[它能将表达控制的多好]，而在于[它是否给予思想和表达最宽泛的自由] ，无论结果有时可能多么的有争议或令人闹心。</p>\n<p>润色：考验一个社会是否民主，重点并不在于它对于舆论的控制有多到位而在于它是否能给予思想和言论以最大限度的自由，无论这可能产生多么有争议或令人闹心的结果。</p>\n<p><strong>词汇、短语</strong><br>test n.考试，测试，测验，考验<br>democratic adj.民主的<br>dem&#x3D;人民         demographic adj.人口的，人口学的 n.人口数据</p>\n<p>lie v.躺在;处于    过去式 :lay 过去分词 :lain<br>lie v. 撒谎  过去式:lied 过去分词 : lied</p>\n<p>lie tt sb.对某人撒谎<br>lie about sth 在某事上说谎<br>expression n.表情，表情包;表达  meme n.梗图 </p>\n<p>give A B (双宾结构)给A B<br>freedom n.自由</p>\n<p>latitude n.纬度-&gt;宽-&gt;选择的自由  altitude n.海拔高度<br>disputable adj.有争议的，有待商榷的irritating adj.恼人的，气人的，闹心的</p>\n<h1 id=\"day9\"><a href=\"#day9\" class=\"headerlink\" title=\"day9\"></a>day9</h1><p><code>Though</code> some of us <code>have</code> known for many, many years <code>that</code> the freedoms under the First Amendment <code>are</code> not totally unlimited, I <code>think</code>  <code>(that)</code>  it <code>is</code> perhaps the case <code>that</code> some people associated withthe company <code>have</code> only recently come to realize this.</p>\n<p><strong>主句: I think (that)… it is perhaps the case</strong></p>\n<p>初步翻译:我认为当前情况可能是it</p>\n<p><code>语法点睛:只有this能指代前文某句话所述的事，it无此作用</code><br>无具体指代对象的it搭配that一起出现时，常涉及形式主语、形式宾语、强调句等结构,且形主、形宾出现的概率远高于强调句。</p>\n<p><strong>主语从句: that some people (that be) associated with the company haveonly recently come to realize this.</strong></p>\n<p><code>语法:修饰性非谓语（定、状)优先尝试“加be 或去 ing，补 that&quot;</code></p>\n<p>主句整合翻译:<br>我认为当前情况可能是，一些与公司有关的人最近才意识到这件事。</p>\n<p><strong>修饰1: Though some of us have known for many, many years</strong></p>\n<p><code>语法点睛:逗号一般没有实际语法作用，只标志语气的停顿或在一定程度上提示读者句子的结构。</code></p>\n<p>整合翻译:虽然我们中的一些人已经知道很多很多年了</p>\n<p><strong>名从: that the freedoms under the First Amendment are nottotally unlimited,</strong><br>初步翻译:宪法第一修正案下的自由并不是完全不受限制的</p>\n<p>整合翻译:<br>虽然我们中的一些人已经知道很多很多年了,宪法第一修正案下的自由并不是完全不受限制的，我认为当前情况可能是，一些与公司有关的人最近才意识到这件事。</p>\n<p>润色：虽然我们大部分人很早就已经知道宪法第一修正案赋予的自由不是全无限制的，但我认为公司的一些相关人士最近才刚刚意识到这一点。</p>\n<p><strong>词汇、短语∶</strong><br>perhaps adv.或许，可能</p>\n<p>case n.案子;情况∶事例<br>sth is the case&#x3D;the case is sth 当前情况是sth<br>associate v.关联，联系</p>\n<p>associate A with B将A与B关联起来</p>\n<p>come to do sth 开始做某事<br>realize v.意识到;实现</p>\n<p>freedom n.自由<br>the First Amendment n.（宪法）第一修正案   </p>\n<p>the Constitution n.宪法<br>unlimited adj.不受限制的</p>\n<h1 id=\"day10\"><a href=\"#day10\" class=\"headerlink\" title=\"day10\"></a>day10</h1><p>Much of the language used to describe monetary policy, such as “steering the economy to a soft landing”or “a touch on the brakes” , <code>makes</code> it sound like a precise science.</p>\n<p><strong>主句:Much of the language used to describe monetary policy makes it sound like a precise science.</strong></p>\n<p><code>语法点睛:make sb do sth, let sb do sth 等结构由于平时生活中会大量应用,为了提高表达效率，都省略了to do的to</code></p>\n<p><code>语法点睛:use做谓语时的几个重要词组</code></p>\n<p>be used to do sth  被用来做某事…</p>\n<p>be used to sth  适应、习惯了某件事</p>\n<p>used to do sth  过去常常，曾经做某事</p>\n<p>Much of the language <strong>(that be)</strong> used to describe</p>\n<p>初步翻译:许多用于描述货币政策的语言使之听上去像是一门精确的科学。</p>\n<p><strong>修饰①: such as “steering the economy to a soft landing”or”a touch on the brakes”</strong><br><code>语法点睛∶结尾加了ing , ed的词，其原型一般都具备动词词性</code></p>\n<p>整合翻译:许多用于描述货币政策的语言，诸如“引导经济软着陆”或“轻踩刹车”，使之听上去像是一门精确的科学。</p>\n<p>润色：许多用于描述货币政策的语言，诸如“引导经济软着陆”或“轻踩刹车”，都使它听上去像是一门精确的科学。</p>\n<p><code>小技巧:合理利用语境和读者的主观能动性来避免歧义</code></p>\n<p><strong>词汇、短语:</strong><br>monetary adj.货币的<br>sound v.听上去adj.有说服力的→坚实可靠的</p>\n<p>precise adj.精细的，准确的<br>steer v.引导，操控，控制→掌舵<br>land n.陆地，土地  v.着陆，降落</p>\n<p>soft landing n.软着陆<br>hard landing n.硬着陆</p>\n<p><strong>通识拓展：</strong></p>\n<p>货币政策 monetary policy</p>\n<p>财政政策 fiscal policy</p>\n<h1 id=\"day11\"><a href=\"#day11\" class=\"headerlink\" title=\"day11\"></a>day11</h1><p>Perhaps it <code>is</code> humankind’’s long suffering at the mercy of flood and drought <code>that</code>  <code>makes</code>  the idea of forcing the waters to do our bidding so fascinating.</p>\n<p><strong>主句：Perhaps it is humankind’’s long suffering at the mercy of flood and drought</strong></p>\n<p><code>语法点睛:it... that结构中，that从缺成分时才是强调句。</code></p>\n<p><code>句中的it is/was一般可翻译成“正是”，随所强调内容放回原句首尾。</code></p>\n<p>It was the PLA that fought day and night to help us resist theflood. (PLA&#x3D;People’s Liberation Army of China中国人民解放军)</p>\n<p>帮助我们日夜抗击洪水的正是中国人民解放军</p>\n<p>初步翻译:也许正是人类长期在洪水和干旱支配下所遭受的苦难</p>\n<p><strong>修饰1：that makes the idea of forcing the waters to do our bidding so fascinating.</strong></p>\n<p>初步翻译:使得迫使水流按我们的意志行事的想法变得如此迷人.</p>\n<p>整合翻译：也许正是人类长期在洪水和干旱支配下所遭受的苦难使得迫使水流按我们的意志行事的想法变得如此迷人。</p>\n<p>润色：或许正是洪水与干旱长久以来的蹂躏，使得强迫水流服从人类的意志这个想法异常迷人。</p>\n<p>润色终版：或许正是洪水与干旱长久以来的蹂躏，使得人类异常渴望支配水流。</p>\n<p><strong>词汇、短语∶</strong><br>suffer v.遭受，受苦<br>suffering n.折磨，苦难<br>mercy n.仁慈，宽恕<br>Show mercy! 行行好吧</p>\n<p>No mercy!片甲不留<br>at the mercy of 拜某人所赐﹔任凭某人摆布</p>\n<p>flood n.洪水</p>\n<p>drought n.干旱</p>\n<p>force n.力量;势力v.强迫，迫使force sb to do sth迫使某人做某事</p>\n<p>bid v.出价，竞标→想要获得→bidding n.请求，吩咐;出价，竞标</p>\n<p>do one’ s bidding 按某人的意愿行事</p>\n<p>fascinating adj.迷人的</p>\n<h1 id=\"day12\"><a href=\"#day12\" class=\"headerlink\" title=\"day12\"></a>day12</h1><p>The Aswan Dam, for example, <code>stopped</code> the Nile flooding <code>but</code> <code>deprived</code> Egypt of the fertile silt <code>that</code> floods <code>left</code>—all in return for a giant reservoir of disease <code>which</code> <code>is</code> now so full of silt <code>that</code> it barely <code>generates</code> electricity.</p>\n<p><strong>主句：The Aswan Dam, for example, stopped the Nile flooding but deprived Egypt of the fertile silt</strong></p>\n<p>初步翻译∶例如，阿斯旺大坝阻止了尼罗河的泛滥，但却使埃及失去了肥沃的泥沙</p>\n<p><strong>修饰1： silt that floods left</strong></p>\n<p>初步翻译：洪水留下的泥沙</p>\n<p><strong>修饰:2：all in return for a giant reservoir of disease</strong></p>\n<p>初步翻译:这一切换来的是一个充满疾病的巨大水库</p>\n<p><code>语法点睛:A of B的三种常见译法</code><br><code>1.B的A</code><br>the plan of travellingthe prisoner of Azkaban</p>\n<p><code>2.A的B(当A为量词时)</code></p>\n<p>five percent of students<br>a tremendous amount of work<br><code>3.有B的A，由B构成的A</code><br>a man of taste<br>the chamber of secrets </p>\n<p><strong>修饰3：which is now so full of silt that it barely generates electricity</strong></p>\n<p><code>语法点睛:so+adj.+that 与such+n.+that，表示“如此...以至于...&quot;</code></p>\n<p>Lisa is <strong>so beautiful that</strong> Johnson falls in love with her at first sight.</p>\n<p>Lisa is <strong>such a beautiful girl that</strong> Johnson cannot take his eyes off her.</p>\n<p>初步翻译:它现在满是泥沙，以至于几乎无法发电。<br><code>语法:定语从句【未必】修饰离它最近的名词!代词未必指代最近的名词!</code></p>\n<p>整合翻译：例如，阿斯旺大坝阻止了尼罗河的泛滥，但却使埃及失去了洪水留下的肥沃的泥沙。这一切换来的是一个充满疾病的巨大水库,它现在满是泥沙，以至于几乎无法发电。<br>润色：例如，阿斯旺大坝止住了尼罗河的泛滥，但也使埃及丧失了洪水带来的肥沃淤泥。这一切最终换来的是一座充满病菌的巨大水库,那里如今满是泥沙，几乎无法发电。</p>\n<p><strong>词汇、短语︰</strong></p>\n<p>dam n.大坝<br>deprive v.剥夺，使失去</p>\n<p>deprive A of B使A失去B，剥夺A的B</p>\n<p>fertile adj.肥沃的，富饶的<br>fertilizer<br>silt n.（沉积的）泥沙<br>in return for B 作为B的回报;为了换取B<br>in return 作为回报<br>They give me money in return for my service.<br>They give me money. In return, I work.<br>all for sth 全是为了…<br>all for nothing徒劳无功<br>giant adj.巨大的 n.巨人<br>tech giant科技巨头<br>reservoir n.水库</p>\n<p>barely adv.几乎不~hardly<br>electricity n.电力 </p>\n<p>EV&#x3D; electric vehicle 电动车</p>\n<h1 id=\"day16\"><a href=\"#day16\" class=\"headerlink\" title=\"day16\"></a>day16</h1><p>The true enemies of science, argues Paul Ehrlich of StanfordUniversity, a pioneer of environmental studies, are those whoquestion the evidence supporting global warming, the<br>depletion of the ozone layer and other consequences ofindustrial growth.</p>\n<h1 id=\"day18\"><a href=\"#day18\" class=\"headerlink\" title=\"day18\"></a>day18</h1><p>The complementary coastlines and certain geological features <code>that</code> <code>seem</code> to span the ocean <code>are</code> reminders of <code>where</code> the two continents <code>were</code> once joined.</p>\n<p><strong>主句：The complementary coastlines and certain geological features  are reminders of</strong></p>\n<p>初步翻译:互补的海岸线和某些地质特征是….的提示物</p>\n<p><strong>名从：where the two continents were once joined</strong></p>\n<p><code>语法点睛:5W1H类名从引导词可转换成“名词+定语从句”理解</code></p>\n<p>where &#x3D; the place that</p>\n<p>when &#x3D; the time that</p>\n<p>what &#x3D; the thing that</p>\n<p>who &#x3D; the person that</p>\n<p>why &#x3D; the reason that</p>\n<p>how &#x3D; the way that(不带adj.&#x2F;adv.尾巴)</p>\n<p>初步翻译：两块大陆曾经相连的地方</p>\n<p><strong>geological features that seem to span the ocean</strong></p>\n<p>初步翻译：似乎跨越海洋的地理特征</p>\n<p>整合翻译:互补的海岸线和某些似乎横跨海洋的地质特征，是【两块大陆曾经相连的地方】的提示物。<br>润色：<em>大洋两侧遥相呼应的海岸线</em>和某些相似的地质特征提示着我们，两块大陆曾<strong>在此</strong>相连。</p>\n<p>我的翻译：互补的海岸线和某种似乎跨越了海洋的地理特征是两块大陆第一次连接的提示</p>\n<p>（where没翻译出来，were once joined翻译错了）</p>\n<p><strong>词汇、短语</strong><br>complementary adj.互补的</p>\n<p>coastline n.海岸线<br>certain adj.特定的;某些</p>\n<p>feature n.特点，特色</p>\n<p>reminder n.提示物，提示</p>\n<p>continent n.大陆join v.连接，结合</p>\n<p>span v.跨越n.宽度</p>\n<h1 id=\"day19\"><a href=\"#day19\" class=\"headerlink\" title=\"day19\"></a>day19</h1><p>It <code>is</code> not possible to determine <code>whether</code> both continents <code>are</code> moving in opposite directions or <code>whether</code> one continent <code>is</code> stationary <code>and</code> the other <code>is</code> drifting away from it.</p>\n<p><strong>主句：It is not possible to determine whether or whether</strong> </p>\n<p><code>语法点睛:whether... or whether.… 名从结构的两种翻译</code></p>\n<p>1.Whether Johnson left Lisa or whether Lisa left Johnson)is still unknown.<br>到底是张三离开了李四，还是李四离开了张三,目前仍未可知。<br>当两个whether从句描述的可能性互斥时，翻译为“到底是.….，还是.….”</p>\n<p>2.Whether Johnson is a human being or whether Johnson ishandsome is still unknown.<br>张三是否是人，以及张三是不是很英俊，目前仍未可知。<br>当两个whether从句内容没有明显的互斥时，翻译为“是否..….，以及是否..”</p>\n<p>初步翻译：我们无法确定whether…or whether…</p>\n<p><strong>名从1：whether both continents are moving in opposite directions</strong> </p>\n<p><strong>名从2： whether one continent is stationary and the other is drifting away from it.</strong></p>\n<p>初步翻译:到底是两块大陆正朝相反的方向移动，还是一块大陆是静止的，而另一块大陆正在飘离它。</p>\n<p><code>语法点睛:it... to dd型【形式主语结构】的动作发出者一般是“我，我们”。本质是因为to do非谓语的动作发出者只能是其所处主句的主语或“我,我们”。</code></p>\n<p>整合翻译:我们无法确定到底是两块大陆正朝相反的方向移动，还是一块大陆是静止的，而另一块大陆正在飘离它。</p>\n<p>我的翻译：不可能去决定几块大陆是否是朝向相反的方向移动还是一块大陆是固定的，而其他的大陆正在逐渐远离它</p>\n<p><strong>词汇、短语：</strong></p>\n<p>opposite adj.相反的</p>\n<p>direction n.方向</p>\n<p>director n.导演，总监</p>\n<p>stationary adj.静止的</p>\n<p>drift v.漂移</p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"一、目录\"><a href=\"#一、目录\" class=\"headerlink\" title=\"一、目录\"></a>一、目录</h1><p>[TOC]</p>\n<h1 id=\"day1\"><a href=\"#day1\" class=\"headerlink\" title=\"day1\"></a>day1</h1><h1 id=\"day2\"><a href=\"#day2\" class=\"headerlink\" title=\"day2\"></a>day2</h1><h1 id=\"day3\"><a href=\"#day3\" class=\"headerlink\" title=\"day3\"></a>day3</h1><h1 id=\"day4\"><a href=\"#day4\" class=\"headerlink\" title=\"day4\"></a>day4</h1><p><strong>The phrase “substance abuse” <code>is</code> often used instead of “drug abuse” to make clear</strong> <code>that</code> substance such as alcohol and tobacco <code>can</code> be just as harmfully misused as heroin and cocaine.</p>\n<p><img src=\"/assets/image-20240128180947316.png\" alt=\"image-20240128180947316\"></p>\n<p>phrase n.说法，措辞，话术，短语</p>\n<p>substance n.物质，实质，基础 </p>\n<p>substantial adj.重大的，实质性的</p>\n<p><img src=\"/assets/image-20240128181250011.png\" alt=\"image-20240128181250011\"></p>\n<p>中国在扶贫（poverty alleviation）上取得了实质性的进展。</p>\n<p>instead of 以代替</p>\n<p>make sth adj 使某物变得…  -&gt;  make sth clear , make clear sth</p>\n<p>such as 诸如，像 </p>\n<p> alcohol n.酒精</p>\n<p>tobacco n.烟草</p>\n<p>misuse v.误用，滥用</p>\n<p>heroin n.海洛因</p>\n<p>cocaine n.可卡因</p>\n<p><img src=\"/assets/image-20240128182125621.png\" alt=\"image-20240128182125621\"></p>\n<p>​\t\t\t\t\t\t像从照片里看到的一样美</p>\n<p><img src=\"/assets/image-20240128182849309.png\" alt=\"image-20240128182849309\"></p>\n<p><img src=\"/assets/image-20240128182901070.png\" alt=\"image-20240128182901070\"></p>\n<p><img src=\"/assets/image-20240128183158702.png\" alt=\"image-20240128183158702\"></p>\n<p><img src=\"/assets/image-20240128183339036.png\"></p>\n<h1 id=\"day8\"><a href=\"#day8\" class=\"headerlink\" title=\"day8\"></a>day8</h1><p><em>[The test of any democratic society] <code>lies</code> [not in]</em> <code>how</code> well it <code>can</code> control expression <em>[but in]</em> <code>whether</code> it <code>gives</code> freedom of thoughtand expression the widest possible latitude, <code>however</code> disputableor irritating the results <code>may</code> sometimes be.</p>\n<p><code>语法点睛：出现在介词，冠词后面的词一般都是名词，而不是动词</code></p>\n<p><strong>主句 : The test of any democratic society lies not in… but in…</strong></p>\n<p>初步翻译:任何一个民主社会的考验不在于…而在于</p>\n<p><strong>名从1 : how well it can control expression</strong></p>\n<p><code>语法点睛: how+adi./ady.+主干型从句</code></p>\n<p><code>一般将how+adi./adv.置于谓语后或句尾来翻译理解</code><br>I don’ t care <strong>how old</strong> you are.</p>\n<p>I don’ t care <strong>you are how old</strong></p>\n<p> it can control expression how well</p>\n<p>初步翻译：它能将表达控制的多好</p>\n<p><strong>名从2：whether it gives freedom of thought and expression the widest possible latitude</strong><br><code>语法点睛 : whether! if 导名从时翻译成“是否，放在从句谓语前</code><br>初步翻译:它是否给予思想和表达最宽泛的自由</p>\n<p><strong>修饰1. : however disputable or irritating the results maysometimes be.</strong></p>\n<p><code>语法点睛 : however 引导状语从句时( 必然伴随adj./adv.) ，首先将however 改成 no matter how，再将 how+adj./adv. 后置即可</code></p>\n<p><strong>no matter how</strong> disputable or irritating the results may sometimes be</p>\n<p>no matter the results may sometimes be <strong>how disputable or irritating</strong></p>\n<p>初步翻译: 无论结果有时可能多么的有争议或令人闹心</p>\n<p>整合翻译: 任何一个民主社会的考验不在于[它能将表达控制的多好]，而在于[它是否给予思想和表达最宽泛的自由] ，无论结果有时可能多么的有争议或令人闹心。</p>\n<p>润色：考验一个社会是否民主，重点并不在于它对于舆论的控制有多到位而在于它是否能给予思想和言论以最大限度的自由，无论这可能产生多么有争议或令人闹心的结果。</p>\n<p><strong>词汇、短语</strong><br>test n.考试，测试，测验，考验<br>democratic adj.民主的<br>dem&#x3D;人民         demographic adj.人口的，人口学的 n.人口数据</p>\n<p>lie v.躺在;处于    过去式 :lay 过去分词 :lain<br>lie v. 撒谎  过去式:lied 过去分词 : lied</p>\n<p>lie tt sb.对某人撒谎<br>lie about sth 在某事上说谎<br>expression n.表情，表情包;表达  meme n.梗图 </p>\n<p>give A B (双宾结构)给A B<br>freedom n.自由</p>\n<p>latitude n.纬度-&gt;宽-&gt;选择的自由  altitude n.海拔高度<br>disputable adj.有争议的，有待商榷的irritating adj.恼人的，气人的，闹心的</p>\n<h1 id=\"day9\"><a href=\"#day9\" class=\"headerlink\" title=\"day9\"></a>day9</h1><p><code>Though</code> some of us <code>have</code> known for many, many years <code>that</code> the freedoms under the First Amendment <code>are</code> not totally unlimited, I <code>think</code>  <code>(that)</code>  it <code>is</code> perhaps the case <code>that</code> some people associated withthe company <code>have</code> only recently come to realize this.</p>\n<p><strong>主句: I think (that)… it is perhaps the case</strong></p>\n<p>初步翻译:我认为当前情况可能是it</p>\n<p><code>语法点睛:只有this能指代前文某句话所述的事，it无此作用</code><br>无具体指代对象的it搭配that一起出现时，常涉及形式主语、形式宾语、强调句等结构,且形主、形宾出现的概率远高于强调句。</p>\n<p><strong>主语从句: that some people (that be) associated with the company haveonly recently come to realize this.</strong></p>\n<p><code>语法:修饰性非谓语（定、状)优先尝试“加be 或去 ing，补 that&quot;</code></p>\n<p>主句整合翻译:<br>我认为当前情况可能是，一些与公司有关的人最近才意识到这件事。</p>\n<p><strong>修饰1: Though some of us have known for many, many years</strong></p>\n<p><code>语法点睛:逗号一般没有实际语法作用，只标志语气的停顿或在一定程度上提示读者句子的结构。</code></p>\n<p>整合翻译:虽然我们中的一些人已经知道很多很多年了</p>\n<p><strong>名从: that the freedoms under the First Amendment are nottotally unlimited,</strong><br>初步翻译:宪法第一修正案下的自由并不是完全不受限制的</p>\n<p>整合翻译:<br>虽然我们中的一些人已经知道很多很多年了,宪法第一修正案下的自由并不是完全不受限制的，我认为当前情况可能是，一些与公司有关的人最近才意识到这件事。</p>\n<p>润色：虽然我们大部分人很早就已经知道宪法第一修正案赋予的自由不是全无限制的，但我认为公司的一些相关人士最近才刚刚意识到这一点。</p>\n<p><strong>词汇、短语∶</strong><br>perhaps adv.或许，可能</p>\n<p>case n.案子;情况∶事例<br>sth is the case&#x3D;the case is sth 当前情况是sth<br>associate v.关联，联系</p>\n<p>associate A with B将A与B关联起来</p>\n<p>come to do sth 开始做某事<br>realize v.意识到;实现</p>\n<p>freedom n.自由<br>the First Amendment n.（宪法）第一修正案   </p>\n<p>the Constitution n.宪法<br>unlimited adj.不受限制的</p>\n<h1 id=\"day10\"><a href=\"#day10\" class=\"headerlink\" title=\"day10\"></a>day10</h1><p>Much of the language used to describe monetary policy, such as “steering the economy to a soft landing”or “a touch on the brakes” , <code>makes</code> it sound like a precise science.</p>\n<p><strong>主句:Much of the language used to describe monetary policy makes it sound like a precise science.</strong></p>\n<p><code>语法点睛:make sb do sth, let sb do sth 等结构由于平时生活中会大量应用,为了提高表达效率，都省略了to do的to</code></p>\n<p><code>语法点睛:use做谓语时的几个重要词组</code></p>\n<p>be used to do sth  被用来做某事…</p>\n<p>be used to sth  适应、习惯了某件事</p>\n<p>used to do sth  过去常常，曾经做某事</p>\n<p>Much of the language <strong>(that be)</strong> used to describe</p>\n<p>初步翻译:许多用于描述货币政策的语言使之听上去像是一门精确的科学。</p>\n<p><strong>修饰①: such as “steering the economy to a soft landing”or”a touch on the brakes”</strong><br><code>语法点睛∶结尾加了ing , ed的词，其原型一般都具备动词词性</code></p>\n<p>整合翻译:许多用于描述货币政策的语言，诸如“引导经济软着陆”或“轻踩刹车”，使之听上去像是一门精确的科学。</p>\n<p>润色：许多用于描述货币政策的语言，诸如“引导经济软着陆”或“轻踩刹车”，都使它听上去像是一门精确的科学。</p>\n<p><code>小技巧:合理利用语境和读者的主观能动性来避免歧义</code></p>\n<p><strong>词汇、短语:</strong><br>monetary adj.货币的<br>sound v.听上去adj.有说服力的→坚实可靠的</p>\n<p>precise adj.精细的，准确的<br>steer v.引导，操控，控制→掌舵<br>land n.陆地，土地  v.着陆，降落</p>\n<p>soft landing n.软着陆<br>hard landing n.硬着陆</p>\n<p><strong>通识拓展：</strong></p>\n<p>货币政策 monetary policy</p>\n<p>财政政策 fiscal policy</p>\n<h1 id=\"day11\"><a href=\"#day11\" class=\"headerlink\" title=\"day11\"></a>day11</h1><p>Perhaps it <code>is</code> humankind’’s long suffering at the mercy of flood and drought <code>that</code>  <code>makes</code>  the idea of forcing the waters to do our bidding so fascinating.</p>\n<p><strong>主句：Perhaps it is humankind’’s long suffering at the mercy of flood and drought</strong></p>\n<p><code>语法点睛:it... that结构中，that从缺成分时才是强调句。</code></p>\n<p><code>句中的it is/was一般可翻译成“正是”，随所强调内容放回原句首尾。</code></p>\n<p>It was the PLA that fought day and night to help us resist theflood. (PLA&#x3D;People’s Liberation Army of China中国人民解放军)</p>\n<p>帮助我们日夜抗击洪水的正是中国人民解放军</p>\n<p>初步翻译:也许正是人类长期在洪水和干旱支配下所遭受的苦难</p>\n<p><strong>修饰1：that makes the idea of forcing the waters to do our bidding so fascinating.</strong></p>\n<p>初步翻译:使得迫使水流按我们的意志行事的想法变得如此迷人.</p>\n<p>整合翻译：也许正是人类长期在洪水和干旱支配下所遭受的苦难使得迫使水流按我们的意志行事的想法变得如此迷人。</p>\n<p>润色：或许正是洪水与干旱长久以来的蹂躏，使得强迫水流服从人类的意志这个想法异常迷人。</p>\n<p>润色终版：或许正是洪水与干旱长久以来的蹂躏，使得人类异常渴望支配水流。</p>\n<p><strong>词汇、短语∶</strong><br>suffer v.遭受，受苦<br>suffering n.折磨，苦难<br>mercy n.仁慈，宽恕<br>Show mercy! 行行好吧</p>\n<p>No mercy!片甲不留<br>at the mercy of 拜某人所赐﹔任凭某人摆布</p>\n<p>flood n.洪水</p>\n<p>drought n.干旱</p>\n<p>force n.力量;势力v.强迫，迫使force sb to do sth迫使某人做某事</p>\n<p>bid v.出价，竞标→想要获得→bidding n.请求，吩咐;出价，竞标</p>\n<p>do one’ s bidding 按某人的意愿行事</p>\n<p>fascinating adj.迷人的</p>\n<h1 id=\"day12\"><a href=\"#day12\" class=\"headerlink\" title=\"day12\"></a>day12</h1><p>The Aswan Dam, for example, <code>stopped</code> the Nile flooding <code>but</code> <code>deprived</code> Egypt of the fertile silt <code>that</code> floods <code>left</code>—all in return for a giant reservoir of disease <code>which</code> <code>is</code> now so full of silt <code>that</code> it barely <code>generates</code> electricity.</p>\n<p><strong>主句：The Aswan Dam, for example, stopped the Nile flooding but deprived Egypt of the fertile silt</strong></p>\n<p>初步翻译∶例如，阿斯旺大坝阻止了尼罗河的泛滥，但却使埃及失去了肥沃的泥沙</p>\n<p><strong>修饰1： silt that floods left</strong></p>\n<p>初步翻译：洪水留下的泥沙</p>\n<p><strong>修饰:2：all in return for a giant reservoir of disease</strong></p>\n<p>初步翻译:这一切换来的是一个充满疾病的巨大水库</p>\n<p><code>语法点睛:A of B的三种常见译法</code><br><code>1.B的A</code><br>the plan of travellingthe prisoner of Azkaban</p>\n<p><code>2.A的B(当A为量词时)</code></p>\n<p>five percent of students<br>a tremendous amount of work<br><code>3.有B的A，由B构成的A</code><br>a man of taste<br>the chamber of secrets </p>\n<p><strong>修饰3：which is now so full of silt that it barely generates electricity</strong></p>\n<p><code>语法点睛:so+adj.+that 与such+n.+that，表示“如此...以至于...&quot;</code></p>\n<p>Lisa is <strong>so beautiful that</strong> Johnson falls in love with her at first sight.</p>\n<p>Lisa is <strong>such a beautiful girl that</strong> Johnson cannot take his eyes off her.</p>\n<p>初步翻译:它现在满是泥沙，以至于几乎无法发电。<br><code>语法:定语从句【未必】修饰离它最近的名词!代词未必指代最近的名词!</code></p>\n<p>整合翻译：例如，阿斯旺大坝阻止了尼罗河的泛滥，但却使埃及失去了洪水留下的肥沃的泥沙。这一切换来的是一个充满疾病的巨大水库,它现在满是泥沙，以至于几乎无法发电。<br>润色：例如，阿斯旺大坝止住了尼罗河的泛滥，但也使埃及丧失了洪水带来的肥沃淤泥。这一切最终换来的是一座充满病菌的巨大水库,那里如今满是泥沙，几乎无法发电。</p>\n<p><strong>词汇、短语︰</strong></p>\n<p>dam n.大坝<br>deprive v.剥夺，使失去</p>\n<p>deprive A of B使A失去B，剥夺A的B</p>\n<p>fertile adj.肥沃的，富饶的<br>fertilizer<br>silt n.（沉积的）泥沙<br>in return for B 作为B的回报;为了换取B<br>in return 作为回报<br>They give me money in return for my service.<br>They give me money. In return, I work.<br>all for sth 全是为了…<br>all for nothing徒劳无功<br>giant adj.巨大的 n.巨人<br>tech giant科技巨头<br>reservoir n.水库</p>\n<p>barely adv.几乎不~hardly<br>electricity n.电力 </p>\n<p>EV&#x3D; electric vehicle 电动车</p>\n<h1 id=\"day16\"><a href=\"#day16\" class=\"headerlink\" title=\"day16\"></a>day16</h1><p>The true enemies of science, argues Paul Ehrlich of StanfordUniversity, a pioneer of environmental studies, are those whoquestion the evidence supporting global warming, the<br>depletion of the ozone layer and other consequences ofindustrial growth.</p>\n<h1 id=\"day18\"><a href=\"#day18\" class=\"headerlink\" title=\"day18\"></a>day18</h1><p>The complementary coastlines and certain geological features <code>that</code> <code>seem</code> to span the ocean <code>are</code> reminders of <code>where</code> the two continents <code>were</code> once joined.</p>\n<p><strong>主句：The complementary coastlines and certain geological features  are reminders of</strong></p>\n<p>初步翻译:互补的海岸线和某些地质特征是….的提示物</p>\n<p><strong>名从：where the two continents were once joined</strong></p>\n<p><code>语法点睛:5W1H类名从引导词可转换成“名词+定语从句”理解</code></p>\n<p>where &#x3D; the place that</p>\n<p>when &#x3D; the time that</p>\n<p>what &#x3D; the thing that</p>\n<p>who &#x3D; the person that</p>\n<p>why &#x3D; the reason that</p>\n<p>how &#x3D; the way that(不带adj.&#x2F;adv.尾巴)</p>\n<p>初步翻译：两块大陆曾经相连的地方</p>\n<p><strong>geological features that seem to span the ocean</strong></p>\n<p>初步翻译：似乎跨越海洋的地理特征</p>\n<p>整合翻译:互补的海岸线和某些似乎横跨海洋的地质特征，是【两块大陆曾经相连的地方】的提示物。<br>润色：<em>大洋两侧遥相呼应的海岸线</em>和某些相似的地质特征提示着我们，两块大陆曾<strong>在此</strong>相连。</p>\n<p>我的翻译：互补的海岸线和某种似乎跨越了海洋的地理特征是两块大陆第一次连接的提示</p>\n<p>（where没翻译出来，were once joined翻译错了）</p>\n<p><strong>词汇、短语</strong><br>complementary adj.互补的</p>\n<p>coastline n.海岸线<br>certain adj.特定的;某些</p>\n<p>feature n.特点，特色</p>\n<p>reminder n.提示物，提示</p>\n<p>continent n.大陆join v.连接，结合</p>\n<p>span v.跨越n.宽度</p>\n<h1 id=\"day19\"><a href=\"#day19\" class=\"headerlink\" title=\"day19\"></a>day19</h1><p>It <code>is</code> not possible to determine <code>whether</code> both continents <code>are</code> moving in opposite directions or <code>whether</code> one continent <code>is</code> stationary <code>and</code> the other <code>is</code> drifting away from it.</p>\n<p><strong>主句：It is not possible to determine whether or whether</strong> </p>\n<p><code>语法点睛:whether... or whether.… 名从结构的两种翻译</code></p>\n<p>1.Whether Johnson left Lisa or whether Lisa left Johnson)is still unknown.<br>到底是张三离开了李四，还是李四离开了张三,目前仍未可知。<br>当两个whether从句描述的可能性互斥时，翻译为“到底是.….，还是.….”</p>\n<p>2.Whether Johnson is a human being or whether Johnson ishandsome is still unknown.<br>张三是否是人，以及张三是不是很英俊，目前仍未可知。<br>当两个whether从句内容没有明显的互斥时，翻译为“是否..….，以及是否..”</p>\n<p>初步翻译：我们无法确定whether…or whether…</p>\n<p><strong>名从1：whether both continents are moving in opposite directions</strong> </p>\n<p><strong>名从2： whether one continent is stationary and the other is drifting away from it.</strong></p>\n<p>初步翻译:到底是两块大陆正朝相反的方向移动，还是一块大陆是静止的，而另一块大陆正在飘离它。</p>\n<p><code>语法点睛:it... to dd型【形式主语结构】的动作发出者一般是“我，我们”。本质是因为to do非谓语的动作发出者只能是其所处主句的主语或“我,我们”。</code></p>\n<p>整合翻译:我们无法确定到底是两块大陆正朝相反的方向移动，还是一块大陆是静止的，而另一块大陆正在飘离它。</p>\n<p>我的翻译：不可能去决定几块大陆是否是朝向相反的方向移动还是一块大陆是固定的，而其他的大陆正在逐渐远离它</p>\n<p><strong>词汇、短语：</strong></p>\n<p>opposite adj.相反的</p>\n<p>direction n.方向</p>\n<p>director n.导演，总监</p>\n<p>stationary adj.静止的</p>\n<p>drift v.漂移</p>\n"},{"title":"第三章-栈和队列","date":"2024-02-03T03:33:45.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-02-03/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240203115132-ee629f.jpg","description":"栈的相关操作","_content":"\n# 一、栈\n\n#### 定义一个栈\n\n```c++\n#define MAXSIZE 50\ntypedef int ElemType;\ntypedef struct {\n    ElemType data[MAXSIZE];//存放栈中的元素\n    int top;//栈顶指针\n}SqStack;\n\n```\n\n#### 初始化栈\n\n```c++\nvoid InitStack(SqStack &S){\n    S.top=-1;//初始化栈顶指针\n}\n```\n\n#### 栈判空\n\n```c++\nbool StackEmpty(SqStack S){\n    if(S.top ==-1)\n        return true;//栈空\n    else\n        return false;//不空\n}\n```\n\n#### 进栈\n\n```c++\nbool push(SqStack &S, ElemType x){\n    if(S.top==MAXSIZE-1)\n        return false;\n    S.data[++S.top]=x;//S.top=S.top+1;S.data[S.top]=x;\n    return true;\n}\n```\n\n#### 出栈\n\n```c++\nbool pop(SqStack &S,ElemType &x){\n    if(S.top==-1)\n        return false;//栈满\n    x=S.data[S.top--];//x=S.data[S.top]; S.top--;  //保留被删除元素\n    return true;\n}\n```\n\n#### 共享栈\n\n栈数组【0，MAXSIZE-1】\n\n0号栈栈顶指针初始时top0=-1,1号栈栈顶指针初始时top1=MAXSIZE\n\n栈满条件：top0+1=top1；\n\n优点：节省存储空间，降低发生上溢的可能（只有在整个存储空间被占满时才发生上溢）\n\n#### 链栈\n\n```c++\ntypedef struct LinkNode{\n    ElemType data;\n    struct LinkNode *next;\n}*LiStatck;\n```\n\n# 二、队列\n","source":"_posts/第三章-栈.md","raw":"---\ntitle: 第三章-栈和队列\ndate: 2024-02-03 11:33:45\ntags: 数据结构\ncategories: 数据结构\ncover: https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-02-03/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240203115132-ee629f.jpg\ndescription: 栈的相关操作\n---\n\n# 一、栈\n\n#### 定义一个栈\n\n```c++\n#define MAXSIZE 50\ntypedef int ElemType;\ntypedef struct {\n    ElemType data[MAXSIZE];//存放栈中的元素\n    int top;//栈顶指针\n}SqStack;\n\n```\n\n#### 初始化栈\n\n```c++\nvoid InitStack(SqStack &S){\n    S.top=-1;//初始化栈顶指针\n}\n```\n\n#### 栈判空\n\n```c++\nbool StackEmpty(SqStack S){\n    if(S.top ==-1)\n        return true;//栈空\n    else\n        return false;//不空\n}\n```\n\n#### 进栈\n\n```c++\nbool push(SqStack &S, ElemType x){\n    if(S.top==MAXSIZE-1)\n        return false;\n    S.data[++S.top]=x;//S.top=S.top+1;S.data[S.top]=x;\n    return true;\n}\n```\n\n#### 出栈\n\n```c++\nbool pop(SqStack &S,ElemType &x){\n    if(S.top==-1)\n        return false;//栈满\n    x=S.data[S.top--];//x=S.data[S.top]; S.top--;  //保留被删除元素\n    return true;\n}\n```\n\n#### 共享栈\n\n栈数组【0，MAXSIZE-1】\n\n0号栈栈顶指针初始时top0=-1,1号栈栈顶指针初始时top1=MAXSIZE\n\n栈满条件：top0+1=top1；\n\n优点：节省存储空间，降低发生上溢的可能（只有在整个存储空间被占满时才发生上溢）\n\n#### 链栈\n\n```c++\ntypedef struct LinkNode{\n    ElemType data;\n    struct LinkNode *next;\n}*LiStatck;\n```\n\n# 二、队列\n","slug":"第三章-栈","published":1,"updated":"2024-02-04T03:30:35.739Z","comments":1,"layout":"post","photos":[],"_id":"cltqmserh000eqcnj0u8cen9u","content":"<h1 id=\"一、栈\"><a href=\"#一、栈\" class=\"headerlink\" title=\"一、栈\"></a>一、栈</h1><h4 id=\"定义一个栈\"><a href=\"#定义一个栈\" class=\"headerlink\" title=\"定义一个栈\"></a>定义一个栈</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 50</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MAXSIZE];<span class=\"comment\">//存放栈中的元素</span></span><br><span class=\"line\">    <span class=\"type\">int</span> top;<span class=\"comment\">//栈顶指针</span></span><br><span class=\"line\">&#125;SqStack;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化栈\"><a href=\"#初始化栈\" class=\"headerlink\" title=\"初始化栈\"></a>初始化栈</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitStack</span><span class=\"params\">(SqStack &amp;S)</span></span>&#123;</span><br><span class=\"line\">    S.top=<span class=\"number\">-1</span>;<span class=\"comment\">//初始化栈顶指针</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"栈判空\"><a href=\"#栈判空\" class=\"headerlink\" title=\"栈判空\"></a>栈判空</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">StackEmpty</span><span class=\"params\">(SqStack S)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top ==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">//栈空</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//不空</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进栈\"><a href=\"#进栈\" class=\"headerlink\" title=\"进栈\"></a>进栈</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">push</span><span class=\"params\">(SqStack &amp;S, ElemType x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top==MAXSIZE<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    S.data[++S.top]=x;<span class=\"comment\">//S.top=S.top+1;S.data[S.top]=x;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"出栈\"><a href=\"#出栈\" class=\"headerlink\" title=\"出栈\"></a>出栈</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">pop</span><span class=\"params\">(SqStack &amp;S,ElemType &amp;x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//栈满</span></span><br><span class=\"line\">    x=S.data[S.top--];<span class=\"comment\">//x=S.data[S.top]; S.top--;  //保留被删除元素</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"共享栈\"><a href=\"#共享栈\" class=\"headerlink\" title=\"共享栈\"></a>共享栈</h4><p>栈数组【0，MAXSIZE-1】</p>\n<p>0号栈栈顶指针初始时top0&#x3D;-1,1号栈栈顶指针初始时top1&#x3D;MAXSIZE</p>\n<p>栈满条件：top0+1&#x3D;top1；</p>\n<p>优点：节省存储空间，降低发生上溢的可能（只有在整个存储空间被占满时才发生上溢）</p>\n<h4 id=\"链栈\"><a href=\"#链栈\" class=\"headerlink\" title=\"链栈\"></a>链栈</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkNode</span>&#123;</span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkNode</span> *next;</span><br><span class=\"line\">&#125;*LiStatck;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二、队列\"><a href=\"#二、队列\" class=\"headerlink\" title=\"二、队列\"></a>二、队列</h1>","cover_type":"img","excerpt":"","more":"<h1 id=\"一、栈\"><a href=\"#一、栈\" class=\"headerlink\" title=\"一、栈\"></a>一、栈</h1><h4 id=\"定义一个栈\"><a href=\"#定义一个栈\" class=\"headerlink\" title=\"定义一个栈\"></a>定义一个栈</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 50</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MAXSIZE];<span class=\"comment\">//存放栈中的元素</span></span><br><span class=\"line\">    <span class=\"type\">int</span> top;<span class=\"comment\">//栈顶指针</span></span><br><span class=\"line\">&#125;SqStack;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化栈\"><a href=\"#初始化栈\" class=\"headerlink\" title=\"初始化栈\"></a>初始化栈</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitStack</span><span class=\"params\">(SqStack &amp;S)</span></span>&#123;</span><br><span class=\"line\">    S.top=<span class=\"number\">-1</span>;<span class=\"comment\">//初始化栈顶指针</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"栈判空\"><a href=\"#栈判空\" class=\"headerlink\" title=\"栈判空\"></a>栈判空</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">StackEmpty</span><span class=\"params\">(SqStack S)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top ==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">//栈空</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//不空</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进栈\"><a href=\"#进栈\" class=\"headerlink\" title=\"进栈\"></a>进栈</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">push</span><span class=\"params\">(SqStack &amp;S, ElemType x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top==MAXSIZE<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    S.data[++S.top]=x;<span class=\"comment\">//S.top=S.top+1;S.data[S.top]=x;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"出栈\"><a href=\"#出栈\" class=\"headerlink\" title=\"出栈\"></a>出栈</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">pop</span><span class=\"params\">(SqStack &amp;S,ElemType &amp;x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//栈满</span></span><br><span class=\"line\">    x=S.data[S.top--];<span class=\"comment\">//x=S.data[S.top]; S.top--;  //保留被删除元素</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"共享栈\"><a href=\"#共享栈\" class=\"headerlink\" title=\"共享栈\"></a>共享栈</h4><p>栈数组【0，MAXSIZE-1】</p>\n<p>0号栈栈顶指针初始时top0&#x3D;-1,1号栈栈顶指针初始时top1&#x3D;MAXSIZE</p>\n<p>栈满条件：top0+1&#x3D;top1；</p>\n<p>优点：节省存储空间，降低发生上溢的可能（只有在整个存储空间被占满时才发生上溢）</p>\n<h4 id=\"链栈\"><a href=\"#链栈\" class=\"headerlink\" title=\"链栈\"></a>链栈</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkNode</span>&#123;</span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkNode</span> *next;</span><br><span class=\"line\">&#125;*LiStatck;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二、队列\"><a href=\"#二、队列\" class=\"headerlink\" title=\"二、队列\"></a>二、队列</h1>"},{"title":"计组第一章计算机系统概述","date":"2024-02-19T08:45:56.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":null,"_content":"\n# 第一章计算机层次结构\n\n## 一、计算机硬件\n\n在计算机系统中，软件和硬件逻辑上是等效的\n\n### `1.冯诺依曼计算机：`\n\n（1）由五大部件组成\n\n（2）**存储程序**工作方式\n\n（3）指令和数据以同等地位存于存储器，可按地址寻访，计算机根据**指令执行的不同阶段**区分\n\n（4）指令和数据均用**二进制**表示\n\n（5）指令由**操作码**和地址码组成，\n\n（6）**运算器**为中心\n\n### 2.现代计算机\n\n以**存储器**为中心\n\n### 3.主存储器的构成\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313130030-68e0a9-0c0eb1.png)\n\n现代计算机MAR和MDR集成在CPU里\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313130248-812f19.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313130354-4deeaf.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131045-3c8d08.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131410-30f175.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131512-9e54df.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131549-a4e77b.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131659-ff618a.png)\n\n`PC=MAR`\n\n`IR=MDR`\n\n## 二、计算机软件\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313132916-115e1b.png)\n\n\n\n## 三、计算机系统层次结构\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313133318-d3b611.png)\n\n## `四、计算机系统的工作原理`\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313133831-644235.png)\n\n## `五、计算机性能指标`\n\nCPU执行时间=指令条数ln * CPI * 时钟周期（1/主频）\n","source":"_posts/第一章计算机系统概述.md","raw":"---\ntitle: 计组第一章计算机系统概述\ndate: 2024-02-19 16:45:56\ntags: 计组\ncategories: 计组\ncover:\ndescription:\n---\n\n# 第一章计算机层次结构\n\n## 一、计算机硬件\n\n在计算机系统中，软件和硬件逻辑上是等效的\n\n### `1.冯诺依曼计算机：`\n\n（1）由五大部件组成\n\n（2）**存储程序**工作方式\n\n（3）指令和数据以同等地位存于存储器，可按地址寻访，计算机根据**指令执行的不同阶段**区分\n\n（4）指令和数据均用**二进制**表示\n\n（5）指令由**操作码**和地址码组成，\n\n（6）**运算器**为中心\n\n### 2.现代计算机\n\n以**存储器**为中心\n\n### 3.主存储器的构成\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313130030-68e0a9-0c0eb1.png)\n\n现代计算机MAR和MDR集成在CPU里\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313130248-812f19.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313130354-4deeaf.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131045-3c8d08.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131410-30f175.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131512-9e54df.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131549-a4e77b.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131659-ff618a.png)\n\n`PC=MAR`\n\n`IR=MDR`\n\n## 二、计算机软件\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313132916-115e1b.png)\n\n\n\n## 三、计算机系统层次结构\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313133318-d3b611.png)\n\n## `四、计算机系统的工作原理`\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313133831-644235.png)\n\n## `五、计算机性能指标`\n\nCPU执行时间=指令条数ln * CPI * 时钟周期（1/主频）\n","slug":"第一章计算机系统概述","published":1,"updated":"2024-03-13T06:19:40.383Z","comments":1,"layout":"post","photos":[],"_id":"cltqmserj000gqcnj430u3mzt","content":"<h1 id=\"第一章计算机层次结构\"><a href=\"#第一章计算机层次结构\" class=\"headerlink\" title=\"第一章计算机层次结构\"></a>第一章计算机层次结构</h1><h2 id=\"一、计算机硬件\"><a href=\"#一、计算机硬件\" class=\"headerlink\" title=\"一、计算机硬件\"></a>一、计算机硬件</h2><p>在计算机系统中，软件和硬件逻辑上是等效的</p>\n<h3 id=\"1-冯诺依曼计算机：\"><a href=\"#1-冯诺依曼计算机：\" class=\"headerlink\" title=\"1.冯诺依曼计算机：\"></a><code>1.冯诺依曼计算机：</code></h3><p>（1）由五大部件组成</p>\n<p>（2）<strong>存储程序</strong>工作方式</p>\n<p>（3）指令和数据以同等地位存于存储器，可按地址寻访，计算机根据<strong>指令执行的不同阶段</strong>区分</p>\n<p>（4）指令和数据均用<strong>二进制</strong>表示</p>\n<p>（5）指令由<strong>操作码</strong>和地址码组成，</p>\n<p>（6）<strong>运算器</strong>为中心</p>\n<h3 id=\"2-现代计算机\"><a href=\"#2-现代计算机\" class=\"headerlink\" title=\"2.现代计算机\"></a>2.现代计算机</h3><p>以<strong>存储器</strong>为中心</p>\n<h3 id=\"3-主存储器的构成\"><a href=\"#3-主存储器的构成\" class=\"headerlink\" title=\"3.主存储器的构成\"></a>3.主存储器的构成</h3><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313130030-68e0a9-0c0eb1.png\"></p>\n<p>现代计算机MAR和MDR集成在CPU里</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313130248-812f19.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313130354-4deeaf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131045-3c8d08.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131410-30f175.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131512-9e54df.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131549-a4e77b.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131659-ff618a.png\"></p>\n<p><code>PC=MAR</code></p>\n<p><code>IR=MDR</code></p>\n<h2 id=\"二、计算机软件\"><a href=\"#二、计算机软件\" class=\"headerlink\" title=\"二、计算机软件\"></a>二、计算机软件</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313132916-115e1b.png\"></p>\n<h2 id=\"三、计算机系统层次结构\"><a href=\"#三、计算机系统层次结构\" class=\"headerlink\" title=\"三、计算机系统层次结构\"></a>三、计算机系统层次结构</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313133318-d3b611.png\"></p>\n<h2 id=\"四、计算机系统的工作原理\"><a href=\"#四、计算机系统的工作原理\" class=\"headerlink\" title=\"四、计算机系统的工作原理\"></a><code>四、计算机系统的工作原理</code></h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313133831-644235.png\"></p>\n<h2 id=\"五、计算机性能指标\"><a href=\"#五、计算机性能指标\" class=\"headerlink\" title=\"五、计算机性能指标\"></a><code>五、计算机性能指标</code></h2><p>CPU执行时间&#x3D;指令条数ln * CPI * 时钟周期（1&#x2F;主频）</p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"第一章计算机层次结构\"><a href=\"#第一章计算机层次结构\" class=\"headerlink\" title=\"第一章计算机层次结构\"></a>第一章计算机层次结构</h1><h2 id=\"一、计算机硬件\"><a href=\"#一、计算机硬件\" class=\"headerlink\" title=\"一、计算机硬件\"></a>一、计算机硬件</h2><p>在计算机系统中，软件和硬件逻辑上是等效的</p>\n<h3 id=\"1-冯诺依曼计算机：\"><a href=\"#1-冯诺依曼计算机：\" class=\"headerlink\" title=\"1.冯诺依曼计算机：\"></a><code>1.冯诺依曼计算机：</code></h3><p>（1）由五大部件组成</p>\n<p>（2）<strong>存储程序</strong>工作方式</p>\n<p>（3）指令和数据以同等地位存于存储器，可按地址寻访，计算机根据<strong>指令执行的不同阶段</strong>区分</p>\n<p>（4）指令和数据均用<strong>二进制</strong>表示</p>\n<p>（5）指令由<strong>操作码</strong>和地址码组成，</p>\n<p>（6）<strong>运算器</strong>为中心</p>\n<h3 id=\"2-现代计算机\"><a href=\"#2-现代计算机\" class=\"headerlink\" title=\"2.现代计算机\"></a>2.现代计算机</h3><p>以<strong>存储器</strong>为中心</p>\n<h3 id=\"3-主存储器的构成\"><a href=\"#3-主存储器的构成\" class=\"headerlink\" title=\"3.主存储器的构成\"></a>3.主存储器的构成</h3><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313130030-68e0a9-0c0eb1.png\"></p>\n<p>现代计算机MAR和MDR集成在CPU里</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313130248-812f19.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313130354-4deeaf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131045-3c8d08.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131410-30f175.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131512-9e54df.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131549-a4e77b.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313131659-ff618a.png\"></p>\n<p><code>PC=MAR</code></p>\n<p><code>IR=MDR</code></p>\n<h2 id=\"二、计算机软件\"><a href=\"#二、计算机软件\" class=\"headerlink\" title=\"二、计算机软件\"></a>二、计算机软件</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313132916-115e1b.png\"></p>\n<h2 id=\"三、计算机系统层次结构\"><a href=\"#三、计算机系统层次结构\" class=\"headerlink\" title=\"三、计算机系统层次结构\"></a>三、计算机系统层次结构</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313133318-d3b611.png\"></p>\n<h2 id=\"四、计算机系统的工作原理\"><a href=\"#四、计算机系统的工作原理\" class=\"headerlink\" title=\"四、计算机系统的工作原理\"></a><code>四、计算机系统的工作原理</code></h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-13/20240313133831-644235.png\"></p>\n<h2 id=\"五、计算机性能指标\"><a href=\"#五、计算机性能指标\" class=\"headerlink\" title=\"五、计算机性能指标\"></a><code>五、计算机性能指标</code></h2><p>CPU执行时间&#x3D;指令条数ln * CPI * 时钟周期（1&#x2F;主频）</p>\n"},{"title":"高数第二章导数","date":"2024-03-02T08:21:31.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-08/NO-7AG-M6EB%60C%7B7F8VT2ZS-bc3399.jpg","description":"导数相关知识点总结","_content":"\n# 一、导数的定义和性质\n\n## 1.导数定义\n\n![image-20240308194226083](image-20240308194226083.png)\n\n![image-20240308194244346](image-20240308194244346.png)\n\n## 2.可导与连续的关系\n\n![image-20240308194328198](image-20240308194328198.png)\n\n![image-20240308195026958](image-20240308195026958.png)\n\n## 3.单侧导数\n\n![image-20240308194355170](image-20240308194355170.png)\n\n## 4.连续性及可导性的判定方法\n\n![image-20240308194437833](image-20240308194437833.png)\n\n![image-20240308194454815](image-20240308194454815.png)\n\n![image-20240308194625418](image-20240308194625418.png)\n\n![image-20240308194645257](image-20240308194645257.png)\n\n## 5.导数的推广定义\n\n![image-20240308194541132](image-20240308194541132.png)\n\n![image-20240308195258807](image-20240308195258807.png)\n\n# 二、导数计算\n\n## 1.导数表\n\n![image-20240308200158574](image-20240308200158574.png)\n\n![image-20240308200254044](image-20240308200254044.png)\n\n![image-20240308200326596](image-20240308200326596.png)\n\n## 2.求导法则\n\n![image-20240310200126231](image-20240310200126231.png)\n\n## 3.复合函数求导\n\n![image-20240310200201637](image-20240310200201637.png)\n\n## 4.参数方程求导\n\n![image-20240310200319728](image-20240310200319728.png)\n\n## 5.分段函数求导\n\n![image-20240310200348012](image-20240310200348012.png)\n","source":"_posts/第二章导数.md","raw":"---\ntitle: 高数第二章导数\ndate: 2024-03-02 16:21:31\ntags: 高数\ncategories: 高数\ncover: https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-08/NO-7AG-M6EB%60C%7B7F8VT2ZS-bc3399.jpg\ndescription: 导数相关知识点总结\n---\n\n# 一、导数的定义和性质\n\n## 1.导数定义\n\n![image-20240308194226083](image-20240308194226083.png)\n\n![image-20240308194244346](image-20240308194244346.png)\n\n## 2.可导与连续的关系\n\n![image-20240308194328198](image-20240308194328198.png)\n\n![image-20240308195026958](image-20240308195026958.png)\n\n## 3.单侧导数\n\n![image-20240308194355170](image-20240308194355170.png)\n\n## 4.连续性及可导性的判定方法\n\n![image-20240308194437833](image-20240308194437833.png)\n\n![image-20240308194454815](image-20240308194454815.png)\n\n![image-20240308194625418](image-20240308194625418.png)\n\n![image-20240308194645257](image-20240308194645257.png)\n\n## 5.导数的推广定义\n\n![image-20240308194541132](image-20240308194541132.png)\n\n![image-20240308195258807](image-20240308195258807.png)\n\n# 二、导数计算\n\n## 1.导数表\n\n![image-20240308200158574](image-20240308200158574.png)\n\n![image-20240308200254044](image-20240308200254044.png)\n\n![image-20240308200326596](image-20240308200326596.png)\n\n## 2.求导法则\n\n![image-20240310200126231](image-20240310200126231.png)\n\n## 3.复合函数求导\n\n![image-20240310200201637](image-20240310200201637.png)\n\n## 4.参数方程求导\n\n![image-20240310200319728](image-20240310200319728.png)\n\n## 5.分段函数求导\n\n![image-20240310200348012](image-20240310200348012.png)\n","slug":"第二章导数","published":1,"updated":"2024-03-10T12:04:04.361Z","comments":1,"layout":"post","photos":[],"_id":"cltqmserk000iqcnjbw7j814y","content":"<h1 id=\"一、导数的定义和性质\"><a href=\"#一、导数的定义和性质\" class=\"headerlink\" title=\"一、导数的定义和性质\"></a>一、导数的定义和性质</h1><h2 id=\"1-导数定义\"><a href=\"#1-导数定义\" class=\"headerlink\" title=\"1.导数定义\"></a>1.导数定义</h2><p><img src=\"/image-20240308194226083.png\" alt=\"image-20240308194226083\"></p>\n<p><img src=\"/image-20240308194244346.png\" alt=\"image-20240308194244346\"></p>\n<h2 id=\"2-可导与连续的关系\"><a href=\"#2-可导与连续的关系\" class=\"headerlink\" title=\"2.可导与连续的关系\"></a>2.可导与连续的关系</h2><p><img src=\"/image-20240308194328198.png\" alt=\"image-20240308194328198\"></p>\n<p><img src=\"/image-20240308195026958.png\" alt=\"image-20240308195026958\"></p>\n<h2 id=\"3-单侧导数\"><a href=\"#3-单侧导数\" class=\"headerlink\" title=\"3.单侧导数\"></a>3.单侧导数</h2><p><img src=\"/image-20240308194355170.png\" alt=\"image-20240308194355170\"></p>\n<h2 id=\"4-连续性及可导性的判定方法\"><a href=\"#4-连续性及可导性的判定方法\" class=\"headerlink\" title=\"4.连续性及可导性的判定方法\"></a>4.连续性及可导性的判定方法</h2><p><img src=\"/image-20240308194437833.png\" alt=\"image-20240308194437833\"></p>\n<p><img src=\"/image-20240308194454815.png\" alt=\"image-20240308194454815\"></p>\n<p><img src=\"/image-20240308194625418.png\" alt=\"image-20240308194625418\"></p>\n<p><img src=\"/image-20240308194645257.png\" alt=\"image-20240308194645257\"></p>\n<h2 id=\"5-导数的推广定义\"><a href=\"#5-导数的推广定义\" class=\"headerlink\" title=\"5.导数的推广定义\"></a>5.导数的推广定义</h2><p><img src=\"/image-20240308194541132.png\" alt=\"image-20240308194541132\"></p>\n<p><img src=\"/image-20240308195258807.png\" alt=\"image-20240308195258807\"></p>\n<h1 id=\"二、导数计算\"><a href=\"#二、导数计算\" class=\"headerlink\" title=\"二、导数计算\"></a>二、导数计算</h1><h2 id=\"1-导数表\"><a href=\"#1-导数表\" class=\"headerlink\" title=\"1.导数表\"></a>1.导数表</h2><p><img src=\"/image-20240308200158574.png\" alt=\"image-20240308200158574\"></p>\n<p><img src=\"/image-20240308200254044.png\" alt=\"image-20240308200254044\"></p>\n<p><img src=\"/image-20240308200326596.png\" alt=\"image-20240308200326596\"></p>\n<h2 id=\"2-求导法则\"><a href=\"#2-求导法则\" class=\"headerlink\" title=\"2.求导法则\"></a>2.求导法则</h2><p><img src=\"/image-20240310200126231.png\" alt=\"image-20240310200126231\"></p>\n<h2 id=\"3-复合函数求导\"><a href=\"#3-复合函数求导\" class=\"headerlink\" title=\"3.复合函数求导\"></a>3.复合函数求导</h2><p><img src=\"/image-20240310200201637.png\" alt=\"image-20240310200201637\"></p>\n<h2 id=\"4-参数方程求导\"><a href=\"#4-参数方程求导\" class=\"headerlink\" title=\"4.参数方程求导\"></a>4.参数方程求导</h2><p><img src=\"/image-20240310200319728.png\" alt=\"image-20240310200319728\"></p>\n<h2 id=\"5-分段函数求导\"><a href=\"#5-分段函数求导\" class=\"headerlink\" title=\"5.分段函数求导\"></a>5.分段函数求导</h2><p><img src=\"/image-20240310200348012.png\" alt=\"image-20240310200348012\"></p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"一、导数的定义和性质\"><a href=\"#一、导数的定义和性质\" class=\"headerlink\" title=\"一、导数的定义和性质\"></a>一、导数的定义和性质</h1><h2 id=\"1-导数定义\"><a href=\"#1-导数定义\" class=\"headerlink\" title=\"1.导数定义\"></a>1.导数定义</h2><p><img src=\"/image-20240308194226083.png\" alt=\"image-20240308194226083\"></p>\n<p><img src=\"/image-20240308194244346.png\" alt=\"image-20240308194244346\"></p>\n<h2 id=\"2-可导与连续的关系\"><a href=\"#2-可导与连续的关系\" class=\"headerlink\" title=\"2.可导与连续的关系\"></a>2.可导与连续的关系</h2><p><img src=\"/image-20240308194328198.png\" alt=\"image-20240308194328198\"></p>\n<p><img src=\"/image-20240308195026958.png\" alt=\"image-20240308195026958\"></p>\n<h2 id=\"3-单侧导数\"><a href=\"#3-单侧导数\" class=\"headerlink\" title=\"3.单侧导数\"></a>3.单侧导数</h2><p><img src=\"/image-20240308194355170.png\" alt=\"image-20240308194355170\"></p>\n<h2 id=\"4-连续性及可导性的判定方法\"><a href=\"#4-连续性及可导性的判定方法\" class=\"headerlink\" title=\"4.连续性及可导性的判定方法\"></a>4.连续性及可导性的判定方法</h2><p><img src=\"/image-20240308194437833.png\" alt=\"image-20240308194437833\"></p>\n<p><img src=\"/image-20240308194454815.png\" alt=\"image-20240308194454815\"></p>\n<p><img src=\"/image-20240308194625418.png\" alt=\"image-20240308194625418\"></p>\n<p><img src=\"/image-20240308194645257.png\" alt=\"image-20240308194645257\"></p>\n<h2 id=\"5-导数的推广定义\"><a href=\"#5-导数的推广定义\" class=\"headerlink\" title=\"5.导数的推广定义\"></a>5.导数的推广定义</h2><p><img src=\"/image-20240308194541132.png\" alt=\"image-20240308194541132\"></p>\n<p><img src=\"/image-20240308195258807.png\" alt=\"image-20240308195258807\"></p>\n<h1 id=\"二、导数计算\"><a href=\"#二、导数计算\" class=\"headerlink\" title=\"二、导数计算\"></a>二、导数计算</h1><h2 id=\"1-导数表\"><a href=\"#1-导数表\" class=\"headerlink\" title=\"1.导数表\"></a>1.导数表</h2><p><img src=\"/image-20240308200158574.png\" alt=\"image-20240308200158574\"></p>\n<p><img src=\"/image-20240308200254044.png\" alt=\"image-20240308200254044\"></p>\n<p><img src=\"/image-20240308200326596.png\" alt=\"image-20240308200326596\"></p>\n<h2 id=\"2-求导法则\"><a href=\"#2-求导法则\" class=\"headerlink\" title=\"2.求导法则\"></a>2.求导法则</h2><p><img src=\"/image-20240310200126231.png\" alt=\"image-20240310200126231\"></p>\n<h2 id=\"3-复合函数求导\"><a href=\"#3-复合函数求导\" class=\"headerlink\" title=\"3.复合函数求导\"></a>3.复合函数求导</h2><p><img src=\"/image-20240310200201637.png\" alt=\"image-20240310200201637\"></p>\n<h2 id=\"4-参数方程求导\"><a href=\"#4-参数方程求导\" class=\"headerlink\" title=\"4.参数方程求导\"></a>4.参数方程求导</h2><p><img src=\"/image-20240310200319728.png\" alt=\"image-20240310200319728\"></p>\n<h2 id=\"5-分段函数求导\"><a href=\"#5-分段函数求导\" class=\"headerlink\" title=\"5.分段函数求导\"></a>5.分段函数求导</h2><p><img src=\"/image-20240310200348012.png\" alt=\"image-20240310200348012\"></p>\n"},{"title":"第五章-树与二叉树","date":"2024-02-03T04:21:10.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-02-03/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240203131208-95bc05.jpg","description":null,"_content":"\n二叉树的遍历\n\n```c++\ntypedef struct BiTNode{\n    ElemType data;\n    struct BiTNode *lchild,*rchild;\n}BiTNode,*BiTree;\n\n//先序遍历（递归）\nvoid PreOrder(BiTree T){\n    if(T!=NULL){\n        visit(T);//根\n        PreOrder(T->lchild);//左\n        PreOrder(T->lchild);//右\n    }\n}\n```\n\n","source":"_posts/第五章-树与二叉树.md","raw":"---\ntitle: 第五章-树与二叉树\ndate: 2024-02-03 12:21:10\ntags: 数据结构\ncategories: 数据结构\ncover: https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-02-03/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240203131208-95bc05.jpg\ndescription:\n---\n\n二叉树的遍历\n\n```c++\ntypedef struct BiTNode{\n    ElemType data;\n    struct BiTNode *lchild,*rchild;\n}BiTNode,*BiTree;\n\n//先序遍历（递归）\nvoid PreOrder(BiTree T){\n    if(T!=NULL){\n        visit(T);//根\n        PreOrder(T->lchild);//左\n        PreOrder(T->lchild);//右\n    }\n}\n```\n\n","slug":"第五章-树与二叉树","published":1,"updated":"2024-03-08T03:27:57.383Z","comments":1,"layout":"post","photos":[],"_id":"cltqmserl000mqcnj1t0vayxo","content":"<p>二叉树的遍历</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">BiTNode</span>&#123;</span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">BiTNode</span> *lchild,*rchild;</span><br><span class=\"line\">&#125;BiTNode,*BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先序遍历（递归）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PreOrder</span><span class=\"params\">(BiTree T)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">visit</span>(T);<span class=\"comment\">//根</span></span><br><span class=\"line\">        <span class=\"built_in\">PreOrder</span>(T-&gt;lchild);<span class=\"comment\">//左</span></span><br><span class=\"line\">        <span class=\"built_in\">PreOrder</span>(T-&gt;lchild);<span class=\"comment\">//右</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","cover_type":"img","excerpt":"","more":"<p>二叉树的遍历</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">BiTNode</span>&#123;</span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">BiTNode</span> *lchild,*rchild;</span><br><span class=\"line\">&#125;BiTNode,*BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先序遍历（递归）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PreOrder</span><span class=\"params\">(BiTree T)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">visit</span>(T);<span class=\"comment\">//根</span></span><br><span class=\"line\">        <span class=\"built_in\">PreOrder</span>(T-&gt;lchild);<span class=\"comment\">//左</span></span><br><span class=\"line\">        <span class=\"built_in\">PreOrder</span>(T-&gt;lchild);<span class=\"comment\">//右</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"第四章 串","date":"2024-02-01T02:55:02.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-02-01/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240201114048-d061e1.jpg","description":null,"_content":"\n\n\n# 一、串的定义\n\n1.串：由零个或多个字符组成的有限序列\n\n2.串长，空串，空格串（空格串不等于空串），子串，主串，字符在主串中的位置（第一次出现），子串在主串中的位置\n\n3.串vs线性表：串是特殊的线性表，串的数据对象限定为字符集，串的基本操作以子串为操作对象\n\n# 二、串的存储\n\n## 1.定长顺序存储\n\n```c++\n#define MAXLEN 255\ntypedef struct {\n    char ch[MAXLEN];//定义数组\n    int length;//串长\n}SString;\n\n```\n\n## 2.动态分配（堆分配）\n\n```c++\ntypedef struct StringNode{\n    char *ch;\n    int length;\n}HString;\n\nHString S;\nS.ch=(char *)malloc(MAXLEN*sizeof(char));//用完需手动free\n\n```\n\n## 3.链式存储（块链存储表示）\n\n```c++\n//结点大小为1\ntypedef struct StringNode{\n    char ch;\n    struct StringNode *next;\n}StringNode,*String;\n\n//结点大小为4\ntypedef struct StringNode{\n    char ch[4];\n    struct StringNode *next;\n}StringNode,*String;\n\n```\n\n## 4.基本操作\n\n**SubString(&sub,pos,len)求子串。用sub返回串S的第pos个字符起长度为len的子串**\n\n```c++\nbool SubString(SString &sub,int pos,int len){\n\t//子串范围越界\n\tif(pos+len-1 > S.length)\n\t\treturn false;\n\tfor(int i=pos;i<pos+len;i++)\n\t\tSub.c[i-pos+1]=S.ch[i];\n\tSub.Length=len;\n\treturn true;\n}\n```\n\n**StrCompare(S,T)比较操作，若S>T，返回值>0，若S<T，返回值<0，若S=T，返回0**\n\n```c++\nint StrCompare(SString S,SString T){\n    for(int i=1;i<S.length&&i<T.length;i++){\n        if(S.ch[i]!=T.ch[i])\n            return S.ch[i]-T.ch[i];//返回相减的值\n    }\n    return S.length-T.length;//若扫描过的字符都相等，那么长度长的串更大    \n        \n}\n```\n\n**Index( S, T)定位操作，若主串S中存在与串T值相同的子串，则返回它在主串中第一次出现的位置，否则函数值为0**\n\n```\n\nint Index(SString S,SString T){\n    int i=1,m=S.length,n=T.length;\n    while(i<m-n+1){\n        SubString(Sub,S,i,m);\n        if(StrCompare(Sub,T)!=0)\n            i++;\n        else retrun i;\n    }\n    return 0;//S中不存在与T相等的子串\n}\n```\n\n# 三、串的模式匹配\n\n## 1.朴素模式匹配算法\n\n```c++\nint Index(SString S,SString T){\n    int i=1,j=1;\n    while(i<=S.length&&T<=S.length){\n        if(S.ch[i]==T.ch[j]){\n            ++i;\n            ++j;\n        }else{\n            i=i-j+2;\n            j=1;\n        }\n    }\n    if(j>T.length){\n        return i-T.length;\n    }else{\n        return 0;//S中不存在与T相等的子串\n    }\n\n}\n//时间复杂度O(mn)\n```\n\n## **2.kmp算法**\n\nkmp比较过程中主串不会回溯\n\nnext[j]：看前缀与后缀相等的字符数，结果等于相等的字符数+1\n\nnextval[j]: next[j]与j对应的字符比，相等用底下，不同用上面\n","source":"_posts/第四章-串.md","raw":"---\ntitle: 第四章 串\ndate: 2024-02-01 10:55:02\ntags: 数据结构\ncategories: 数据结构\ncover: https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-02-01/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240201114048-d061e1.jpg\ndescription:\n---\n\n\n\n# 一、串的定义\n\n1.串：由零个或多个字符组成的有限序列\n\n2.串长，空串，空格串（空格串不等于空串），子串，主串，字符在主串中的位置（第一次出现），子串在主串中的位置\n\n3.串vs线性表：串是特殊的线性表，串的数据对象限定为字符集，串的基本操作以子串为操作对象\n\n# 二、串的存储\n\n## 1.定长顺序存储\n\n```c++\n#define MAXLEN 255\ntypedef struct {\n    char ch[MAXLEN];//定义数组\n    int length;//串长\n}SString;\n\n```\n\n## 2.动态分配（堆分配）\n\n```c++\ntypedef struct StringNode{\n    char *ch;\n    int length;\n}HString;\n\nHString S;\nS.ch=(char *)malloc(MAXLEN*sizeof(char));//用完需手动free\n\n```\n\n## 3.链式存储（块链存储表示）\n\n```c++\n//结点大小为1\ntypedef struct StringNode{\n    char ch;\n    struct StringNode *next;\n}StringNode,*String;\n\n//结点大小为4\ntypedef struct StringNode{\n    char ch[4];\n    struct StringNode *next;\n}StringNode,*String;\n\n```\n\n## 4.基本操作\n\n**SubString(&sub,pos,len)求子串。用sub返回串S的第pos个字符起长度为len的子串**\n\n```c++\nbool SubString(SString &sub,int pos,int len){\n\t//子串范围越界\n\tif(pos+len-1 > S.length)\n\t\treturn false;\n\tfor(int i=pos;i<pos+len;i++)\n\t\tSub.c[i-pos+1]=S.ch[i];\n\tSub.Length=len;\n\treturn true;\n}\n```\n\n**StrCompare(S,T)比较操作，若S>T，返回值>0，若S<T，返回值<0，若S=T，返回0**\n\n```c++\nint StrCompare(SString S,SString T){\n    for(int i=1;i<S.length&&i<T.length;i++){\n        if(S.ch[i]!=T.ch[i])\n            return S.ch[i]-T.ch[i];//返回相减的值\n    }\n    return S.length-T.length;//若扫描过的字符都相等，那么长度长的串更大    \n        \n}\n```\n\n**Index( S, T)定位操作，若主串S中存在与串T值相同的子串，则返回它在主串中第一次出现的位置，否则函数值为0**\n\n```\n\nint Index(SString S,SString T){\n    int i=1,m=S.length,n=T.length;\n    while(i<m-n+1){\n        SubString(Sub,S,i,m);\n        if(StrCompare(Sub,T)!=0)\n            i++;\n        else retrun i;\n    }\n    return 0;//S中不存在与T相等的子串\n}\n```\n\n# 三、串的模式匹配\n\n## 1.朴素模式匹配算法\n\n```c++\nint Index(SString S,SString T){\n    int i=1,j=1;\n    while(i<=S.length&&T<=S.length){\n        if(S.ch[i]==T.ch[j]){\n            ++i;\n            ++j;\n        }else{\n            i=i-j+2;\n            j=1;\n        }\n    }\n    if(j>T.length){\n        return i-T.length;\n    }else{\n        return 0;//S中不存在与T相等的子串\n    }\n\n}\n//时间复杂度O(mn)\n```\n\n## **2.kmp算法**\n\nkmp比较过程中主串不会回溯\n\nnext[j]：看前缀与后缀相等的字符数，结果等于相等的字符数+1\n\nnextval[j]: next[j]与j对应的字符比，相等用底下，不同用上面\n","slug":"第四章-串","published":1,"updated":"2024-03-08T03:27:49.833Z","comments":1,"layout":"post","photos":[],"_id":"cltqmserm000pqcnj1bgycg7l","content":"<h1 id=\"一、串的定义\"><a href=\"#一、串的定义\" class=\"headerlink\" title=\"一、串的定义\"></a>一、串的定义</h1><p>1.串：由零个或多个字符组成的有限序列</p>\n<p>2.串长，空串，空格串（空格串不等于空串），子串，主串，字符在主串中的位置（第一次出现），子串在主串中的位置</p>\n<p>3.串vs线性表：串是特殊的线性表，串的数据对象限定为字符集，串的基本操作以子串为操作对象</p>\n<h1 id=\"二、串的存储\"><a href=\"#二、串的存储\" class=\"headerlink\" title=\"二、串的存储\"></a>二、串的存储</h1><h2 id=\"1-定长顺序存储\"><a href=\"#1-定长顺序存储\" class=\"headerlink\" title=\"1.定长顺序存储\"></a>1.定长顺序存储</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXLEN 255</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch[MAXLEN];<span class=\"comment\">//定义数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> length;<span class=\"comment\">//串长</span></span><br><span class=\"line\">&#125;SString;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-动态分配（堆分配）\"><a href=\"#2-动态分配（堆分配）\" class=\"headerlink\" title=\"2.动态分配（堆分配）\"></a>2.动态分配（堆分配）</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">StringNode</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> *ch;</span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125;HString;</span><br><span class=\"line\"></span><br><span class=\"line\">HString S;</span><br><span class=\"line\">S.ch=(<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(MAXLEN*<span class=\"built_in\">sizeof</span>(<span class=\"type\">char</span>));<span class=\"comment\">//用完需手动free</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-链式存储（块链存储表示）\"><a href=\"#3-链式存储（块链存储表示）\" class=\"headerlink\" title=\"3.链式存储（块链存储表示）\"></a>3.链式存储（块链存储表示）</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结点大小为1</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">StringNode</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">StringNode</span> *next;</span><br><span class=\"line\">&#125;StringNode,*String;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结点大小为4</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">StringNode</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">StringNode</span> *next;</span><br><span class=\"line\">&#125;StringNode,*String;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-基本操作\"><a href=\"#4-基本操作\" class=\"headerlink\" title=\"4.基本操作\"></a>4.基本操作</h2><p><strong>SubString(&amp;sub,pos,len)求子串。用sub返回串S的第pos个字符起长度为len的子串</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SubString</span><span class=\"params\">(SString &amp;sub,<span class=\"type\">int</span> pos,<span class=\"type\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//子串范围越界</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos+len<span class=\"number\">-1</span> &gt; S.length)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=pos;i&lt;pos+len;i++)</span><br><span class=\"line\">\t\tSub.c[i-pos+<span class=\"number\">1</span>]=S.ch[i];</span><br><span class=\"line\">\tSub.Length=len;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>StrCompare(S,T)比较操作，若S&gt;T，返回值&gt;0，若S&lt;T，返回值&lt;0，若S&#x3D;T，返回0</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">StrCompare</span><span class=\"params\">(SString S,SString T)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;S.length&amp;&amp;i&lt;T.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S.ch[i]!=T.ch[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> S.ch[i]-T.ch[i];<span class=\"comment\">//返回相减的值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> S.length-T.length;<span class=\"comment\">//若扫描过的字符都相等，那么长度长的串更大    </span></span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Index( S, T)定位操作，若主串S中存在与串T值相同的子串，则返回它在主串中第一次出现的位置，否则函数值为0</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">int Index(SString S,SString T)&#123;</span><br><span class=\"line\">    int i=1,m=S.length,n=T.length;</span><br><span class=\"line\">    while(i&lt;m-n+1)&#123;</span><br><span class=\"line\">        SubString(Sub,S,i,m);</span><br><span class=\"line\">        if(StrCompare(Sub,T)!=0)</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        else retrun i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;//S中不存在与T相等的子串</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、串的模式匹配\"><a href=\"#三、串的模式匹配\" class=\"headerlink\" title=\"三、串的模式匹配\"></a>三、串的模式匹配</h1><h2 id=\"1-朴素模式匹配算法\"><a href=\"#1-朴素模式匹配算法\" class=\"headerlink\" title=\"1.朴素模式匹配算法\"></a>1.朴素模式匹配算法</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Index</span><span class=\"params\">(SString S,SString T)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">1</span>,j=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=S.length&amp;&amp;T&lt;=S.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S.ch[i]==T.ch[j])&#123;</span><br><span class=\"line\">            ++i;</span><br><span class=\"line\">            ++j;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            i=i-j+<span class=\"number\">2</span>;</span><br><span class=\"line\">            j=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j&gt;T.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i-T.length;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//S中不存在与T相等的子串</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//时间复杂度O(mn)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-kmp算法\"><a href=\"#2-kmp算法\" class=\"headerlink\" title=\"2.kmp算法\"></a><strong>2.kmp算法</strong></h2><p>kmp比较过程中主串不会回溯</p>\n<p>next[j]：看前缀与后缀相等的字符数，结果等于相等的字符数+1</p>\n<p>nextval[j]: next[j]与j对应的字符比，相等用底下，不同用上面</p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"一、串的定义\"><a href=\"#一、串的定义\" class=\"headerlink\" title=\"一、串的定义\"></a>一、串的定义</h1><p>1.串：由零个或多个字符组成的有限序列</p>\n<p>2.串长，空串，空格串（空格串不等于空串），子串，主串，字符在主串中的位置（第一次出现），子串在主串中的位置</p>\n<p>3.串vs线性表：串是特殊的线性表，串的数据对象限定为字符集，串的基本操作以子串为操作对象</p>\n<h1 id=\"二、串的存储\"><a href=\"#二、串的存储\" class=\"headerlink\" title=\"二、串的存储\"></a>二、串的存储</h1><h2 id=\"1-定长顺序存储\"><a href=\"#1-定长顺序存储\" class=\"headerlink\" title=\"1.定长顺序存储\"></a>1.定长顺序存储</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXLEN 255</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch[MAXLEN];<span class=\"comment\">//定义数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> length;<span class=\"comment\">//串长</span></span><br><span class=\"line\">&#125;SString;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-动态分配（堆分配）\"><a href=\"#2-动态分配（堆分配）\" class=\"headerlink\" title=\"2.动态分配（堆分配）\"></a>2.动态分配（堆分配）</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">StringNode</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> *ch;</span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125;HString;</span><br><span class=\"line\"></span><br><span class=\"line\">HString S;</span><br><span class=\"line\">S.ch=(<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(MAXLEN*<span class=\"built_in\">sizeof</span>(<span class=\"type\">char</span>));<span class=\"comment\">//用完需手动free</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-链式存储（块链存储表示）\"><a href=\"#3-链式存储（块链存储表示）\" class=\"headerlink\" title=\"3.链式存储（块链存储表示）\"></a>3.链式存储（块链存储表示）</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结点大小为1</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">StringNode</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">StringNode</span> *next;</span><br><span class=\"line\">&#125;StringNode,*String;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结点大小为4</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">StringNode</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">StringNode</span> *next;</span><br><span class=\"line\">&#125;StringNode,*String;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-基本操作\"><a href=\"#4-基本操作\" class=\"headerlink\" title=\"4.基本操作\"></a>4.基本操作</h2><p><strong>SubString(&amp;sub,pos,len)求子串。用sub返回串S的第pos个字符起长度为len的子串</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SubString</span><span class=\"params\">(SString &amp;sub,<span class=\"type\">int</span> pos,<span class=\"type\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//子串范围越界</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos+len<span class=\"number\">-1</span> &gt; S.length)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=pos;i&lt;pos+len;i++)</span><br><span class=\"line\">\t\tSub.c[i-pos+<span class=\"number\">1</span>]=S.ch[i];</span><br><span class=\"line\">\tSub.Length=len;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>StrCompare(S,T)比较操作，若S&gt;T，返回值&gt;0，若S&lt;T，返回值&lt;0，若S&#x3D;T，返回0</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">StrCompare</span><span class=\"params\">(SString S,SString T)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;S.length&amp;&amp;i&lt;T.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S.ch[i]!=T.ch[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> S.ch[i]-T.ch[i];<span class=\"comment\">//返回相减的值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> S.length-T.length;<span class=\"comment\">//若扫描过的字符都相等，那么长度长的串更大    </span></span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Index( S, T)定位操作，若主串S中存在与串T值相同的子串，则返回它在主串中第一次出现的位置，否则函数值为0</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">int Index(SString S,SString T)&#123;</span><br><span class=\"line\">    int i=1,m=S.length,n=T.length;</span><br><span class=\"line\">    while(i&lt;m-n+1)&#123;</span><br><span class=\"line\">        SubString(Sub,S,i,m);</span><br><span class=\"line\">        if(StrCompare(Sub,T)!=0)</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        else retrun i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;//S中不存在与T相等的子串</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、串的模式匹配\"><a href=\"#三、串的模式匹配\" class=\"headerlink\" title=\"三、串的模式匹配\"></a>三、串的模式匹配</h1><h2 id=\"1-朴素模式匹配算法\"><a href=\"#1-朴素模式匹配算法\" class=\"headerlink\" title=\"1.朴素模式匹配算法\"></a>1.朴素模式匹配算法</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Index</span><span class=\"params\">(SString S,SString T)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">1</span>,j=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=S.length&amp;&amp;T&lt;=S.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S.ch[i]==T.ch[j])&#123;</span><br><span class=\"line\">            ++i;</span><br><span class=\"line\">            ++j;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            i=i-j+<span class=\"number\">2</span>;</span><br><span class=\"line\">            j=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j&gt;T.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i-T.length;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//S中不存在与T相等的子串</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//时间复杂度O(mn)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-kmp算法\"><a href=\"#2-kmp算法\" class=\"headerlink\" title=\"2.kmp算法\"></a><strong>2.kmp算法</strong></h2><p>kmp比较过程中主串不会回溯</p>\n<p>next[j]：看前缀与后缀相等的字符数，结果等于相等的字符数+1</p>\n<p>nextval[j]: next[j]与j对应的字符比，相等用底下，不同用上面</p>\n"},{"title":"计组第二章数据的表示和运算","date":"2024-03-13T04:38:45.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":null,"_content":"\n\n\n# 一、数制与编码\n\n正数的原码补码反码相同\n\n负数的反码：符号位不变，数值位取反\n\n负数的补码：符号位不变从右往左第一个1不变，后面的全部取反\n\n移码：补码基础上符号位取反\n\n| n+1位 | 整数               | 小数               |\n| ----- | ------------------ | ------------------ |\n| 原码  | -(2^n^ -1)~2^n^ -1 | -(1-2^-n^)~1-2^-n^ |\n| 反码  | -(2^n^ -1)~2^n^ -1 | -(1-2^-n^)~1-2^-n^ |\n| 补码  | -2^n^ ~2^n^ -1     | -1~1-2^-n^         |\n| 移码  | -2^n^ ~2^n^ -1     | -1~1-2^-n^         |\n\n#### 0的表示\n\n原码：+0=0，0000\t-0=1，0000\n\n反码：+0=0，0000\t-0=1，0000\n\n补码：+0=-0=0,0000\n\n移码：+0=-0=1,0000\n\n即**补码和反码零的表示唯一**\n\n#### 大小判断\n\n**补码和移码：符号位相同的情况下1多值大，1靠左值大**\n","source":"_posts/计组第二章数据的表示和运算.md","raw":"---\ntitle: 计组第二章数据的表示和运算\ndate: 2024-03-13 12:38:45\ntags: 计组\ncategories: 计组\ncover:\ndescription:\n---\n\n\n\n# 一、数制与编码\n\n正数的原码补码反码相同\n\n负数的反码：符号位不变，数值位取反\n\n负数的补码：符号位不变从右往左第一个1不变，后面的全部取反\n\n移码：补码基础上符号位取反\n\n| n+1位 | 整数               | 小数               |\n| ----- | ------------------ | ------------------ |\n| 原码  | -(2^n^ -1)~2^n^ -1 | -(1-2^-n^)~1-2^-n^ |\n| 反码  | -(2^n^ -1)~2^n^ -1 | -(1-2^-n^)~1-2^-n^ |\n| 补码  | -2^n^ ~2^n^ -1     | -1~1-2^-n^         |\n| 移码  | -2^n^ ~2^n^ -1     | -1~1-2^-n^         |\n\n#### 0的表示\n\n原码：+0=0，0000\t-0=1，0000\n\n反码：+0=0，0000\t-0=1，0000\n\n补码：+0=-0=0,0000\n\n移码：+0=-0=1,0000\n\n即**补码和反码零的表示唯一**\n\n#### 大小判断\n\n**补码和移码：符号位相同的情况下1多值大，1靠左值大**\n","slug":"计组第二章数据的表示和运算","published":1,"updated":"2024-03-14T02:12:18.427Z","comments":1,"layout":"post","photos":[],"_id":"cltqmsern000tqcnjccfld0eo","content":"<h1 id=\"一、数制与编码\"><a href=\"#一、数制与编码\" class=\"headerlink\" title=\"一、数制与编码\"></a>一、数制与编码</h1><p>正数的原码补码反码相同</p>\n<p>负数的反码：符号位不变，数值位取反</p>\n<p>负数的补码：符号位不变从右往左第一个1不变，后面的全部取反</p>\n<p>移码：补码基础上符号位取反</p>\n<table>\n<thead>\n<tr>\n<th>n+1位</th>\n<th>整数</th>\n<th>小数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>原码</td>\n<td>-(2^n^ -1)~2^n^ -1</td>\n<td>-(1-2^-n^)~1-2^-n^</td>\n</tr>\n<tr>\n<td>反码</td>\n<td>-(2^n^ -1)~2^n^ -1</td>\n<td>-(1-2^-n^)~1-2^-n^</td>\n</tr>\n<tr>\n<td>补码</td>\n<td>-2^n^ ~2^n^ -1</td>\n<td>-1~1-2^-n^</td>\n</tr>\n<tr>\n<td>移码</td>\n<td>-2^n^ ~2^n^ -1</td>\n<td>-1~1-2^-n^</td>\n</tr>\n</tbody></table>\n<h4 id=\"0的表示\"><a href=\"#0的表示\" class=\"headerlink\" title=\"0的表示\"></a>0的表示</h4><p>原码：+0&#x3D;0，0000\t-0&#x3D;1，0000</p>\n<p>反码：+0&#x3D;0，0000\t-0&#x3D;1，0000</p>\n<p>补码：+0&#x3D;-0&#x3D;0,0000</p>\n<p>移码：+0&#x3D;-0&#x3D;1,0000</p>\n<p>即<strong>补码和反码零的表示唯一</strong></p>\n<h4 id=\"大小判断\"><a href=\"#大小判断\" class=\"headerlink\" title=\"大小判断\"></a>大小判断</h4><p><strong>补码和移码：符号位相同的情况下1多值大，1靠左值大</strong></p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"一、数制与编码\"><a href=\"#一、数制与编码\" class=\"headerlink\" title=\"一、数制与编码\"></a>一、数制与编码</h1><p>正数的原码补码反码相同</p>\n<p>负数的反码：符号位不变，数值位取反</p>\n<p>负数的补码：符号位不变从右往左第一个1不变，后面的全部取反</p>\n<p>移码：补码基础上符号位取反</p>\n<table>\n<thead>\n<tr>\n<th>n+1位</th>\n<th>整数</th>\n<th>小数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>原码</td>\n<td>-(2^n^ -1)~2^n^ -1</td>\n<td>-(1-2^-n^)~1-2^-n^</td>\n</tr>\n<tr>\n<td>反码</td>\n<td>-(2^n^ -1)~2^n^ -1</td>\n<td>-(1-2^-n^)~1-2^-n^</td>\n</tr>\n<tr>\n<td>补码</td>\n<td>-2^n^ ~2^n^ -1</td>\n<td>-1~1-2^-n^</td>\n</tr>\n<tr>\n<td>移码</td>\n<td>-2^n^ ~2^n^ -1</td>\n<td>-1~1-2^-n^</td>\n</tr>\n</tbody></table>\n<h4 id=\"0的表示\"><a href=\"#0的表示\" class=\"headerlink\" title=\"0的表示\"></a>0的表示</h4><p>原码：+0&#x3D;0，0000\t-0&#x3D;1，0000</p>\n<p>反码：+0&#x3D;0，0000\t-0&#x3D;1，0000</p>\n<p>补码：+0&#x3D;-0&#x3D;0,0000</p>\n<p>移码：+0&#x3D;-0&#x3D;1,0000</p>\n<p>即<strong>补码和反码零的表示唯一</strong></p>\n<h4 id=\"大小判断\"><a href=\"#大小判断\" class=\"headerlink\" title=\"大小判断\"></a>大小判断</h4><p><strong>补码和移码：符号位相同的情况下1多值大，1靠左值大</strong></p>\n"},{"title":"计组第四章指令系统","date":"2024-03-05T07:49:15.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-05/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240305195548-95ccf9.jpg","description":null,"_content":"\n# 第4章指令系统\n\n## 4.1指令系统\n\n**1.指令集体系结构ISA**\n\n2.指令的基本格式\n\n零地址，一地址，二地址，三地址\n\n3.定长操作码指令\n\n4.扩展操作码指令\n\n(1)不允许短码是长码的前缀\n\n(2)各指令的操作码一定不能重复\n\n计算题考点：**设地址长度为n，上一层留m种用于扩展，下一层可扩展m*2^n^** \n\n5.指令的操作类型\n\n(1)数据传送类\n\n(2)运算类->算数和逻辑运算，移位操作\n\n(3)程序控制类：转移操作\n\n中断隐指令是硬件完成的，不属于程序控制指令\n\n(4)输入和输出操作\n\n## 4.2指令的寻址方式\n\n### 1.指令寻址\n\n确定下一条指令存放的地址，由PC指明\n\n**(1)顺序寻址** PC=PC+“1“，1为一个指令字长\n\n**(2)跳跃寻址** ，执行转移类指令时，PC的值被修改\n\n### 2.数据寻址\n\n表格中访存次数不包含取指的访存\n\n|      寻址方式      |     有效地址     | 访存次数 |\n| :----------------: | :--------------: | :------: |\n|      隐含寻址      |     程序指定     |    0     |\n|      立即寻址      |   A即是操作数    |    0     |\n|      直接寻址      |       EA=A       |    1     |\n|    一次间接寻址    |     EA=(A）      |    2     |\n|    N次间接寻址     |    EA=(((A)))    |   N+1    |\n|     寄存器寻址     |     EA=R~i~      |    0     |\n| 寄存器间接一次寻址 |    EA=(R~i~)     |    1     |\n|      相对寻址      |     EA=PC+A      |    1     |\n|      基址寻址      |    EA=(BR)+A     |    1     |\n|      变址寻址      |    EA=(IX)+A     |    1     |\n|      堆栈寻址      | 硬堆栈（寄存器） |    0     |\n|      堆栈寻址      |  软堆栈（主存）  |    1     |\n\n\n\n| 寻址方式 |                            知识点                            |\n| :------: | :----------------------------------------------------------: |\n| 立即寻址 |                      指令执行期间不访存                      |\n| 隐含寻址 |                     有效**缩短指令字长**                     |\n| 变址寻址 |         解决**数组**问题(A不可变，IX可变，面向用户)          |\n| 基址寻址 | **多道程序设计**或**数据分配存储空间**(BR不可变，A可变，面向系统) |\n| 相对寻址 |                       便于**程序浮动**                       |\n\n## 4.4 CISC和RISC\n\n复杂指令系统CISC\n\n精简指令系统RISC\n\n### CISC和RISC的对比\n\n|                      | CISC               | RISC                         |\n| -------------------- | ------------------ | ---------------------------- |\n| 指令系统             | 复杂庞大           | 简单，精简                   |\n| 指令数目             | 一般大于200条      | 一般小于100条                |\n| 指令字长             | 不固定             | 定长                         |\n| 可访存指令           | 不加限制           | 只有LOAD/STORE指令           |\n| 各种指令执行时间     | 相差较大           | 绝大多数一个周期内完成       |\n| 各种指令使用频度     | 相差较大           | 都比较常用                   |\n| 通用寄存器数量       | 少                 | 多                           |\n| 目标代码             | 难以用优化编译生成 | 优化的编译程序，生成代码高效 |\n| 控制方式（绝大多数） | 微程序控制         | 组合逻辑                     |\n| 指令流水线           | 非必须             | 必须                         |\n\n","source":"_posts/第四章指令系统.md","raw":"---\ntitle: 计组第四章指令系统\ndate: 2024-03-05 15:49:15\ntags:\ncategories: 计组\ncover: https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-05/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240305195548-95ccf9.jpg\ndescription:\n---\n\n# 第4章指令系统\n\n## 4.1指令系统\n\n**1.指令集体系结构ISA**\n\n2.指令的基本格式\n\n零地址，一地址，二地址，三地址\n\n3.定长操作码指令\n\n4.扩展操作码指令\n\n(1)不允许短码是长码的前缀\n\n(2)各指令的操作码一定不能重复\n\n计算题考点：**设地址长度为n，上一层留m种用于扩展，下一层可扩展m*2^n^** \n\n5.指令的操作类型\n\n(1)数据传送类\n\n(2)运算类->算数和逻辑运算，移位操作\n\n(3)程序控制类：转移操作\n\n中断隐指令是硬件完成的，不属于程序控制指令\n\n(4)输入和输出操作\n\n## 4.2指令的寻址方式\n\n### 1.指令寻址\n\n确定下一条指令存放的地址，由PC指明\n\n**(1)顺序寻址** PC=PC+“1“，1为一个指令字长\n\n**(2)跳跃寻址** ，执行转移类指令时，PC的值被修改\n\n### 2.数据寻址\n\n表格中访存次数不包含取指的访存\n\n|      寻址方式      |     有效地址     | 访存次数 |\n| :----------------: | :--------------: | :------: |\n|      隐含寻址      |     程序指定     |    0     |\n|      立即寻址      |   A即是操作数    |    0     |\n|      直接寻址      |       EA=A       |    1     |\n|    一次间接寻址    |     EA=(A）      |    2     |\n|    N次间接寻址     |    EA=(((A)))    |   N+1    |\n|     寄存器寻址     |     EA=R~i~      |    0     |\n| 寄存器间接一次寻址 |    EA=(R~i~)     |    1     |\n|      相对寻址      |     EA=PC+A      |    1     |\n|      基址寻址      |    EA=(BR)+A     |    1     |\n|      变址寻址      |    EA=(IX)+A     |    1     |\n|      堆栈寻址      | 硬堆栈（寄存器） |    0     |\n|      堆栈寻址      |  软堆栈（主存）  |    1     |\n\n\n\n| 寻址方式 |                            知识点                            |\n| :------: | :----------------------------------------------------------: |\n| 立即寻址 |                      指令执行期间不访存                      |\n| 隐含寻址 |                     有效**缩短指令字长**                     |\n| 变址寻址 |         解决**数组**问题(A不可变，IX可变，面向用户)          |\n| 基址寻址 | **多道程序设计**或**数据分配存储空间**(BR不可变，A可变，面向系统) |\n| 相对寻址 |                       便于**程序浮动**                       |\n\n## 4.4 CISC和RISC\n\n复杂指令系统CISC\n\n精简指令系统RISC\n\n### CISC和RISC的对比\n\n|                      | CISC               | RISC                         |\n| -------------------- | ------------------ | ---------------------------- |\n| 指令系统             | 复杂庞大           | 简单，精简                   |\n| 指令数目             | 一般大于200条      | 一般小于100条                |\n| 指令字长             | 不固定             | 定长                         |\n| 可访存指令           | 不加限制           | 只有LOAD/STORE指令           |\n| 各种指令执行时间     | 相差较大           | 绝大多数一个周期内完成       |\n| 各种指令使用频度     | 相差较大           | 都比较常用                   |\n| 通用寄存器数量       | 少                 | 多                           |\n| 目标代码             | 难以用优化编译生成 | 优化的编译程序，生成代码高效 |\n| 控制方式（绝大多数） | 微程序控制         | 组合逻辑                     |\n| 指令流水线           | 非必须             | 必须                         |\n\n","slug":"第四章指令系统","published":1,"updated":"2024-03-11T06:15:31.036Z","comments":1,"layout":"post","photos":[],"_id":"cltqmsero000wqcnjectzgiaq","content":"<h1 id=\"第4章指令系统\"><a href=\"#第4章指令系统\" class=\"headerlink\" title=\"第4章指令系统\"></a>第4章指令系统</h1><h2 id=\"4-1指令系统\"><a href=\"#4-1指令系统\" class=\"headerlink\" title=\"4.1指令系统\"></a>4.1指令系统</h2><p><strong>1.指令集体系结构ISA</strong></p>\n<p>2.指令的基本格式</p>\n<p>零地址，一地址，二地址，三地址</p>\n<p>3.定长操作码指令</p>\n<p>4.扩展操作码指令</p>\n<p>(1)不允许短码是长码的前缀</p>\n<p>(2)各指令的操作码一定不能重复</p>\n<p>计算题考点：<strong>设地址长度为n，上一层留m种用于扩展，下一层可扩展m*2^n^</strong> </p>\n<p>5.指令的操作类型</p>\n<p>(1)数据传送类</p>\n<p>(2)运算类-&gt;算数和逻辑运算，移位操作</p>\n<p>(3)程序控制类：转移操作</p>\n<p>中断隐指令是硬件完成的，不属于程序控制指令</p>\n<p>(4)输入和输出操作</p>\n<h2 id=\"4-2指令的寻址方式\"><a href=\"#4-2指令的寻址方式\" class=\"headerlink\" title=\"4.2指令的寻址方式\"></a>4.2指令的寻址方式</h2><h3 id=\"1-指令寻址\"><a href=\"#1-指令寻址\" class=\"headerlink\" title=\"1.指令寻址\"></a>1.指令寻址</h3><p>确定下一条指令存放的地址，由PC指明</p>\n<p><strong>(1)顺序寻址</strong> PC&#x3D;PC+“1“，1为一个指令字长</p>\n<p><strong>(2)跳跃寻址</strong> ，执行转移类指令时，PC的值被修改</p>\n<h3 id=\"2-数据寻址\"><a href=\"#2-数据寻址\" class=\"headerlink\" title=\"2.数据寻址\"></a>2.数据寻址</h3><p>表格中访存次数不包含取指的访存</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">寻址方式</th>\n<th align=\"center\">有效地址</th>\n<th align=\"center\">访存次数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">隐含寻址</td>\n<td align=\"center\">程序指定</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">立即寻址</td>\n<td align=\"center\">A即是操作数</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">直接寻址</td>\n<td align=\"center\">EA&#x3D;A</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">一次间接寻址</td>\n<td align=\"center\">EA&#x3D;(A）</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">N次间接寻址</td>\n<td align=\"center\">EA&#x3D;(((A)))</td>\n<td align=\"center\">N+1</td>\n</tr>\n<tr>\n<td align=\"center\">寄存器寻址</td>\n<td align=\"center\">EA&#x3D;R<del>i</del></td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">寄存器间接一次寻址</td>\n<td align=\"center\">EA&#x3D;(R<del>i</del>)</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">相对寻址</td>\n<td align=\"center\">EA&#x3D;PC+A</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">基址寻址</td>\n<td align=\"center\">EA&#x3D;(BR)+A</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">变址寻址</td>\n<td align=\"center\">EA&#x3D;(IX)+A</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">堆栈寻址</td>\n<td align=\"center\">硬堆栈（寄存器）</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">堆栈寻址</td>\n<td align=\"center\">软堆栈（主存）</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">寻址方式</th>\n<th align=\"center\">知识点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">立即寻址</td>\n<td align=\"center\">指令执行期间不访存</td>\n</tr>\n<tr>\n<td align=\"center\">隐含寻址</td>\n<td align=\"center\">有效<strong>缩短指令字长</strong></td>\n</tr>\n<tr>\n<td align=\"center\">变址寻址</td>\n<td align=\"center\">解决<strong>数组</strong>问题(A不可变，IX可变，面向用户)</td>\n</tr>\n<tr>\n<td align=\"center\">基址寻址</td>\n<td align=\"center\"><strong>多道程序设计</strong>或<strong>数据分配存储空间</strong>(BR不可变，A可变，面向系统)</td>\n</tr>\n<tr>\n<td align=\"center\">相对寻址</td>\n<td align=\"center\">便于<strong>程序浮动</strong></td>\n</tr>\n</tbody></table>\n<h2 id=\"4-4-CISC和RISC\"><a href=\"#4-4-CISC和RISC\" class=\"headerlink\" title=\"4.4 CISC和RISC\"></a>4.4 CISC和RISC</h2><p>复杂指令系统CISC</p>\n<p>精简指令系统RISC</p>\n<h3 id=\"CISC和RISC的对比\"><a href=\"#CISC和RISC的对比\" class=\"headerlink\" title=\"CISC和RISC的对比\"></a>CISC和RISC的对比</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>CISC</th>\n<th>RISC</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>指令系统</td>\n<td>复杂庞大</td>\n<td>简单，精简</td>\n</tr>\n<tr>\n<td>指令数目</td>\n<td>一般大于200条</td>\n<td>一般小于100条</td>\n</tr>\n<tr>\n<td>指令字长</td>\n<td>不固定</td>\n<td>定长</td>\n</tr>\n<tr>\n<td>可访存指令</td>\n<td>不加限制</td>\n<td>只有LOAD&#x2F;STORE指令</td>\n</tr>\n<tr>\n<td>各种指令执行时间</td>\n<td>相差较大</td>\n<td>绝大多数一个周期内完成</td>\n</tr>\n<tr>\n<td>各种指令使用频度</td>\n<td>相差较大</td>\n<td>都比较常用</td>\n</tr>\n<tr>\n<td>通用寄存器数量</td>\n<td>少</td>\n<td>多</td>\n</tr>\n<tr>\n<td>目标代码</td>\n<td>难以用优化编译生成</td>\n<td>优化的编译程序，生成代码高效</td>\n</tr>\n<tr>\n<td>控制方式（绝大多数）</td>\n<td>微程序控制</td>\n<td>组合逻辑</td>\n</tr>\n<tr>\n<td>指令流水线</td>\n<td>非必须</td>\n<td>必须</td>\n</tr>\n</tbody></table>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"第4章指令系统\"><a href=\"#第4章指令系统\" class=\"headerlink\" title=\"第4章指令系统\"></a>第4章指令系统</h1><h2 id=\"4-1指令系统\"><a href=\"#4-1指令系统\" class=\"headerlink\" title=\"4.1指令系统\"></a>4.1指令系统</h2><p><strong>1.指令集体系结构ISA</strong></p>\n<p>2.指令的基本格式</p>\n<p>零地址，一地址，二地址，三地址</p>\n<p>3.定长操作码指令</p>\n<p>4.扩展操作码指令</p>\n<p>(1)不允许短码是长码的前缀</p>\n<p>(2)各指令的操作码一定不能重复</p>\n<p>计算题考点：<strong>设地址长度为n，上一层留m种用于扩展，下一层可扩展m*2^n^</strong> </p>\n<p>5.指令的操作类型</p>\n<p>(1)数据传送类</p>\n<p>(2)运算类-&gt;算数和逻辑运算，移位操作</p>\n<p>(3)程序控制类：转移操作</p>\n<p>中断隐指令是硬件完成的，不属于程序控制指令</p>\n<p>(4)输入和输出操作</p>\n<h2 id=\"4-2指令的寻址方式\"><a href=\"#4-2指令的寻址方式\" class=\"headerlink\" title=\"4.2指令的寻址方式\"></a>4.2指令的寻址方式</h2><h3 id=\"1-指令寻址\"><a href=\"#1-指令寻址\" class=\"headerlink\" title=\"1.指令寻址\"></a>1.指令寻址</h3><p>确定下一条指令存放的地址，由PC指明</p>\n<p><strong>(1)顺序寻址</strong> PC&#x3D;PC+“1“，1为一个指令字长</p>\n<p><strong>(2)跳跃寻址</strong> ，执行转移类指令时，PC的值被修改</p>\n<h3 id=\"2-数据寻址\"><a href=\"#2-数据寻址\" class=\"headerlink\" title=\"2.数据寻址\"></a>2.数据寻址</h3><p>表格中访存次数不包含取指的访存</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">寻址方式</th>\n<th align=\"center\">有效地址</th>\n<th align=\"center\">访存次数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">隐含寻址</td>\n<td align=\"center\">程序指定</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">立即寻址</td>\n<td align=\"center\">A即是操作数</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">直接寻址</td>\n<td align=\"center\">EA&#x3D;A</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">一次间接寻址</td>\n<td align=\"center\">EA&#x3D;(A）</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">N次间接寻址</td>\n<td align=\"center\">EA&#x3D;(((A)))</td>\n<td align=\"center\">N+1</td>\n</tr>\n<tr>\n<td align=\"center\">寄存器寻址</td>\n<td align=\"center\">EA&#x3D;R<del>i</del></td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">寄存器间接一次寻址</td>\n<td align=\"center\">EA&#x3D;(R<del>i</del>)</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">相对寻址</td>\n<td align=\"center\">EA&#x3D;PC+A</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">基址寻址</td>\n<td align=\"center\">EA&#x3D;(BR)+A</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">变址寻址</td>\n<td align=\"center\">EA&#x3D;(IX)+A</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">堆栈寻址</td>\n<td align=\"center\">硬堆栈（寄存器）</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">堆栈寻址</td>\n<td align=\"center\">软堆栈（主存）</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">寻址方式</th>\n<th align=\"center\">知识点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">立即寻址</td>\n<td align=\"center\">指令执行期间不访存</td>\n</tr>\n<tr>\n<td align=\"center\">隐含寻址</td>\n<td align=\"center\">有效<strong>缩短指令字长</strong></td>\n</tr>\n<tr>\n<td align=\"center\">变址寻址</td>\n<td align=\"center\">解决<strong>数组</strong>问题(A不可变，IX可变，面向用户)</td>\n</tr>\n<tr>\n<td align=\"center\">基址寻址</td>\n<td align=\"center\"><strong>多道程序设计</strong>或<strong>数据分配存储空间</strong>(BR不可变，A可变，面向系统)</td>\n</tr>\n<tr>\n<td align=\"center\">相对寻址</td>\n<td align=\"center\">便于<strong>程序浮动</strong></td>\n</tr>\n</tbody></table>\n<h2 id=\"4-4-CISC和RISC\"><a href=\"#4-4-CISC和RISC\" class=\"headerlink\" title=\"4.4 CISC和RISC\"></a>4.4 CISC和RISC</h2><p>复杂指令系统CISC</p>\n<p>精简指令系统RISC</p>\n<h3 id=\"CISC和RISC的对比\"><a href=\"#CISC和RISC的对比\" class=\"headerlink\" title=\"CISC和RISC的对比\"></a>CISC和RISC的对比</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>CISC</th>\n<th>RISC</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>指令系统</td>\n<td>复杂庞大</td>\n<td>简单，精简</td>\n</tr>\n<tr>\n<td>指令数目</td>\n<td>一般大于200条</td>\n<td>一般小于100条</td>\n</tr>\n<tr>\n<td>指令字长</td>\n<td>不固定</td>\n<td>定长</td>\n</tr>\n<tr>\n<td>可访存指令</td>\n<td>不加限制</td>\n<td>只有LOAD&#x2F;STORE指令</td>\n</tr>\n<tr>\n<td>各种指令执行时间</td>\n<td>相差较大</td>\n<td>绝大多数一个周期内完成</td>\n</tr>\n<tr>\n<td>各种指令使用频度</td>\n<td>相差较大</td>\n<td>都比较常用</td>\n</tr>\n<tr>\n<td>通用寄存器数量</td>\n<td>少</td>\n<td>多</td>\n</tr>\n<tr>\n<td>目标代码</td>\n<td>难以用优化编译生成</td>\n<td>优化的编译程序，生成代码高效</td>\n</tr>\n<tr>\n<td>控制方式（绝大多数）</td>\n<td>微程序控制</td>\n<td>组合逻辑</td>\n</tr>\n<tr>\n<td>指令流水线</td>\n<td>非必须</td>\n<td>必须</td>\n</tr>\n</tbody></table>\n"},{"title":"计组第三章存储系统","date":"2024-03-11T06:14:58.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":null,"_content":"\n\n\n# 第三章存储系统\n\n## 3.3主存储器与cpu的连接\n\n1.主存容量的扩展\n\n(1)字扩展\n\n(2)位扩展\n\n(3)字位同时扩展\n\n2.存储芯片的地址分配和片选\n\n(1)线选法\n\n(2)译码片选法\n\n**4K*4位的存储芯片组成16KB存储器->地址线共14位（2位为片选信号使用）**\n\n## 3.4外部存储器\n\n**磁盘存取时间的计算：寻道时间+旋转延迟时间（转半圈）+传输时间**\n","source":"_posts/计组第三章存储系统.md","raw":"---\ntitle: 计组第三章存储系统\ndate: 2024-03-11 14:14:58\ntags: 计组\ncategories: 计组\ncover:\ndescription:\n---\n\n\n\n# 第三章存储系统\n\n## 3.3主存储器与cpu的连接\n\n1.主存容量的扩展\n\n(1)字扩展\n\n(2)位扩展\n\n(3)字位同时扩展\n\n2.存储芯片的地址分配和片选\n\n(1)线选法\n\n(2)译码片选法\n\n**4K*4位的存储芯片组成16KB存储器->地址线共14位（2位为片选信号使用）**\n\n## 3.4外部存储器\n\n**磁盘存取时间的计算：寻道时间+旋转延迟时间（转半圈）+传输时间**\n","slug":"计组第三章存储系统","published":1,"updated":"2024-03-11T06:15:49.460Z","comments":1,"layout":"post","photos":[],"_id":"cltqmserp0010qcnj3hkg026z","content":"<h1 id=\"第三章存储系统\"><a href=\"#第三章存储系统\" class=\"headerlink\" title=\"第三章存储系统\"></a>第三章存储系统</h1><h2 id=\"3-3主存储器与cpu的连接\"><a href=\"#3-3主存储器与cpu的连接\" class=\"headerlink\" title=\"3.3主存储器与cpu的连接\"></a>3.3主存储器与cpu的连接</h2><p>1.主存容量的扩展</p>\n<p>(1)字扩展</p>\n<p>(2)位扩展</p>\n<p>(3)字位同时扩展</p>\n<p>2.存储芯片的地址分配和片选</p>\n<p>(1)线选法</p>\n<p>(2)译码片选法</p>\n<p><strong>4K*4位的存储芯片组成16KB存储器-&gt;地址线共14位（2位为片选信号使用）</strong></p>\n<h2 id=\"3-4外部存储器\"><a href=\"#3-4外部存储器\" class=\"headerlink\" title=\"3.4外部存储器\"></a>3.4外部存储器</h2><p><strong>磁盘存取时间的计算：寻道时间+旋转延迟时间（转半圈）+传输时间</strong></p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"第三章存储系统\"><a href=\"#第三章存储系统\" class=\"headerlink\" title=\"第三章存储系统\"></a>第三章存储系统</h1><h2 id=\"3-3主存储器与cpu的连接\"><a href=\"#3-3主存储器与cpu的连接\" class=\"headerlink\" title=\"3.3主存储器与cpu的连接\"></a>3.3主存储器与cpu的连接</h2><p>1.主存容量的扩展</p>\n<p>(1)字扩展</p>\n<p>(2)位扩展</p>\n<p>(3)字位同时扩展</p>\n<p>2.存储芯片的地址分配和片选</p>\n<p>(1)线选法</p>\n<p>(2)译码片选法</p>\n<p><strong>4K*4位的存储芯片组成16KB存储器-&gt;地址线共14位（2位为片选信号使用）</strong></p>\n<h2 id=\"3-4外部存储器\"><a href=\"#3-4外部存储器\" class=\"headerlink\" title=\"3.4外部存储器\"></a>3.4外部存储器</h2><p><strong>磁盘存取时间的计算：寻道时间+旋转延迟时间（转半圈）+传输时间</strong></p>\n"},{"title":"队列","date":"2024-03-02T08:47:50.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305988-30aa3e.jpg","description":null,"_content":"\n\n\n# 队列的顺序存储\n\n```c++\n#define MaxSize 50\ntypedef struct{\n\tElemType data[MaxSize];//用数组存放队列元素\n\tint front,rear;//队头指针和队尾指针\n}SqQueue;\n//初始化队列\nvoid InitQueue(SqQueue &Q){\n    Q.rear=Q.front=0;\n}\n//判空\nbool QueueEmpty(SqQueue Q){\n    if(Q.rear=Q.front)//队空条件\n        return true;\n    else\n        return false;\n}\n//入队\nbool EnQueue(SqQueue &Q){\n    if((Q.rear+1)%MaxSize==Q.front)//队满条件\n        return false;\n    Q.data[Q.rear]=x;\n    Q.rear=(Q.rear+1)%MaxSize;\n    return true;\n}\n//出队\nbool DeQueue(SqQueue &Q){\n    if(Q.rear=Q.front)\n        return flase;\n    x=Q.data[front];\n    Q.front=(Q.front+1)%MaxSize;\n    return true;\n}\n```\n\n# 队列的链式存储\n\n```\ntypedef struct LinkNode{\n\tElemType data;\n\tstruct LinkNode *next;\n}LinkNode;\n\ntypedef struct {\n\tElemType data;\n\tLinkNode *front,*rear;\n}LinkQueue;\n\n//初始化队列\nvoid InitQueue(LinkQueue &Q){\n\n}\n```\n\n","source":"_posts/队列.md","raw":"---\ntitle: 队列\ndate: 2024-03-02 16:47:50\ntags:\ncategories: 数据结构\ncover:\ndescription:\n---\n\n\n\n# 队列的顺序存储\n\n```c++\n#define MaxSize 50\ntypedef struct{\n\tElemType data[MaxSize];//用数组存放队列元素\n\tint front,rear;//队头指针和队尾指针\n}SqQueue;\n//初始化队列\nvoid InitQueue(SqQueue &Q){\n    Q.rear=Q.front=0;\n}\n//判空\nbool QueueEmpty(SqQueue Q){\n    if(Q.rear=Q.front)//队空条件\n        return true;\n    else\n        return false;\n}\n//入队\nbool EnQueue(SqQueue &Q){\n    if((Q.rear+1)%MaxSize==Q.front)//队满条件\n        return false;\n    Q.data[Q.rear]=x;\n    Q.rear=(Q.rear+1)%MaxSize;\n    return true;\n}\n//出队\nbool DeQueue(SqQueue &Q){\n    if(Q.rear=Q.front)\n        return flase;\n    x=Q.data[front];\n    Q.front=(Q.front+1)%MaxSize;\n    return true;\n}\n```\n\n# 队列的链式存储\n\n```\ntypedef struct LinkNode{\n\tElemType data;\n\tstruct LinkNode *next;\n}LinkNode;\n\ntypedef struct {\n\tElemType data;\n\tLinkNode *front,*rear;\n}LinkQueue;\n\n//初始化队列\nvoid InitQueue(LinkQueue &Q){\n\n}\n```\n\n","slug":"队列","published":1,"updated":"2024-03-08T03:28:12.684Z","comments":1,"layout":"post","photos":[],"_id":"cltqmserp0013qcnj55dpby4o","content":"<h1 id=\"队列的顺序存储\"><a href=\"#队列的顺序存储\" class=\"headerlink\" title=\"队列的顺序存储\"></a>队列的顺序存储</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tElemType data[MaxSize];<span class=\"comment\">//用数组存放队列元素</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> front,rear;<span class=\"comment\">//队头指针和队尾指针</span></span><br><span class=\"line\">&#125;SqQueue;</span><br><span class=\"line\"><span class=\"comment\">//初始化队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitQueue</span><span class=\"params\">(SqQueue &amp;Q)</span></span>&#123;</span><br><span class=\"line\">    Q.rear=Q.front=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//判空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">QueueEmpty</span><span class=\"params\">(SqQueue Q)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.rear=Q.front)<span class=\"comment\">//队空条件</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//入队</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">EnQueue</span><span class=\"params\">(SqQueue &amp;Q)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((Q.rear+<span class=\"number\">1</span>)%MaxSize==Q.front)<span class=\"comment\">//队满条件</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    Q.data[Q.rear]=x;</span><br><span class=\"line\">    Q.rear=(Q.rear+<span class=\"number\">1</span>)%MaxSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//出队</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DeQueue</span><span class=\"params\">(SqQueue &amp;Q)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.rear=Q.front)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flase;</span><br><span class=\"line\">    x=Q.data[front];</span><br><span class=\"line\">    Q.front=(Q.front+<span class=\"number\">1</span>)%MaxSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"队列的链式存储\"><a href=\"#队列的链式存储\" class=\"headerlink\" title=\"队列的链式存储\"></a>队列的链式存储</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct LinkNode&#123;</span><br><span class=\"line\">\tElemType data;</span><br><span class=\"line\">\tstruct LinkNode *next;</span><br><span class=\"line\">&#125;LinkNode;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">\tElemType data;</span><br><span class=\"line\">\tLinkNode *front,*rear;</span><br><span class=\"line\">&#125;LinkQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">//初始化队列</span><br><span class=\"line\">void InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","cover_type":"img","excerpt":"","more":"<h1 id=\"队列的顺序存储\"><a href=\"#队列的顺序存储\" class=\"headerlink\" title=\"队列的顺序存储\"></a>队列的顺序存储</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tElemType data[MaxSize];<span class=\"comment\">//用数组存放队列元素</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> front,rear;<span class=\"comment\">//队头指针和队尾指针</span></span><br><span class=\"line\">&#125;SqQueue;</span><br><span class=\"line\"><span class=\"comment\">//初始化队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitQueue</span><span class=\"params\">(SqQueue &amp;Q)</span></span>&#123;</span><br><span class=\"line\">    Q.rear=Q.front=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//判空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">QueueEmpty</span><span class=\"params\">(SqQueue Q)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.rear=Q.front)<span class=\"comment\">//队空条件</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//入队</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">EnQueue</span><span class=\"params\">(SqQueue &amp;Q)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((Q.rear+<span class=\"number\">1</span>)%MaxSize==Q.front)<span class=\"comment\">//队满条件</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    Q.data[Q.rear]=x;</span><br><span class=\"line\">    Q.rear=(Q.rear+<span class=\"number\">1</span>)%MaxSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//出队</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DeQueue</span><span class=\"params\">(SqQueue &amp;Q)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.rear=Q.front)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flase;</span><br><span class=\"line\">    x=Q.data[front];</span><br><span class=\"line\">    Q.front=(Q.front+<span class=\"number\">1</span>)%MaxSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"队列的链式存储\"><a href=\"#队列的链式存储\" class=\"headerlink\" title=\"队列的链式存储\"></a>队列的链式存储</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct LinkNode&#123;</span><br><span class=\"line\">\tElemType data;</span><br><span class=\"line\">\tstruct LinkNode *next;</span><br><span class=\"line\">&#125;LinkNode;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">\tElemType data;</span><br><span class=\"line\">\tLinkNode *front,*rear;</span><br><span class=\"line\">&#125;LinkQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">//初始化队列</span><br><span class=\"line\">void InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"高数第三章一元函数积分学","date":"2024-03-08T02:37:13.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-08/TXK-72U4-MY-AGJQQY-F-HY-b012f9.jpg","description":"第三章相关知识点笔记","_content":"\n# 一、不定积分\n\n## 1.不定积分的定义\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%AE%9A%E4%B9%89-53ad3b.png)\n\n## 2.不定积分的性质\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E6%80%A7%E8%B4%A8-df998c.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E5%8E%9F%E5%87%BD%E6%95%B0%E5%AD%98%E5%9C%A8%E5%AE%9A%E7%90%86-e97e64.png)\n\n## 3.不定积分的计算\n\n### (1)积分表\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308114839856-97bdc3.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308114935911-25f73b.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308115004116-efee5b.png)\n\n### (2)计算方法\n\n#### 第一类换元法\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308120216242-670970.png)\n\n##### 题型1\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308121605560-d1f714.png)\n\n**穷途末路来一刀！**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308120235023-815f95.png)\n\n##### 题型2\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105202782-c6ee91.png)\n\n##### 题型3\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105316318-8bd2e7.png)\n\n##### 题型4\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105337089-ebbe51.png)\n\n##### 题型5\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105351830-665796.png)\n\n#### 第二类换元法\n\n##### 1.三角代换\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310112737988-8183c4.png)\n\n##### 2.无理根式换元\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310114025396-bb76f7.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310114419378-60004e.png)\n\n##### 3.分部积分法\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310122753249-9053da.png)\n\n###### **重要经验公式**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310125139793-24faef.png)\n\n**secx**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093233117-413f9e.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093314171-aedfd4.png)\n\n**tanx**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093358000-52362b.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093443259-ce8f73.png)\n\n#### 有理分式\n\n(1)真分式\n\n(2)假分式=>真分式\n\n#### 有理分式拆分方法\n\n括号外决定项数，括号内决定次方\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311103354463-ef90f9.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311105000694-5c512d.png)\n\n`每项都应不能再被因式分解`\n","source":"_posts/高数第三章积分.md","raw":"---\ntitle: 高数第三章一元函数积分学\ndate: 2024-03-08 10:37:13\ntags: 高数\ncategories: 高数\ncover: https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-08/TXK-72U4-MY-AGJQQY-F-HY-b012f9.jpg\ndescription: 第三章相关知识点笔记\n---\n\n# 一、不定积分\n\n## 1.不定积分的定义\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%AE%9A%E4%B9%89-53ad3b.png)\n\n## 2.不定积分的性质\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E6%80%A7%E8%B4%A8-df998c.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E5%8E%9F%E5%87%BD%E6%95%B0%E5%AD%98%E5%9C%A8%E5%AE%9A%E7%90%86-e97e64.png)\n\n## 3.不定积分的计算\n\n### (1)积分表\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308114839856-97bdc3.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308114935911-25f73b.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308115004116-efee5b.png)\n\n### (2)计算方法\n\n#### 第一类换元法\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308120216242-670970.png)\n\n##### 题型1\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308121605560-d1f714.png)\n\n**穷途末路来一刀！**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308120235023-815f95.png)\n\n##### 题型2\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105202782-c6ee91.png)\n\n##### 题型3\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105316318-8bd2e7.png)\n\n##### 题型4\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105337089-ebbe51.png)\n\n##### 题型5\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105351830-665796.png)\n\n#### 第二类换元法\n\n##### 1.三角代换\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310112737988-8183c4.png)\n\n##### 2.无理根式换元\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310114025396-bb76f7.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310114419378-60004e.png)\n\n##### 3.分部积分法\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310122753249-9053da.png)\n\n###### **重要经验公式**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310125139793-24faef.png)\n\n**secx**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093233117-413f9e.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093314171-aedfd4.png)\n\n**tanx**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093358000-52362b.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093443259-ce8f73.png)\n\n#### 有理分式\n\n(1)真分式\n\n(2)假分式=>真分式\n\n#### 有理分式拆分方法\n\n括号外决定项数，括号内决定次方\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311103354463-ef90f9.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311105000694-5c512d.png)\n\n`每项都应不能再被因式分解`\n","slug":"高数第三章积分","published":1,"updated":"2024-03-11T13:17:35.360Z","comments":1,"layout":"post","photos":[],"_id":"cltqmserr0018qcnjcxkp8zpz","content":"<h1 id=\"一、不定积分\"><a href=\"#一、不定积分\" class=\"headerlink\" title=\"一、不定积分\"></a>一、不定积分</h1><h2 id=\"1-不定积分的定义\"><a href=\"#1-不定积分的定义\" class=\"headerlink\" title=\"1.不定积分的定义\"></a>1.不定积分的定义</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%AE%9A%E4%B9%89-53ad3b.png\"></p>\n<h2 id=\"2-不定积分的性质\"><a href=\"#2-不定积分的性质\" class=\"headerlink\" title=\"2.不定积分的性质\"></a>2.不定积分的性质</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E6%80%A7%E8%B4%A8-df998c.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E5%8E%9F%E5%87%BD%E6%95%B0%E5%AD%98%E5%9C%A8%E5%AE%9A%E7%90%86-e97e64.png\"></p>\n<h2 id=\"3-不定积分的计算\"><a href=\"#3-不定积分的计算\" class=\"headerlink\" title=\"3.不定积分的计算\"></a>3.不定积分的计算</h2><h3 id=\"1-积分表\"><a href=\"#1-积分表\" class=\"headerlink\" title=\"(1)积分表\"></a>(1)积分表</h3><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308114839856-97bdc3.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308114935911-25f73b.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308115004116-efee5b.png\"></p>\n<h3 id=\"2-计算方法\"><a href=\"#2-计算方法\" class=\"headerlink\" title=\"(2)计算方法\"></a>(2)计算方法</h3><h4 id=\"第一类换元法\"><a href=\"#第一类换元法\" class=\"headerlink\" title=\"第一类换元法\"></a>第一类换元法</h4><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308120216242-670970.png\"></p>\n<h5 id=\"题型1\"><a href=\"#题型1\" class=\"headerlink\" title=\"题型1\"></a>题型1</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308121605560-d1f714.png\"></p>\n<p><strong>穷途末路来一刀！</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308120235023-815f95.png\"></p>\n<h5 id=\"题型2\"><a href=\"#题型2\" class=\"headerlink\" title=\"题型2\"></a>题型2</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105202782-c6ee91.png\"></p>\n<h5 id=\"题型3\"><a href=\"#题型3\" class=\"headerlink\" title=\"题型3\"></a>题型3</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105316318-8bd2e7.png\"></p>\n<h5 id=\"题型4\"><a href=\"#题型4\" class=\"headerlink\" title=\"题型4\"></a>题型4</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105337089-ebbe51.png\"></p>\n<h5 id=\"题型5\"><a href=\"#题型5\" class=\"headerlink\" title=\"题型5\"></a>题型5</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105351830-665796.png\"></p>\n<h4 id=\"第二类换元法\"><a href=\"#第二类换元法\" class=\"headerlink\" title=\"第二类换元法\"></a>第二类换元法</h4><h5 id=\"1-三角代换\"><a href=\"#1-三角代换\" class=\"headerlink\" title=\"1.三角代换\"></a>1.三角代换</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310112737988-8183c4.png\"></p>\n<h5 id=\"2-无理根式换元\"><a href=\"#2-无理根式换元\" class=\"headerlink\" title=\"2.无理根式换元\"></a>2.无理根式换元</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310114025396-bb76f7.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310114419378-60004e.png\"></p>\n<h5 id=\"3-分部积分法\"><a href=\"#3-分部积分法\" class=\"headerlink\" title=\"3.分部积分法\"></a>3.分部积分法</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310122753249-9053da.png\"></p>\n<h6 id=\"重要经验公式\"><a href=\"#重要经验公式\" class=\"headerlink\" title=\"重要经验公式\"></a><strong>重要经验公式</strong></h6><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310125139793-24faef.png\"></p>\n<p><strong>secx</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093233117-413f9e.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093314171-aedfd4.png\"></p>\n<p><strong>tanx</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093358000-52362b.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093443259-ce8f73.png\"></p>\n<h4 id=\"有理分式\"><a href=\"#有理分式\" class=\"headerlink\" title=\"有理分式\"></a>有理分式</h4><p>(1)真分式</p>\n<p>(2)假分式&#x3D;&gt;真分式</p>\n<h4 id=\"有理分式拆分方法\"><a href=\"#有理分式拆分方法\" class=\"headerlink\" title=\"有理分式拆分方法\"></a>有理分式拆分方法</h4><p>括号外决定项数，括号内决定次方</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311103354463-ef90f9.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311105000694-5c512d.png\"></p>\n<p><code>每项都应不能再被因式分解</code></p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"一、不定积分\"><a href=\"#一、不定积分\" class=\"headerlink\" title=\"一、不定积分\"></a>一、不定积分</h1><h2 id=\"1-不定积分的定义\"><a href=\"#1-不定积分的定义\" class=\"headerlink\" title=\"1.不定积分的定义\"></a>1.不定积分的定义</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%AE%9A%E4%B9%89-53ad3b.png\"></p>\n<h2 id=\"2-不定积分的性质\"><a href=\"#2-不定积分的性质\" class=\"headerlink\" title=\"2.不定积分的性质\"></a>2.不定积分的性质</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E6%80%A7%E8%B4%A8-df998c.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/%E5%8E%9F%E5%87%BD%E6%95%B0%E5%AD%98%E5%9C%A8%E5%AE%9A%E7%90%86-e97e64.png\"></p>\n<h2 id=\"3-不定积分的计算\"><a href=\"#3-不定积分的计算\" class=\"headerlink\" title=\"3.不定积分的计算\"></a>3.不定积分的计算</h2><h3 id=\"1-积分表\"><a href=\"#1-积分表\" class=\"headerlink\" title=\"(1)积分表\"></a>(1)积分表</h3><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308114839856-97bdc3.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308114935911-25f73b.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308115004116-efee5b.png\"></p>\n<h3 id=\"2-计算方法\"><a href=\"#2-计算方法\" class=\"headerlink\" title=\"(2)计算方法\"></a>(2)计算方法</h3><h4 id=\"第一类换元法\"><a href=\"#第一类换元法\" class=\"headerlink\" title=\"第一类换元法\"></a>第一类换元法</h4><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308120216242-670970.png\"></p>\n<h5 id=\"题型1\"><a href=\"#题型1\" class=\"headerlink\" title=\"题型1\"></a>题型1</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308121605560-d1f714.png\"></p>\n<p><strong>穷途末路来一刀！</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308120235023-815f95.png\"></p>\n<h5 id=\"题型2\"><a href=\"#题型2\" class=\"headerlink\" title=\"题型2\"></a>题型2</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105202782-c6ee91.png\"></p>\n<h5 id=\"题型3\"><a href=\"#题型3\" class=\"headerlink\" title=\"题型3\"></a>题型3</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105316318-8bd2e7.png\"></p>\n<h5 id=\"题型4\"><a href=\"#题型4\" class=\"headerlink\" title=\"题型4\"></a>题型4</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105337089-ebbe51.png\"></p>\n<h5 id=\"题型5\"><a href=\"#题型5\" class=\"headerlink\" title=\"题型5\"></a>题型5</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310105351830-665796.png\"></p>\n<h4 id=\"第二类换元法\"><a href=\"#第二类换元法\" class=\"headerlink\" title=\"第二类换元法\"></a>第二类换元法</h4><h5 id=\"1-三角代换\"><a href=\"#1-三角代换\" class=\"headerlink\" title=\"1.三角代换\"></a>1.三角代换</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310112737988-8183c4.png\"></p>\n<h5 id=\"2-无理根式换元\"><a href=\"#2-无理根式换元\" class=\"headerlink\" title=\"2.无理根式换元\"></a>2.无理根式换元</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310114025396-bb76f7.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310114419378-60004e.png\"></p>\n<h5 id=\"3-分部积分法\"><a href=\"#3-分部积分法\" class=\"headerlink\" title=\"3.分部积分法\"></a>3.分部积分法</h5><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310122753249-9053da.png\"></p>\n<h6 id=\"重要经验公式\"><a href=\"#重要经验公式\" class=\"headerlink\" title=\"重要经验公式\"></a><strong>重要经验公式</strong></h6><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240310125139793-24faef.png\"></p>\n<p><strong>secx</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093233117-413f9e.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093314171-aedfd4.png\"></p>\n<p><strong>tanx</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093358000-52362b.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311093443259-ce8f73.png\"></p>\n<h4 id=\"有理分式\"><a href=\"#有理分式\" class=\"headerlink\" title=\"有理分式\"></a>有理分式</h4><p>(1)真分式</p>\n<p>(2)假分式&#x3D;&gt;真分式</p>\n<h4 id=\"有理分式拆分方法\"><a href=\"#有理分式拆分方法\" class=\"headerlink\" title=\"有理分式拆分方法\"></a>有理分式拆分方法</h4><p>括号外决定项数，括号内决定次方</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311103354463-ef90f9.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311105000694-5c512d.png\"></p>\n<p><code>每项都应不能再被因式分解</code></p>\n"},{"title":"顺序表","date":"2024-01-23T10:19:08.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-02-01/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240201122417-ae9943.jpg","_content":"\n# 顺序表的定义\n\n```\n#define MaxSize 50\ntypedef int ElemType;\ntypedef struct{\n\tElemType data[MaxSize];\n\tint length;\n}SqList;\n```\n\n有序表插入仍然保持有序(升序）\n\n```c\nint List_insert(SqList &L,ElemType e){\n    int i;\n    for ( i = 0; i < L.length; i++) {\n        if(e<L.data[i])\n            break;\n    }\n    for (int j =L.length; j>=i+1 ; j--) {\n        L.data[j]=L.data[j-1];\n    }\n    L.data[i]=e;\n    L.length++;\n    return i+1;\n}\n```\n\n顺序表的插入\n\n```\nbool ListInsert(SqList &L,int i,ElemType element){\n    //判断插入位置是否合法\n    if(i<1||i>L.length+1)\n        return false;\n    //判断顺序表是否满了\n    if(L.length>=MaxSize)\n        return false;\n    //顺序表插入操作\n    for (int j = L.length; j >=i; j--) {\n        L.data[j]=L.data[j-1];\n    }\n    L.data[i-1]=element;\n    L.length++;\n    return true;\n}\n```\n\n删除i位置的元素\n\n```\nint ListDelete(SqList &L,int i){\n    int e;\n    e=L.data[i-1];\n    for (int j = i; j < L.length; j++) {\n        L.data[j-1]=L.data[j];\n    }\n    L.length--;\n    return e;\n}\n```\n","source":"_posts/顺序表.md","raw":"---\ntitle: 顺序表\ndate: 2024-01-23 18:19:08\ntags: c语言\ncategories: 数据结构\ncover: https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-02-01/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240201122417-ae9943.jpg\n---\n\n# 顺序表的定义\n\n```\n#define MaxSize 50\ntypedef int ElemType;\ntypedef struct{\n\tElemType data[MaxSize];\n\tint length;\n}SqList;\n```\n\n有序表插入仍然保持有序(升序）\n\n```c\nint List_insert(SqList &L,ElemType e){\n    int i;\n    for ( i = 0; i < L.length; i++) {\n        if(e<L.data[i])\n            break;\n    }\n    for (int j =L.length; j>=i+1 ; j--) {\n        L.data[j]=L.data[j-1];\n    }\n    L.data[i]=e;\n    L.length++;\n    return i+1;\n}\n```\n\n顺序表的插入\n\n```\nbool ListInsert(SqList &L,int i,ElemType element){\n    //判断插入位置是否合法\n    if(i<1||i>L.length+1)\n        return false;\n    //判断顺序表是否满了\n    if(L.length>=MaxSize)\n        return false;\n    //顺序表插入操作\n    for (int j = L.length; j >=i; j--) {\n        L.data[j]=L.data[j-1];\n    }\n    L.data[i-1]=element;\n    L.length++;\n    return true;\n}\n```\n\n删除i位置的元素\n\n```\nint ListDelete(SqList &L,int i){\n    int e;\n    e=L.data[i-1];\n    for (int j = i; j < L.length; j++) {\n        L.data[j-1]=L.data[j];\n    }\n    L.length--;\n    return e;\n}\n```\n","slug":"顺序表","published":1,"updated":"2024-03-08T03:28:31.464Z","comments":1,"layout":"post","photos":[],"_id":"cltqmserr001aqcnj5rvtaa9o","content":"<h1 id=\"顺序表的定义\"><a href=\"#顺序表的定义\" class=\"headerlink\" title=\"顺序表的定义\"></a>顺序表的定义</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define MaxSize 50</span><br><span class=\"line\">typedef int ElemType;</span><br><span class=\"line\">typedef struct&#123;</span><br><span class=\"line\">\tElemType data[MaxSize];</span><br><span class=\"line\">\tint length;</span><br><span class=\"line\">&#125;SqList;</span><br></pre></td></tr></table></figure>\n\n<p>有序表插入仍然保持有序(升序）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">List_insert</span><span class=\"params\">(SqList &amp;L,ElemType e)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; L.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e&lt;L.data[i])</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j =L.length; j&gt;=i+<span class=\"number\">1</span> ; j--) &#123;</span><br><span class=\"line\">        L.data[j]=L.data[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.data[i]=e;</span><br><span class=\"line\">    L.length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>顺序表的插入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool ListInsert(SqList &amp;L,int i,ElemType element)&#123;</span><br><span class=\"line\">    //判断插入位置是否合法</span><br><span class=\"line\">    if(i&lt;1||i&gt;L.length+1)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    //判断顺序表是否满了</span><br><span class=\"line\">    if(L.length&gt;=MaxSize)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    //顺序表插入操作</span><br><span class=\"line\">    for (int j = L.length; j &gt;=i; j--) &#123;</span><br><span class=\"line\">        L.data[j]=L.data[j-1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.data[i-1]=element;</span><br><span class=\"line\">    L.length++;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>删除i位置的元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int ListDelete(SqList &amp;L,int i)&#123;</span><br><span class=\"line\">    int e;</span><br><span class=\"line\">    e=L.data[i-1];</span><br><span class=\"line\">    for (int j = i; j &lt; L.length; j++) &#123;</span><br><span class=\"line\">        L.data[j-1]=L.data[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.length--;</span><br><span class=\"line\">    return e;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"顺序表的定义\"><a href=\"#顺序表的定义\" class=\"headerlink\" title=\"顺序表的定义\"></a>顺序表的定义</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define MaxSize 50</span><br><span class=\"line\">typedef int ElemType;</span><br><span class=\"line\">typedef struct&#123;</span><br><span class=\"line\">\tElemType data[MaxSize];</span><br><span class=\"line\">\tint length;</span><br><span class=\"line\">&#125;SqList;</span><br></pre></td></tr></table></figure>\n\n<p>有序表插入仍然保持有序(升序）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">List_insert</span><span class=\"params\">(SqList &amp;L,ElemType e)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; L.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e&lt;L.data[i])</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j =L.length; j&gt;=i+<span class=\"number\">1</span> ; j--) &#123;</span><br><span class=\"line\">        L.data[j]=L.data[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.data[i]=e;</span><br><span class=\"line\">    L.length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>顺序表的插入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool ListInsert(SqList &amp;L,int i,ElemType element)&#123;</span><br><span class=\"line\">    //判断插入位置是否合法</span><br><span class=\"line\">    if(i&lt;1||i&gt;L.length+1)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    //判断顺序表是否满了</span><br><span class=\"line\">    if(L.length&gt;=MaxSize)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    //顺序表插入操作</span><br><span class=\"line\">    for (int j = L.length; j &gt;=i; j--) &#123;</span><br><span class=\"line\">        L.data[j]=L.data[j-1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.data[i-1]=element;</span><br><span class=\"line\">    L.length++;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>删除i位置的元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int ListDelete(SqList &amp;L,int i)&#123;</span><br><span class=\"line\">    int e;</span><br><span class=\"line\">    e=L.data[i-1];</span><br><span class=\"line\">    for (int j = i; j &lt; L.length; j++) &#123;</span><br><span class=\"line\">        L.data[j-1]=L.data[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.length--;</span><br><span class=\"line\">    return e;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"词汇","date":"2024-01-28T10:36:29.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305222-82c0fe.jpg","description":null,"_content":"\n# 目录\n\n### 1.交互类\n\n#### 1.trans(转变，变化)\n\ntrans form（形式） er（人或物）n.变压器\n\ntrans port（港口）v.运输\n\n#### 2.inter（相互）\n\n#### international\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### \n","source":"_posts/词汇.md","raw":"---\ntitle: 词汇\ndate: 2024-01-28 18:36:29\ntags: 英语\ncategories: 英语\ncover: https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-01-28/202201191305222-82c0fe.jpg\ndescription:\n---\n\n# 目录\n\n### 1.交互类\n\n#### 1.trans(转变，变化)\n\ntrans form（形式） er（人或物）n.变压器\n\ntrans port（港口）v.运输\n\n#### 2.inter（相互）\n\n#### international\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### \n","slug":"词汇","published":1,"updated":"2024-03-08T03:27:18.380Z","comments":1,"layout":"post","photos":[],"_id":"cltqmsers001eqcnj9wt75xe5","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><h3 id=\"1-交互类\"><a href=\"#1-交互类\" class=\"headerlink\" title=\"1.交互类\"></a>1.交互类</h3><h4 id=\"1-trans-转变，变化\"><a href=\"#1-trans-转变，变化\" class=\"headerlink\" title=\"1.trans(转变，变化)\"></a>1.trans(转变，变化)</h4><p>trans form（形式） er（人或物）n.变压器</p>\n<p>trans port（港口）v.运输</p>\n<h4 id=\"2-inter（相互）\"><a href=\"#2-inter（相互）\" class=\"headerlink\" title=\"2.inter（相互）\"></a>2.inter（相互）</h4><h4 id=\"international\"><a href=\"#international\" class=\"headerlink\" title=\"international\"></a>international</h4><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4>","cover_type":"img","excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><h3 id=\"1-交互类\"><a href=\"#1-交互类\" class=\"headerlink\" title=\"1.交互类\"></a>1.交互类</h3><h4 id=\"1-trans-转变，变化\"><a href=\"#1-trans-转变，变化\" class=\"headerlink\" title=\"1.trans(转变，变化)\"></a>1.trans(转变，变化)</h4><p>trans form（形式） er（人或物）n.变压器</p>\n<p>trans port（港口）v.运输</p>\n<h4 id=\"2-inter（相互）\"><a href=\"#2-inter（相互）\" class=\"headerlink\" title=\"2.inter（相互）\"></a>2.inter（相互）</h4><h4 id=\"international\"><a href=\"#international\" class=\"headerlink\" title=\"international\"></a>international</h4><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4>"},{"title":"高数第一章函数极限与连续","date":"2024-02-14T11:09:29.000Z","cover":"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-08/NO-7AG-M6EB%60C%7B7F8VT2ZS-bc3399.jpg","description":"极限的相关知识总结","_content":"\n# 一、函数极限的定义和性质\n\n## 1.函数极限定义\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308143911664-a42a95.png)\n\n## 2.函数极限性质\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311192413805-81fa12.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311193238160-ed046b.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311193932754-48a705.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308142309553-43b230.png)\n\n**例题**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311193343414-dce808.png)\n\n## 3.闭区间连续函数有界定理\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311194447760-1f855f.png)\n\n## 4.开区间连续函数有界定理\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311195211764-5afc80.png)\n\n## 5.初等函数有界区间\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311200315955-fa5f4c.png)\n\n例题\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311195413356-eb336b.png)\n\n# 二、无穷小量\n\n## 1.无穷小定义\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308142339513-9061dd.png)\n\n## 2.无穷小比阶\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144243447-f39bf4.png)\n\n## 3.等价无穷小\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144300747-d7d7f2.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144323181-b29969.png)\n\n## 4.高阶无穷小间运算法则\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144338513-08e34e.png)\n\n## 5.等价无穷小充要条件\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144352952-71d6f8.png)\n\n# 三、泰勒公式\n","source":"_posts/高数第一章极限.md","raw":"---\ntitle: 高数第一章函数极限与连续\ndate: 2024-02-14 19:09:29\ntags: 高数\ncategories: 高数\ncover: https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-08/NO-7AG-M6EB%60C%7B7F8VT2ZS-bc3399.jpg\ndescription: 极限的相关知识总结\n---\n\n# 一、函数极限的定义和性质\n\n## 1.函数极限定义\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308143911664-a42a95.png)\n\n## 2.函数极限性质\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311192413805-81fa12.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311193238160-ed046b.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311193932754-48a705.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308142309553-43b230.png)\n\n**例题**\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311193343414-dce808.png)\n\n## 3.闭区间连续函数有界定理\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311194447760-1f855f.png)\n\n## 4.开区间连续函数有界定理\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311195211764-5afc80.png)\n\n## 5.初等函数有界区间\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311200315955-fa5f4c.png)\n\n例题\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311195413356-eb336b.png)\n\n# 二、无穷小量\n\n## 1.无穷小定义\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308142339513-9061dd.png)\n\n## 2.无穷小比阶\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144243447-f39bf4.png)\n\n## 3.等价无穷小\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144300747-d7d7f2.png)\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144323181-b29969.png)\n\n## 4.高阶无穷小间运算法则\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144338513-08e34e.png)\n\n## 5.等价无穷小充要条件\n\n![](https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144352952-71d6f8.png)\n\n# 三、泰勒公式\n","slug":"高数第一章极限","published":1,"updated":"2024-03-11T13:15:00.070Z","comments":1,"layout":"post","photos":[],"_id":"cltqmsert001iqcnj4tex9tpe","content":"<h1 id=\"一、函数极限的定义和性质\"><a href=\"#一、函数极限的定义和性质\" class=\"headerlink\" title=\"一、函数极限的定义和性质\"></a>一、函数极限的定义和性质</h1><h2 id=\"1-函数极限定义\"><a href=\"#1-函数极限定义\" class=\"headerlink\" title=\"1.函数极限定义\"></a>1.函数极限定义</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308143911664-a42a95.png\"></p>\n<h2 id=\"2-函数极限性质\"><a href=\"#2-函数极限性质\" class=\"headerlink\" title=\"2.函数极限性质\"></a>2.函数极限性质</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311192413805-81fa12.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311193238160-ed046b.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311193932754-48a705.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308142309553-43b230.png\"></p>\n<p><strong>例题</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311193343414-dce808.png\"></p>\n<h2 id=\"3-闭区间连续函数有界定理\"><a href=\"#3-闭区间连续函数有界定理\" class=\"headerlink\" title=\"3.闭区间连续函数有界定理\"></a>3.闭区间连续函数有界定理</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311194447760-1f855f.png\"></p>\n<h2 id=\"4-开区间连续函数有界定理\"><a href=\"#4-开区间连续函数有界定理\" class=\"headerlink\" title=\"4.开区间连续函数有界定理\"></a>4.开区间连续函数有界定理</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311195211764-5afc80.png\"></p>\n<h2 id=\"5-初等函数有界区间\"><a href=\"#5-初等函数有界区间\" class=\"headerlink\" title=\"5.初等函数有界区间\"></a>5.初等函数有界区间</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311200315955-fa5f4c.png\"></p>\n<p>例题</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311195413356-eb336b.png\"></p>\n<h1 id=\"二、无穷小量\"><a href=\"#二、无穷小量\" class=\"headerlink\" title=\"二、无穷小量\"></a>二、无穷小量</h1><h2 id=\"1-无穷小定义\"><a href=\"#1-无穷小定义\" class=\"headerlink\" title=\"1.无穷小定义\"></a>1.无穷小定义</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308142339513-9061dd.png\"></p>\n<h2 id=\"2-无穷小比阶\"><a href=\"#2-无穷小比阶\" class=\"headerlink\" title=\"2.无穷小比阶\"></a>2.无穷小比阶</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144243447-f39bf4.png\"></p>\n<h2 id=\"3-等价无穷小\"><a href=\"#3-等价无穷小\" class=\"headerlink\" title=\"3.等价无穷小\"></a>3.等价无穷小</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144300747-d7d7f2.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144323181-b29969.png\"></p>\n<h2 id=\"4-高阶无穷小间运算法则\"><a href=\"#4-高阶无穷小间运算法则\" class=\"headerlink\" title=\"4.高阶无穷小间运算法则\"></a>4.高阶无穷小间运算法则</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144338513-08e34e.png\"></p>\n<h2 id=\"5-等价无穷小充要条件\"><a href=\"#5-等价无穷小充要条件\" class=\"headerlink\" title=\"5.等价无穷小充要条件\"></a>5.等价无穷小充要条件</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144352952-71d6f8.png\"></p>\n<h1 id=\"三、泰勒公式\"><a href=\"#三、泰勒公式\" class=\"headerlink\" title=\"三、泰勒公式\"></a>三、泰勒公式</h1>","cover_type":"img","excerpt":"","more":"<h1 id=\"一、函数极限的定义和性质\"><a href=\"#一、函数极限的定义和性质\" class=\"headerlink\" title=\"一、函数极限的定义和性质\"></a>一、函数极限的定义和性质</h1><h2 id=\"1-函数极限定义\"><a href=\"#1-函数极限定义\" class=\"headerlink\" title=\"1.函数极限定义\"></a>1.函数极限定义</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308143911664-a42a95.png\"></p>\n<h2 id=\"2-函数极限性质\"><a href=\"#2-函数极限性质\" class=\"headerlink\" title=\"2.函数极限性质\"></a>2.函数极限性质</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311192413805-81fa12.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311193238160-ed046b.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311193932754-48a705.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308142309553-43b230.png\"></p>\n<p><strong>例题</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311193343414-dce808.png\"></p>\n<h2 id=\"3-闭区间连续函数有界定理\"><a href=\"#3-闭区间连续函数有界定理\" class=\"headerlink\" title=\"3.闭区间连续函数有界定理\"></a>3.闭区间连续函数有界定理</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311194447760-1f855f.png\"></p>\n<h2 id=\"4-开区间连续函数有界定理\"><a href=\"#4-开区间连续函数有界定理\" class=\"headerlink\" title=\"4.开区间连续函数有界定理\"></a>4.开区间连续函数有界定理</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311195211764-5afc80.png\"></p>\n<h2 id=\"5-初等函数有界区间\"><a href=\"#5-初等函数有界区间\" class=\"headerlink\" title=\"5.初等函数有界区间\"></a>5.初等函数有界区间</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311200315955-fa5f4c.png\"></p>\n<p>例题</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240311195413356-eb336b.png\"></p>\n<h1 id=\"二、无穷小量\"><a href=\"#二、无穷小量\" class=\"headerlink\" title=\"二、无穷小量\"></a>二、无穷小量</h1><h2 id=\"1-无穷小定义\"><a href=\"#1-无穷小定义\" class=\"headerlink\" title=\"1.无穷小定义\"></a>1.无穷小定义</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308142339513-9061dd.png\"></p>\n<h2 id=\"2-无穷小比阶\"><a href=\"#2-无穷小比阶\" class=\"headerlink\" title=\"2.无穷小比阶\"></a>2.无穷小比阶</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144243447-f39bf4.png\"></p>\n<h2 id=\"3-等价无穷小\"><a href=\"#3-等价无穷小\" class=\"headerlink\" title=\"3.等价无穷小\"></a>3.等价无穷小</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144300747-d7d7f2.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144323181-b29969.png\"></p>\n<h2 id=\"4-高阶无穷小间运算法则\"><a href=\"#4-高阶无穷小间运算法则\" class=\"headerlink\" title=\"4.高阶无穷小间运算法则\"></a>4.高阶无穷小间运算法则</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144338513-08e34e.png\"></p>\n<h2 id=\"5-等价无穷小充要条件\"><a href=\"#5-等价无穷小充要条件\" class=\"headerlink\" title=\"5.等价无穷小充要条件\"></a>5.等价无穷小充要条件</h2><p><img src=\"https://cdn.jsdelivr.net/gh/SereinCease/images/blog/2024-03-11/image-20240308144352952-71d6f8.png\"></p>\n<h1 id=\"三、泰勒公式\"><a href=\"#三、泰勒公式\" class=\"headerlink\" title=\"三、泰勒公式\"></a>三、泰勒公式</h1>"}],"PostAsset":[],"PostCategory":[{"post_id":"cltqmser80003qcnj19er46b3","category_id":"cltqmserd0007qcnj722waj1s","_id":"cltqmserk000kqcnj7z931i8b"},{"post_id":"cltqmserh000eqcnj0u8cen9u","category_id":"cltqmserd0007qcnj722waj1s","_id":"cltqmserl000nqcnjcp81an2x"},{"post_id":"cltqmserc0006qcnjg7vzcuxb","category_id":"cltqmserd0007qcnj722waj1s","_id":"cltqmserm000qqcnj7tf7c3n4"},{"post_id":"cltqmserl000mqcnj1t0vayxo","category_id":"cltqmserd0007qcnj722waj1s","_id":"cltqmsero000xqcnj43ch6n7x"},{"post_id":"cltqmserf0009qcnj6div6e7x","category_id":"cltqmserk000jqcnj3jox70sm","_id":"cltqmserp0011qcnjh6pzb1er"},{"post_id":"cltqmserm000pqcnj1bgycg7l","category_id":"cltqmserd0007qcnj722waj1s","_id":"cltqmserq0014qcnj63ei6bsq"},{"post_id":"cltqmserg000bqcnjasfdh0go","category_id":"cltqmserm000rqcnj12caakn3","_id":"cltqmserr0019qcnjd26oeqtx"},{"post_id":"cltqmserp0010qcnj3hkg026z","category_id":"cltqmsero000zqcnjfmgyh5ug","_id":"cltqmsers001bqcnjeeol23va"},{"post_id":"cltqmserj000gqcnj430u3mzt","category_id":"cltqmsero000zqcnjfmgyh5ug","_id":"cltqmsert001fqcnj6r6iau2q"},{"post_id":"cltqmserp0013qcnj55dpby4o","category_id":"cltqmserd0007qcnj722waj1s","_id":"cltqmseru001jqcnjdqsgck8i"},{"post_id":"cltqmserr001aqcnj5rvtaa9o","category_id":"cltqmserd0007qcnj722waj1s","_id":"cltqmseru001mqcnjgcafea5d"},{"post_id":"cltqmserk000iqcnjbw7j814y","category_id":"cltqmserq0016qcnj5a0w9j0e","_id":"cltqmserv001pqcnjgohlap6f"},{"post_id":"cltqmsers001eqcnj9wt75xe5","category_id":"cltqmserm000rqcnj12caakn3","_id":"cltqmserv001rqcnj50bbc1xp"},{"post_id":"cltqmsert001iqcnj4tex9tpe","category_id":"cltqmserq0016qcnj5a0w9j0e","_id":"cltqmserw001uqcnjfj4w5m1z"},{"post_id":"cltqmsern000tqcnjccfld0eo","category_id":"cltqmsero000zqcnjfmgyh5ug","_id":"cltqmserw001wqcnjfey27pcc"},{"post_id":"cltqmsero000wqcnjectzgiaq","category_id":"cltqmsero000zqcnjfmgyh5ug","_id":"cltqmserw001yqcnj7xgcgyhi"},{"post_id":"cltqmserr0018qcnjcxkp8zpz","category_id":"cltqmserq0016qcnj5a0w9j0e","_id":"cltqmserx0020qcnj5rw5bewv"}],"PostTag":[{"post_id":"cltqmser30001qcnja5wsaxz9","tag_id":"cltqmser90004qcnj51pod11c","_id":"cltqmserh000dqcnj23zg9q8p"},{"post_id":"cltqmser80003qcnj19er46b3","tag_id":"cltqmserg000cqcnjc53iejkq","_id":"cltqmserk000lqcnj755edx3j"},{"post_id":"cltqmserc0006qcnjg7vzcuxb","tag_id":"cltqmserj000hqcnj7m6v0oe5","_id":"cltqmsern000sqcnj0ewxe234"},{"post_id":"cltqmserl000mqcnj1t0vayxo","tag_id":"cltqmserj000hqcnj7m6v0oe5","_id":"cltqmsern000uqcnj730i1agb"},{"post_id":"cltqmserm000pqcnj1bgycg7l","tag_id":"cltqmserj000hqcnj7m6v0oe5","_id":"cltqmsero000yqcnje8ml6wfo"},{"post_id":"cltqmserf0009qcnj6div6e7x","tag_id":"cltqmserl000oqcnjdtb87u51","_id":"cltqmserp0012qcnjc3er3gwe"},{"post_id":"cltqmserg000bqcnjasfdh0go","tag_id":"cltqmsern000vqcnj5jztfi66","_id":"cltqmserq0017qcnjbmmnc4l6"},{"post_id":"cltqmserh000eqcnj0u8cen9u","tag_id":"cltqmserj000hqcnj7m6v0oe5","_id":"cltqmsers001dqcnj1569a63y"},{"post_id":"cltqmserr001aqcnj5rvtaa9o","tag_id":"cltqmserg000cqcnjc53iejkq","_id":"cltqmsert001hqcnje6psels3"},{"post_id":"cltqmsers001eqcnj9wt75xe5","tag_id":"cltqmsern000vqcnj5jztfi66","_id":"cltqmseru001lqcnjb8xhcm12"},{"post_id":"cltqmserj000gqcnj430u3mzt","tag_id":"cltqmsers001cqcnjf6nfht3r","_id":"cltqmserv001oqcnj8uncacga"},{"post_id":"cltqmserk000iqcnjbw7j814y","tag_id":"cltqmseru001kqcnjc1w58trs","_id":"cltqmserw001tqcnjhieb3fkx"},{"post_id":"cltqmsern000tqcnjccfld0eo","tag_id":"cltqmsers001cqcnjf6nfht3r","_id":"cltqmserw001xqcnj3t736ht0"},{"post_id":"cltqmserp0010qcnj3hkg026z","tag_id":"cltqmsers001cqcnjf6nfht3r","_id":"cltqmserx0021qcnj5zmk8ibk"},{"post_id":"cltqmserr0018qcnjcxkp8zpz","tag_id":"cltqmseru001kqcnjc1w58trs","_id":"cltqmserx0023qcnj030oeb6i"},{"post_id":"cltqmsert001iqcnj4tex9tpe","tag_id":"cltqmseru001kqcnjc1w58trs","_id":"cltqmsery0024qcnj586bcvcp"}],"Tag":[{"name":"Python","_id":"cltqmser90004qcnj51pod11c"},{"name":"c语言","_id":"cltqmserg000cqcnjc53iejkq"},{"name":"数据结构","_id":"cltqmserj000hqcnj7m6v0oe5"},{"name":"操作系统","_id":"cltqmserl000oqcnjdtb87u51"},{"name":"英语","_id":"cltqmsern000vqcnj5jztfi66"},{"name":"计组","_id":"cltqmsers001cqcnjf6nfht3r"},{"name":"高数","_id":"cltqmseru001kqcnjc1w58trs"}]}}